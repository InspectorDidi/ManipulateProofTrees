(Definition Coq.PArith.BinPosDef.Pos.succ (Fix (Functions (App succ 0 (Prod x_22222222221 positive positive) (Lambda x_22222222222 positive (Case 0 (Lambda x_222222222222 positive positive) (CaseMatch x_22222222222) (CaseBranches (Lambda p_222222222222 positive (App xO (App succ p_222222222222))) (Lambda p_222222222222 positive (App xI p_222222222222)) (App xO xH)))))) 0)) (Definition Coq.PArith.BinPosDef.Pos.add (Fix (Functions (App add 0 (Prod x_22222221 positive (Prod y_222222211 positive positive)) (Lambda x_22222222 positive (Lambda y_222222222 positive (Case 0 (Lambda x_2222222222 positive positive) (CaseMatch x_22222222) (CaseBranches (Lambda p_2222222222 positive (Case 0 (Lambda y_22222222222 positive positive) (CaseMatch y_222222222) (CaseBranches (Lambda q_22222222222 positive (App xO (App add p_2222222222 q_22222222222))) (Lambda q_22222222222 positive (App xI (App add_carry p_2222222222 q_22222222222))) (App xO (App Coq.PArith.BinPosDef.Pos.succ p_2222222222))))) (Lambda p_2222222222 positive (Case 0 (Lambda y_22222222222 positive positive) (CaseMatch y_222222222) (CaseBranches (Lambda q_22222222222 positive (App xI (App add_carry p_2222222222 q_22222222222))) (Lambda q_22222222222 positive (App xO (App add_carry p_2222222222 q_22222222222))) (App xI p_2222222222)))) (Case 0 (Lambda y_2222222222 positive positive) (CaseMatch y_222222222) (CaseBranches (Lambda q_2222222222 positive (App xO (App Coq.PArith.BinPosDef.Pos.succ q_2222222222))) (Lambda q_2222222222 positive (App xI q_2222222222)) (App xO xH)))))))) (App add_carry 1 (Prod x_22222221 positive (Prod y_222222211 positive positive)) (Lambda x_22222222 positive (Lambda y_222222222 positive (Case 0 (Lambda x_2222222222 positive positive) (CaseMatch x_22222222) (CaseBranches (Lambda p_2222222222 positive (Case 0 (Lambda y_22222222222 positive positive) (CaseMatch y_222222222) (CaseBranches (Lambda q_22222222222 positive (App xI (App add p_2222222222 q_22222222222))) (Lambda q_22222222222 positive (App xO (App add p_2222222222 q_22222222222))) (App xI (App Coq.PArith.BinPosDef.Pos.succ p_2222222222))))) (Lambda p_2222222222 positive (Case 0 (Lambda y_22222222222 positive positive) (CaseMatch y_222222222) (CaseBranches (Lambda q_22222222222 positive (App xO (App add p_2222222222 q_22222222222))) (Lambda q_22222222222 positive (App xI (App add_carry p_2222222222 q_22222222222))) (App xO (App Coq.PArith.BinPosDef.Pos.succ p_2222222222))))) (Case 0 (Lambda y_2222222222 positive positive) (CaseMatch y_222222222) (CaseBranches (Lambda q_2222222222 positive (App xI (App Coq.PArith.BinPosDef.Pos.succ q_2222222222))) (Lambda q_2222222222 positive (App xO (App Coq.PArith.BinPosDef.Pos.succ q_2222222222))) (App xI xH))))))))) 0)) (Definition Coq.ZArith.BinIntDef.Z.double (Lambda x_222222222222 Z (Case 0 (Lambda x_2222222222222 Z Z) (CaseMatch x_222222222222) (CaseBranches Z0 (Lambda p_2222222222222 positive (App Zpos (App xO p_2222222222222))) (Lambda p_2222222222222 positive (App Zneg (App xO p_2222222222222))))))) (Definition Coq.ZArith.BinIntDef.Z.succ_double (Lambda x_222222222222 Z (Case 0 (Lambda x_2222222222222 Z Z) (CaseMatch x_222222222222) (CaseBranches (App Zpos xH) (Lambda p_2222222222222 positive (App Zpos (App xI p_2222222222222))) (Lambda p_2222222222222 positive (App Zneg (App Coq.PArith.BinPosDef.Pos.pred_double p_2222222222222))))))) (Definition Coq.ZArith.BinIntDef.Z.pred_double (Lambda x_222222222222 Z (Case 0 (Lambda x_2222222222222 Z Z) (CaseMatch x_222222222222) (CaseBranches (App Zneg xH) (Lambda p_2222222222222 positive (App Zpos (App Coq.PArith.BinPosDef.Pos.pred_double p_2222222222222))) (Lambda p_2222222222222 positive (App Zneg (App xI p_2222222222222))))))) (Definition Coq.PArith.BinPosDef.Pos.pred_double (Fix (Functions (App pred_double 0 (Prod x_22222222221 positive positive) (Lambda x_22222222222 positive (Case 0 (Lambda x_222222222222 positive positive) (CaseMatch x_22222222222) (CaseBranches (Lambda p_222222222222 positive (App xI (App xO p_222222222222))) (Lambda p_222222222222 positive (App xI (App pred_double p_222222222222))) xH))))) 0)) (Definition Coq.ZArith.BinIntDef.Z.pos_sub (Fix (Functions (App pos_sub 0 (Prod x_22222221 positive (Prod y_222222211 positive Z)) (Lambda x_22222222 positive (Lambda y_222222222 positive (Case 0 (Lambda x_2222222222 positive Z) (CaseMatch x_22222222) (CaseBranches (Lambda p_2222222222 positive (Case 0 (Lambda y_22222222222 positive Z) (CaseMatch y_222222222) (CaseBranches (Lambda q_22222222222 positive (App Coq.ZArith.BinIntDef.Z.double (App pos_sub p_2222222222 q_22222222222))) (Lambda q_22222222222 positive (App Coq.ZArith.BinIntDef.Z.succ_double (App pos_sub p_2222222222 q_22222222222))) (App Zpos (App xO p_2222222222))))) (Lambda p_2222222222 positive (Case 0 (Lambda y_22222222222 positive Z) (CaseMatch y_222222222) (CaseBranches (Lambda q_22222222222 positive (App Coq.ZArith.BinIntDef.Z.pred_double (App pos_sub p_2222222222 q_22222222222))) (Lambda q_22222222222 positive (App Coq.ZArith.BinIntDef.Z.double (App pos_sub p_2222222222 q_22222222222))) (App Zpos (App Coq.PArith.BinPosDef.Pos.pred_double p_2222222222))))) (Case 0 (Lambda y_2222222222 positive Z) (CaseMatch y_222222222) (CaseBranches (Lambda q_2222222222 positive (App Zneg (App xO q_2222222222))) (Lambda q_2222222222 positive (App Zneg (App Coq.PArith.BinPosDef.Pos.pred_double q_2222222222))) Z0)))))))) 0)) (Definition Coq.ZArith.BinIntDef.Z.add (Lambda x_2222 Z (Lambda y_22222 Z (Case 0 (Lambda x_222222 Z Z) (CaseMatch x_2222) (CaseBranches y_22222 (Lambda x'_222222 positive (Case 0 (Lambda y_2222222 Z Z) (CaseMatch y_22222) (CaseBranches x_2222 (Lambda y'_2222222 positive (App Zpos (App Coq.PArith.BinPosDef.Pos.add x'_222222 y'_2222222))) (Lambda y'_2222222 positive (App Coq.ZArith.BinIntDef.Z.pos_sub x'_222222 y'_2222222))))) (Lambda x'_222222 positive (Case 0 (Lambda y_2222222 Z Z) (CaseMatch y_22222) (CaseBranches x_2222 (Lambda y'_2222222 positive (App Coq.ZArith.BinIntDef.Z.pos_sub y'_2222222 x'_222222)) (Lambda y'_2222222 positive (App Zneg (App Coq.PArith.BinPosDef.Pos.add x'_222222 y'_2222222))))))))))) (Definition Coq.PArith.BinPosDef.Pos.mul (Fix (Functions (App mul 0 (Prod x_22222221 positive (Prod y_222222211 positive positive)) (Lambda x_22222222 positive (Lambda y_222222222 positive (Case 0 (Lambda x_2222222222 positive positive) (CaseMatch x_22222222) (CaseBranches (Lambda p_2222222222 positive (App Coq.PArith.BinPosDef.Pos.add y_222222222 (App xO (App mul p_2222222222 y_222222222)))) (Lambda p_2222222222 positive (App xO (App mul p_2222222222 y_222222222))) y_222222222)))))) 0)) (Definition Coq.ZArith.BinIntDef.Z.mul (Lambda x_2222 Z (Lambda y_22222 Z (Case 0 (Lambda x_222222 Z Z) (CaseMatch x_2222) (CaseBranches Z0 (Lambda x'_222222 positive (Case 0 (Lambda y_2222222 Z Z) (CaseMatch y_22222) (CaseBranches Z0 (Lambda y'_2222222 positive (App Zpos (App Coq.PArith.BinPosDef.Pos.mul x'_222222 y'_2222222))) (Lambda y'_2222222 positive (App Zneg (App Coq.PArith.BinPosDef.Pos.mul x'_222222 y'_2222222)))))) (Lambda x'_222222 positive (Case 0 (Lambda y_2222222 Z Z) (CaseMatch y_22222) (CaseBranches Z0 (Lambda y'_2222222 positive (App Zneg (App Coq.PArith.BinPosDef.Pos.mul x'_222222 y'_2222222))) (Lambda y'_2222222 positive (App Zpos (App Coq.PArith.BinPosDef.Pos.mul x'_222222 y'_2222222))))))))))) (Definition SumOfTwoSquare.TwoSquares.sum_of_two_squares (Lambda p_2 Z (App ex Z (Lambda a_22 Z (App ex Z (Lambda b_222 Z (App eq Z p_2 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul a_22 a_22) (App Coq.ZArith.BinIntDef.Z.mul b_222 b_222))))))))) 