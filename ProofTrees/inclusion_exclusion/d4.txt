(Definition ExportProof.set (Prod out_1 (Axiom ExportProof.X) bool)) (Definition Coq.PArith.BinPosDef.Pos.add (Fix (Functions (App add 0 (Prod x_2222222221 positive (Prod y_22222222211 positive positive)) (Lambda x_2222222222 positive (Lambda y_22222222222 positive (Case 0 (Lambda x_222222222222 positive positive) (CaseMatch x_2222222222) (CaseBranches (Lambda p_222222222222 positive (Case 0 (Lambda y_2222222222222 positive positive) (CaseMatch y_22222222222) (CaseBranches (Lambda q_2222222222222 positive (App xO (App add p_222222222222 q_2222222222222))) (Lambda q_2222222222222 positive (App xI (App add_carry p_222222222222 q_2222222222222))) (App xO (App Coq.PArith.BinPosDef.Pos.succ p_222222222222))))) (Lambda p_222222222222 positive (Case 0 (Lambda y_2222222222222 positive positive) (CaseMatch y_22222222222) (CaseBranches (Lambda q_2222222222222 positive (App xI (App add_carry p_222222222222 q_2222222222222))) (Lambda q_2222222222222 positive (App xO (App add_carry p_222222222222 q_2222222222222))) (App xI p_222222222222)))) (Case 0 (Lambda y_222222222222 positive positive) (CaseMatch y_22222222222) (CaseBranches (Lambda q_222222222222 positive (App xO (App Coq.PArith.BinPosDef.Pos.succ q_222222222222))) (Lambda q_222222222222 positive (App xI q_222222222222)) (App xO xH)))))))) (App add_carry 1 (Prod x_2222222221 positive (Prod y_22222222211 positive positive)) (Lambda x_2222222222 positive (Lambda y_22222222222 positive (Case 0 (Lambda x_222222222222 positive positive) (CaseMatch x_2222222222) (CaseBranches (Lambda p_222222222222 positive (Case 0 (Lambda y_2222222222222 positive positive) (CaseMatch y_22222222222) (CaseBranches (Lambda q_2222222222222 positive (App xI (App add p_222222222222 q_2222222222222))) (Lambda q_2222222222222 positive (App xO (App add p_222222222222 q_2222222222222))) (App xI (App Coq.PArith.BinPosDef.Pos.succ p_222222222222))))) (Lambda p_222222222222 positive (Case 0 (Lambda y_2222222222222 positive positive) (CaseMatch y_22222222222) (CaseBranches (Lambda q_2222222222222 positive (App xO (App add p_222222222222 q_2222222222222))) (Lambda q_2222222222222 positive (App xI (App add_carry p_222222222222 q_2222222222222))) (App xO (App Coq.PArith.BinPosDef.Pos.succ p_222222222222))))) (Case 0 (Lambda y_222222222222 positive positive) (CaseMatch y_22222222222) (CaseBranches (Lambda q_222222222222 positive (App xI (App Coq.PArith.BinPosDef.Pos.succ q_222222222222))) (Lambda q_222222222222 positive (App xO (App Coq.PArith.BinPosDef.Pos.succ q_222222222222))) (App xI xH))))))))) 0)) (Definition Coq.PArith.BinPosDef.Pos.mul (Fix (Functions (App mul 0 (Prod x_2222221 positive (Prod y_22222211 positive positive)) (Lambda x_2222222 positive (Lambda y_22222222 positive (Case 0 (Lambda x_222222222 positive positive) (CaseMatch x_2222222) (CaseBranches (Lambda p_222222222 positive (App Coq.PArith.BinPosDef.Pos.add y_22222222 (App xO (App mul p_222222222 y_22222222)))) (Lambda p_222222222 positive (App xO (App mul p_222222222 y_22222222))) y_22222222)))))) 0)) (Definition Coq.ZArith.BinIntDef.Z.mul (Lambda x_222 Z (Lambda y_2222 Z (Case 0 (Lambda x_22222 Z Z) (CaseMatch x_222) (CaseBranches Z0 (Lambda x'_22222 positive (Case 0 (Lambda y_222222 Z Z) (CaseMatch y_2222) (CaseBranches Z0 (Lambda y'_222222 positive (App Zpos (App Coq.PArith.BinPosDef.Pos.mul x'_22222 y'_222222))) (Lambda y'_222222 positive (App Zneg (App Coq.PArith.BinPosDef.Pos.mul x'_22222 y'_222222)))))) (Lambda x'_22222 positive (Case 0 (Lambda y_222222 Z Z) (CaseMatch y_2222) (CaseBranches Z0 (Lambda y'_222222 positive (App Zneg (App Coq.PArith.BinPosDef.Pos.mul x'_22222 y'_222222))) (Lambda y'_222222 positive (App Zpos (App Coq.PArith.BinPosDef.Pos.mul x'_22222 y'_222222))))))))))) (Definition Coq.PArith.BinPosDef.Pos.of_succ_nat (Fix (Functions (App of_succ_nat 0 (Prod n_222221 nat positive) (Lambda n_222222 nat (Case 0 (Lambda n_2222222 nat positive) (CaseMatch n_222222) (CaseBranches xH (Lambda x_2222222 nat (App Coq.PArith.BinPosDef.Pos.succ (App of_succ_nat x_2222222)))))))) 0)) (Definition Coq.ZArith.BinIntDef.Z.of_nat (Lambda n_2222 nat (Case 0 (Lambda n_22222 nat Z) (CaseMatch n_2222) (CaseBranches Z0 (Lambda n_22222 nat (App Zpos (App Coq.PArith.BinPosDef.Pos.of_succ_nat n_22222))))))) (Definition Coq.Init.Datatypes.length (Lambda A_2222 (Sort Type) (Fix (Functions (App length 0 (Prod l_22221 (App list A_2222) nat) (Lambda l_22222 (App list A_2222) (Case 1 (Lambda l_222222 (App list A_2222) nat) (CaseMatch l_22222) (CaseBranches O (Lambda a_222222 A_2222 (Lambda l'_2222222 (App list A_2222) (App S (App length l'_2222222))))))))) 0))) (Definition Coq.Lists.List.filter (Lambda A_2222 (Sort Type) (Lambda f_22222 (Prod out_22221 A_2222 bool) (Fix (Functions (App filter 0 (Prod l_222221 (App list A_2222) (App list A_2222)) (Lambda l_222222 (App list A_2222) (Case 1 (Lambda l_2222222 (App list A_2222) (App list A_2222)) (CaseMatch l_222222) (CaseBranches (App nil A_2222) (Lambda x_2222222 A_2222 (Lambda l_22222222 (App list A_2222) (Case 0 (Lambda b_222222222 bool (App list A_2222)) (CaseMatch (App f_22222 x_2222222)) (CaseBranches (App cons A_2222 x_2222222 (App filter l_22222222)) (App filter l_22222222)))))))))) 0)))) (Definition ExportProof.cardinal (Lambda A_222 ExportProof.set (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_222 (Axiom ExportProof.enum_X)))))) (Definition Coq.Lists.List.fold_right (Lambda A_2222222222 (Sort Type) (Lambda B_22222222222 (Sort Type) (Lambda f_222222222222 (Prod out_222222222221 B_22222222222 (Prod out_2222222222211 A_2222222222 A_2222222222)) (Lambda a0_2222222222222 A_2222222222 (Fix (Functions (App fold_right 0 (Prod l_22222222222221 (App list B_22222222222) A_2222222222) (Lambda l_22222222222222 (App list B_22222222222) (Case 1 (Lambda l_222222222222222 (App list B_22222222222) A_2222222222) (CaseMatch l_22222222222222) (CaseBranches a0_2222222222222 (Lambda b_222222222222222 B_22222222222 (Lambda t_2222222222222222 (App list B_22222222222) (App f_222222222222 b_222222222222222 (App fold_right t_2222222222222222))))))))) 0)))))) (Definition ExportProof.fold1 (Lambda A_2222 (Sort Type) (Lambda f_22222 (Prod out_22221 A_2222 (Prod out_222211 A_2222 A_2222)) (Lambda l_222222 (App list A_2222) (Lambda default_2222222 A_2222 (Case 1 (Lambda l_22222222 (App list A_2222) A_2222) (CaseMatch l_222222) (CaseBranches default_2222222 (Lambda x_22222222 A_2222 (Lambda xs_222222222 (App list A_2222) (App Coq.Lists.List.fold_right A_2222 A_2222 f_22222 x_22222222 xs_222222222)))))))))) (Definition Coq.Init.Datatypes.andb (Lambda b1_2222222 bool (Lambda b2_22222222 bool (Case 0 (Lambda b1_222222222 bool bool) (CaseMatch b1_2222222) (CaseBranches b2_22222222 false))))) (Definition ExportProof.binary_intersection (Lambda A_2222 ExportProof.set (Lambda B_22222 ExportProof.set (Lambda x_222222 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2222 x_222222) (App B_22222 x_222222)))))) (Definition ExportProof.empty_set (Lambda out_2222 (Axiom ExportProof.X) false)) (Definition ExportProof.list_intersection (Lambda A_222 (App list ExportProof.set) (App ExportProof.fold1 ExportProof.set ExportProof.binary_intersection A_222 ExportProof.empty_set))) (Definition Coq.ZArith.BinIntDef.Z.opp (Lambda x_22222 Z (Case 0 (Lambda x_222222 Z Z) (CaseMatch x_22222) (CaseBranches Z0 (Lambda x_222222 positive (App Zneg x_222222)) (Lambda x_222222 positive (App Zpos x_222222)))))) (Definition ExportProof.alternating_sign (Fix (Functions (App alternating_sign 0 (Prod n_221 nat Z) (Lambda n_222 nat (Case 0 (Lambda n_2222 nat Z) (CaseMatch n_222) (CaseBranches (App Zpos xH) (Lambda n_2222 nat (App Coq.ZArith.BinIntDef.Z.opp (App alternating_sign n_2222)))))))) 0)) (Definition Coq.Init.Nat.add (Fix (Functions (App add 0 (Prod n_221 nat (Prod m_2211 nat nat)) (Lambda n_222 nat (Lambda m_2222 nat (Case 0 (Lambda n_22222 nat nat) (CaseMatch n_222) (CaseBranches m_2222 (Lambda p_22222 nat (App S (App add p_22222 m_2222))))))))) 0)) (Definition Coq.Init.Datatypes.nat_ind (Lambda P_23332 (Prod n_23331 nat (Sort Prop)) (Lambda f_233322 (App P_23332 O) (Lambda f_2333222 (Prod n_2333221 nat (Prod out_23332211 (App P_23332 n_2333221) (App P_23332 (App S n_2333221)))) (Fix (Functions (App F 0 (Prod n_23332221 nat (App P_23332 n_23332221)) (Lambda n_23332222 nat (Case 0 (Lambda n_233322222 nat (App P_23332 n_233322222)) (CaseMatch n_23332222) (CaseBranches f_233322 (Lambda n_233322222 nat (App f_2333222 n_233322222 (App F n_233322222)))))))) 0))))) (Definition Coq.Init.Datatypes.orb (Lambda b1_233321122222 bool (Lambda b2_2333211222222 bool (Case 0 (Lambda b1_23332112222222 bool bool) (CaseMatch b1_233321122222) (CaseBranches true b2_2333211222222))))) (Definition ExportProof.binary_union (Lambda A_233321122 ExportProof.set (Lambda B_2333211222 ExportProof.set (Lambda x_23332112222 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_233321122 x_23332112222) (App B_2333211222 x_23332112222)))))) (Definition ExportProof.list_union (Lambda A_23332112 (App list ExportProof.set) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_union ExportProof.empty_set A_23332112))) (Definition Coq.ZArith.BinIntDef.Z.pos_sub (Fix (Functions (App pos_sub 0 (Prod x_233321122222221 positive (Prod y_2333211222222211 positive Z)) (Lambda x_233321122222222 positive (Lambda y_2333211222222222 positive (Case 0 (Lambda x_23332112222222222 positive Z) (CaseMatch x_233321122222222) (CaseBranches (Lambda p_23332112222222222 positive (Case 0 (Lambda y_233321122222222222 positive Z) (CaseMatch y_2333211222222222) (CaseBranches (Lambda q_233321122222222222 positive (App Coq.ZArith.BinIntDef.Z.double (App pos_sub p_23332112222222222 q_233321122222222222))) (Lambda q_233321122222222222 positive (App Coq.ZArith.BinIntDef.Z.succ_double (App pos_sub p_23332112222222222 q_233321122222222222))) (App Zpos (App xO p_23332112222222222))))) (Lambda p_23332112222222222 positive (Case 0 (Lambda y_233321122222222222 positive Z) (CaseMatch y_2333211222222222) (CaseBranches (Lambda q_233321122222222222 positive (App Coq.ZArith.BinIntDef.Z.pred_double (App pos_sub p_23332112222222222 q_233321122222222222))) (Lambda q_233321122222222222 positive (App Coq.ZArith.BinIntDef.Z.double (App pos_sub p_23332112222222222 q_233321122222222222))) (App Zpos (App Coq.PArith.BinPosDef.Pos.pred_double p_23332112222222222))))) (Case 0 (Lambda y_23332112222222222 positive Z) (CaseMatch y_2333211222222222) (CaseBranches (Lambda q_23332112222222222 positive (App Zneg (App xO q_23332112222222222))) (Lambda q_23332112222222222 positive (App Zneg (App Coq.PArith.BinPosDef.Pos.pred_double q_23332112222222222))) Z0)))))))) 0)) (Definition Coq.ZArith.BinIntDef.Z.add (Lambda x_23332112222 Z (Lambda y_233321122222 Z (Case 0 (Lambda x_2333211222222 Z Z) (CaseMatch x_23332112222) (CaseBranches y_233321122222 (Lambda x'_2333211222222 positive (Case 0 (Lambda y_23332112222222 Z Z) (CaseMatch y_233321122222) (CaseBranches x_23332112222 (Lambda y'_23332112222222 positive (App Zpos (App Coq.PArith.BinPosDef.Pos.add x'_2333211222222 y'_23332112222222))) (Lambda y'_23332112222222 positive (App Coq.ZArith.BinIntDef.Z.pos_sub x'_2333211222222 y'_23332112222222))))) (Lambda x'_2333211222222 positive (Case 0 (Lambda y_23332112222222 Z Z) (CaseMatch y_233321122222) (CaseBranches x_23332112222 (Lambda y'_23332112222222 positive (App Coq.ZArith.BinIntDef.Z.pos_sub y'_23332112222222 x'_2333211222222)) (Lambda y'_23332112222222 positive (App Zneg (App Coq.PArith.BinPosDef.Pos.add x'_2333211222222 y'_23332112222222))))))))))) (Definition ExportProof.sum (Fix (Functions (App sum 0 (Prod l_23332111 (App list Z) Z) (Lambda l_23332112 (App list Z) (Case 1 (Lambda l_233321122 (App list Z) Z) (CaseMatch l_23332112) (CaseBranches Z0 (Lambda x_233321122 Z (Lambda l_2333211222 (App list Z) (App Coq.ZArith.BinIntDef.Z.add x_233321122 (App sum l_2333211222))))))))) 0)) (Definition Coq.Lists.List.map (Lambda A_23332112 (Sort Type) (Lambda B_233321122 (Sort Type) (Lambda f_2333211222 (Prod out_2333211221 A_23332112 B_233321122) (Fix (Functions (App map 0 (Prod l_23332112221 (App list A_23332112) (App list B_233321122)) (Lambda l_23332112222 (App list A_23332112) (Case 1 (Lambda l_233321122222 (App list A_23332112) (App list B_233321122)) (CaseMatch l_23332112222) (CaseBranches (App nil B_233321122) (Lambda a_233321122222 A_23332112 (Lambda t_2333211222222 (App list A_23332112) (App cons B_233321122 (App f_2333211222 a_233321122222) (App map t_2333211222222))))))))) 0))))) (Definition ExportProof.nonempty (Lambda A_23332112 (Sort Type) (Lambda xs_233321122 (App list A_23332112) (Case 1 (Lambda xs_2333211222 (App list A_23332112) bool) (CaseMatch xs_233321122) (CaseBranches false (Lambda a_2333211222 A_23332112 (Lambda l_23332112222 (App list A_23332112) true))))))) (Definition Coq.Init.Datatypes.app (Lambda A_2333211222232 (Sort Type) (Fix (Functions (App app 0 (Prod l_23332112222321 (App list A_2333211222232) (Prod m_233321122223211 (App list A_2333211222232) (App list A_2333211222232))) (Lambda l_23332112222322 (App list A_2333211222232) (Lambda m_233321122223222 (App list A_2333211222232) (Case 1 (Lambda l_2333211222232222 (App list A_2333211222232) (App list A_2333211222232)) (CaseMatch l_23332112222322) (CaseBranches m_233321122223222 (Lambda a_2333211222232222 A_2333211222232 (Lambda l1_23332112222322222 (App list A_2333211222232) (App cons A_2333211222232 a_2333211222232222 (App app l1_23332112222322222 m_233321122223222)))))))))) 0))) (Definition ExportProof.sublists (Fix (Functions (App sublists 0 (Prod A_23332111 (Sort Type) (Prod xs_233321111 (App list A_23332111) (App list (App list A_23332111)))) (Lambda A_23332112 (Sort Type) (Lambda xs_233321122 (App list A_23332112) (Case 1 (Lambda xs_2333211222 (App list A_23332112) (App list (App list A_23332112))) (CaseMatch xs_233321122) (CaseBranches (App cons (App list A_23332112) (App nil A_23332112) (App nil (App list A_23332112))) (Lambda x_2333211222 A_23332112 (Lambda xs_23332112222 (App list A_23332112) (LetIn xss_233321122223 (App sublists A_23332112 xs_23332112222) (App list (App list A_23332112)) (App Coq.Init.Datatypes.app (App list A_23332112) xss_233321122223 (App Coq.Lists.List.map (App list A_23332112) (App list A_23332112) (Lambda l_2333211222232 (App list A_23332112) (App cons A_23332112 x_2333211222 l_2333211222232)) xss_233321122223))))))))))) 0)) (Definition Coq.Init.Logic.eq_ind (Lambda A_23332222222222 (Sort Type) (Lambda x_233322222222222 A_23332222222222 (Lambda P_2333222222222222 (Prod out_2333222222222221 A_23332222222222 (Sort Prop)) (Lambda f_23332222222222222 (App P_2333222222222222 x_233322222222222) (Lambda y_233322222222222222 A_23332222222222 (Lambda e_2333222222222222222 (App eq A_23332222222222 x_233322222222222 y_233322222222222222) (Case 2 (Lambda y_23332222222222222222 A_23332222222222 (Lambda out_233322222222222222222 (App eq A_23332222222222 x_233322222222222 y_23332222222222222222) (App P_2333222222222222 y_23332222222222222222))) (CaseMatch e_2333222222222222222) (CaseBranches f_23332222222222222))))))))) (Definition Coq.Init.Logic.eq_sym (Lambda A_23332222222222 (Sort Type) (Lambda x_233322222222222 A_23332222222222 (Lambda y_2333222222222222 A_23332222222222 (Lambda H_23332222222222222 (App eq A_23332222222222 x_233322222222222 y_2333222222222222) (Case 2 (Lambda y_233322222222222222 A_23332222222222 (Lambda out_2333222222222222222 (App eq A_23332222222222 x_233322222222222 y_233322222222222222) (App eq A_23332222222222 y_233322222222222222 x_233322222222222))) (CaseMatch H_23332222222222222) (CaseBranches (App eq_refl A_23332222222222 x_233322222222222)))))))) (Definition Coq.Init.Logic.eq_ind_r (Lambda A_23332222 (Sort Type) (Lambda x_233322222 A_23332222 (Lambda P_2333222222 (Prod out_2333222221 A_23332222 (Sort Prop)) (Lambda H_23332222222 (App P_2333222222 x_233322222) (Lambda y_233322222222 A_23332222 (Lambda H0_2333222222222 (App eq A_23332222 y_233322222222 x_233322222) (App Coq.Init.Logic.eq_ind A_23332222 x_233322222 (Lambda y_23332222222222 A_23332222 (App P_2333222222 y_23332222222222)) H_23332222222 y_233322222222 (App Coq.Init.Logic.eq_sym A_23332222 y_233322222222 x_233322222 H0_2333222222222))))))))) (Definition Coq.Init.Datatypes.list_ind (Lambda A_233322232 (Sort Type) (Lambda P_2333222322 (Prod l_2333222321 (App list A_233322232) (Sort Prop)) (Lambda f_23332223222 (App P_2333222322 (App nil A_233322232)) (Lambda f_233322232222 (Prod a_233322232221 A_233322232 (Prod l_2333222322211 (App list A_233322232) (Prod out_23332223222111 (App P_2333222322 l_2333222322211) (App P_2333222322 (App cons A_233322232 a_233322232221 l_2333222322211))))) (Fix (Functions (App F 0 (Prod l_2333222322221 (App list A_233322232) (App P_2333222322 l_2333222322221)) (Lambda l_2333222322222 (App list A_233322232) (Case 1 (Lambda l_23332223222222 (App list A_233322232) (App P_2333222322 l_23332223222222)) (CaseMatch l_2333222322222) (CaseBranches f_23332223222 (Lambda y_23332223222222 A_233322232 (Lambda l_233322232222222 (App list A_233322232) (App f_233322232222 y_23332223222222 l_233322232222222 (App F l_233322232222222))))))))) 0)))))) (Definition ExportProof.cardinal_empty (Cast (LetIn l_23332223 (Axiom ExportProof.enum_X) (App list (Axiom ExportProof.X)) (App Coq.Init.Datatypes.list_ind (Axiom ExportProof.X) (Lambda l_233322232 (App list (Axiom ExportProof.X)) (App eq Z (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda out_2333222322 (Axiom ExportProof.X) false) l_233322232))) Z0)) (App eq_refl Z Z0) (Lambda a_233322232 (Axiom ExportProof.X) (Lambda l_2333222322 (App list (Axiom ExportProof.X)) (Lambda IHl_23332223222 (App eq Z (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda out_23332223222 (Axiom ExportProof.X) false) l_2333222322))) Z0) IHl_23332223222))) l_23332223)) REVERTcast (App eq Z (App ExportProof.cardinal ExportProof.empty_set) Z0))) (Definition Coq.Init.Logic.False_ind (Lambda P_23332222232 (Sort Prop) (Lambda f_233322222322 False (Case 0 (Lambda out_2333222223222 False P_23332222232) (CaseMatch f_233322222322) (CaseBranches))))) (Definition Coq.Init.Logic.f_equal (Lambda A_233322222222 (Sort Type) (Lambda B_2333222222222 (Sort Type) (Lambda f_23332222222222 (Prod out_23332222222221 A_233322222222 B_2333222222222) (Lambda x_233322222222222 A_233322222222 (Lambda y_2333222222222222 A_233322222222 (Lambda H_23332222222222222 (App eq A_233322222222 x_233322222222222 y_2333222222222222) (Case 2 (Lambda y_233322222222222222 A_233322222222 (Lambda out_2333222222222222222 (App eq A_233322222222 x_233322222222222 y_233322222222222222) (App eq B_2333222222222 (App f_23332222222222 x_233322222222222) (App f_23332222222222 y_233322222222222222)))) (CaseMatch H_23332222222222222) (CaseBranches (App eq_refl B_2333222222222 (App f_23332222222222 x_233322222222222))))))))))) (Definition Coq.ZArith.BinIntDef.Z.sub (Lambda m_23332222222322 Z (Lambda n_233322222223222 Z (App Coq.ZArith.BinIntDef.Z.add m_23332222222322 (App Coq.ZArith.BinIntDef.Z.opp n_233322222223222))))) (Definition ExportProof.set_eq (Lambda A_23332222222323222 ExportProof.set (Lambda B_233322222223232222 ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) (App eq bool (App A_23332222222323222 x_2333222222232322221) (App B_233322222223232222 x_2333222222232322221)))))) (Definition Coq.Init.Logic.eq_trans (Lambda A_23332222222323222322232 (Sort Type) (Lambda x_233322222223232223222322 A_23332222222323222322232 (Lambda y_2333222222232322232223222 A_23332222222323222322232 (Lambda z_23332222222323222322232222 A_23332222222323222322232 (Lambda H_233322222223232223222322222 (App eq A_23332222222323222322232 x_233322222223232223222322 y_2333222222232322232223222) (Lambda H0_2333222222232322232223222222 (App eq A_23332222222323222322232 y_2333222222232322232223222 z_23332222222323222322232222) (Case 2 (Lambda y_23332222222323222322232222222 A_23332222222323222322232 (Lambda out_233322222223232223222322222222 (App eq A_23332222222323222322232 y_2333222222232322232223222 y_23332222222323222322232222222) (App eq A_23332222222323222322232 x_233322222223232223222322 y_23332222222323222322232222222))) (CaseMatch H0_2333222222232322232223222222) (CaseBranches H_233322222223232223222322222))))))))) (Definition ExportProof.cardinal_set_eq (Lambda A_233322222223232 ExportProof.set (Lambda B_2333222222232322 ExportProof.set (Lambda E_23332222222323222 (App ExportProof.set_eq A_233322222223232 B_2333222222232322) (Cast (LetIn H_233322222223232223 (LetIn l_233322222223232223 (Axiom ExportProof.enum_X) (App list (Axiom ExportProof.X)) (App Coq.Init.Datatypes.list_ind (Axiom ExportProof.X) (Lambda l_2333222222232322232 (App list (Axiom ExportProof.X)) (App eq nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_2333222222232322232)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 l_2333222222232322232)))) (Cast (App eq_refl nat O) REVERTcast (App eq nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 (App nil (Axiom ExportProof.X)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 (App nil (Axiom ExportProof.X)))))) (Lambda a_2333222222232322232 (Axiom ExportProof.X) (Lambda l_23332222222323222322 (App list (Axiom ExportProof.X)) (Lambda IHl_233322222223232223222 (App eq nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 l_23332222222323222322))) (Cast (App Coq.Init.Logic.eq_ind_r bool (App B_2333222222232322 a_2333222222232322232) (Lambda b_2333222222232322232222 bool (App eq nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_23332222222323222322222 bool (App list (Axiom ExportProof.X))) (CaseMatch b_2333222222232322232222) (CaseBranches (App cons (Axiom ExportProof.X) a_2333222222232322232 (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_23332222222323222322222 bool (App list (Axiom ExportProof.X))) (CaseMatch (App B_2333222222232322 a_2333222222232322232)) (CaseBranches (App cons (Axiom ExportProof.X) a_2333222222232322232 (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 l_23332222222323222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 l_23332222222323222322)))))) (LetIn b_2333222222232322232223 (App B_2333222222232322 a_2333222222232322232) bool (Case 0 (Lambda b_23332222222323222322232 bool (App eq nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223232223222322 bool (App list (Axiom ExportProof.X))) (CaseMatch b_23332222222323222322232) (CaseBranches (App cons (Axiom ExportProof.X) a_2333222222232322232 (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223232223222322 bool (App list (Axiom ExportProof.X))) (CaseMatch b_23332222222323222322232) (CaseBranches (App cons (Axiom ExportProof.X) a_2333222222232322232 (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 l_23332222222323222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 l_23332222222323222322)))))) (CaseMatch b_2333222222232322232223) (CaseBranches (Cast (App Coq.Init.Logic.eq_trans nat (App S (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322))) (App S (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322))) (App S (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 l_23332222222323222322))) (App Coq.Init.Logic.f_equal (Prod out_23332222222323222322231 nat nat) nat (Lambda f_23332222222323222322232 (Prod out_23332222222323222322231 nat nat) (App f_23332222222323222322232 (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322)))) S S (App eq_refl (Prod out_23332222222323222322231 nat nat) S)) (App Coq.Init.Logic.f_equal nat nat S (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 l_23332222222323222322)) IHl_233322222223232223222)) REVERTcast (App eq nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App cons (Axiom ExportProof.X) a_2333222222232322232 (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App cons (Axiom ExportProof.X) a_2333222222232322232 (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 l_23332222222323222322))))) (Cast IHl_233322222223232223222 REVERTcast (App eq nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 l_23332222222323222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 l_23332222222323222322))))))) (App A_233322222223232 a_2333222222232322232) (App E_23332222222323222 a_2333222222232322232)) REVERTcast (App eq nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 (App cons (Axiom ExportProof.X) a_2333222222232322232 l_23332222222323222322))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 (App cons (Axiom ExportProof.X) a_2333222222232322232 l_23332222222323222322)))))))) l_233322222223232223)) (App eq nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 (Axiom ExportProof.enum_X)))) (App (Lambda H_2333222222232322232 (App eq nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 (Axiom ExportProof.enum_X)))) (App Coq.Init.Logic.eq_trans Z (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 (Axiom ExportProof.enum_X)))) (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 (Axiom ExportProof.enum_X)))) (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 (Axiom ExportProof.enum_X)))) (App Coq.Init.Logic.f_equal (Prod n_23332222222323222321 nat Z) Z (Lambda f_23332222222323222322 (Prod n_23332222222323222321 nat Z) (App f_23332222222323222322 (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 (Axiom ExportProof.enum_X))))) Coq.ZArith.BinIntDef.Z.of_nat Coq.ZArith.BinIntDef.Z.of_nat (App eq_refl (Prod n_23332222222323222321 nat Z) Coq.ZArith.BinIntDef.Z.of_nat)) (App Coq.Init.Logic.f_equal nat Z Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_233322222223232 (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_2333222222232322 (Axiom ExportProof.enum_X))) H_2333222222232322232))) H_233322222223232223)) REVERTcast (App eq Z (App ExportProof.cardinal A_233322222223232) (App ExportProof.cardinal B_2333222222232322))))))) (Definition Coq.Relations.Relation_Definitions.relation (Lambda A_233322222223232222322 (Sort Type) (Prod out_2333222222232322223221 A_233322222223232222322 (Prod out_23332222222323222232211 A_233322222223232222322 (Sort Prop))))) (Definition Coq.Classes.Morphisms.Proper (LetIn U_23332222222323222232223 (Sort Type) (Sort Type) (Lambda A_233322222223232222322232 U_23332222222323222232223 (Lambda R_2333222222232322223222322 (App Coq.Relations.Relation_Definitions.relation A_233322222223232222322232) (Lambda m_23332222222323222232223222 A_233322222223232222322232 (App R_2333222222232322223222322 m_23332222222323222232223222 m_23332222222323222232223222)))))) (Definition Coq.Classes.Init.Unconvertible (Lambda A_2333222222232322223222222 (Sort Type) (Lambda a_23332222222323222232222222 A_2333222222232322223222222 (Lambda b_233322222223232222322222222 A_2333222222232322223222222 unit)))) (Definition Coq.Classes.RelationClasses.subrelation (Lambda A_23332222222323222232222222 (Sort Type) (Lambda R_233322222223232222322222222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232222222) (Lambda R'_2333222222232322223222222222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232222222) (Prod x_23332222222323222232222222221 A_23332222222323222232222222 (Prod y_233322222223232222322222222211 A_23332222222323222232222222 (Prod out_2333222222232322223222222222111 (App R_233322222223232222322222222 x_23332222222323222232222222221 y_233322222223232222322222222211) (App R'_2333222222232322223222222222 x_23332222222323222232222222221 y_233322222223232222322222222211)))))))) (Definition Coq.Classes.Morphisms.subrelation_proper (LetIn U_2333222222232322223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232 U_2333222222232322223 (Lambda R'_233322222223232222322 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda m_2333222222232322223222 A_23332222222323222232 (Lambda mor_23332222222323222232222 (App Coq.Classes.Morphisms.Proper A_23332222222323222232 R'_233322222223232222322 m_2333222222232322223222) (Lambda R_233322222223232222322222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda unc_2333222222232322223222222 (App Coq.Classes.Init.Unconvertible (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) R_233322222223232222322222 R'_233322222223232222322) (Lambda sub_23332222222323222232222222 (App Coq.Classes.RelationClasses.subrelation A_23332222222323222232 R'_233322222223232222322 R_233322222223232222322222) (App sub_23332222222323222232222222 m_2333222222232322223222 m_2333222222232322223222 mor_23332222222323222232222)))))))))) (Definition Coq.Classes.Morphisms.respectful (LetIn U_2333222222232322223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232 U_2333222222232322223 (Lambda B_233322222223232222322 U_2333222222232322223 (Lambda R_2333222222232322223222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda R'_23332222222323222232222 (App Coq.Relations.Relation_Definitions.relation B_233322222223232222322) (Lambda f_233322222223232222322222 (Prod x_233322222223232222322221 A_23332222222323222232 B_233322222223232222322) (Lambda g_2333222222232322223222222 (Prod x_2333222222232322223222221 A_23332222222323222232 B_233322222223232222322) (Prod x_23332222222323222232222221 A_23332222222323222232 (Prod y_233322222223232222322222211 A_23332222222323222232 (Prod out_2333222222232322223222222111 (App R_2333222222232322223222 x_23332222222323222232222221 y_233322222223232222322222211) (App R'_23332222222323222232222 (App f_233322222223232222322222 x_23332222222323222232222221) (App g_2333222222232322223222222 y_233322222223232222322222211))))))))))))) (Definition Coq.Init.Logic.iff (Lambda A_2333222222232322222 (Sort Prop) (Lambda B_23332222222323222222 (Sort Prop) (App and (Prod out_233322222223232222221 A_2333222222232322222 B_23332222222323222222) (Prod out_233322222223232222221 B_23332222222323222222 A_2333222222232322222))))) (Definition Coq.Classes.RelationClasses.transitivity (Lambda A_233322222223232222322222322222222222 (Sort Type) (Lambda R_2333222222232322223222223222222222222 (App Coq.Relations.Relation_Definitions.relation A_233322222223232222322222322222222222) (Lambda Transitive_23332222222323222232222232222222222222 (App Coq.Classes.RelationClasses.Transitive A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222) Transitive_23332222222323222232222232222222222222)))) (Definition Coq.Classes.RelationClasses.PER_Transitive (Lambda A_233322222223232222322222322222222222 (Sort Type) (Lambda R_2333222222232322223222223222222222222 (App Coq.Relations.Relation_Definitions.relation A_233322222223232222322222322222222222) (Lambda PER_23332222222323222232222232222222222222 (App PER A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222) (Case 2 (Lambda PER_233322222223232222322222322222222222222 (App PER A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222) (App Coq.Classes.RelationClasses.Transitive A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222)) (CaseMatch PER_23332222222323222232222232222222222222) (CaseBranches (Lambda PER_Symmetric_233322222223232222322222322222222222222 (App Coq.Classes.RelationClasses.Symmetric A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222) (Lambda PER_Transitive_2333222222232322223222223222222222222222 (App Coq.Classes.RelationClasses.Transitive A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222) PER_Transitive_2333222222232322223222223222222222222222)))))))) (Definition Coq.Classes.RelationClasses.symmetry (Lambda A_233322222223232222322222322222222222 (Sort Type) (Lambda R_2333222222232322223222223222222222222 (App Coq.Relations.Relation_Definitions.relation A_233322222223232222322222322222222222) (Lambda Symmetric_23332222222323222232222232222222222222 (App Coq.Classes.RelationClasses.Symmetric A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222) Symmetric_23332222222323222232222232222222222222)))) (Definition Coq.Classes.RelationClasses.PER_Symmetric (Lambda A_233322222223232222322222322222222222 (Sort Type) (Lambda R_2333222222232322223222223222222222222 (App Coq.Relations.Relation_Definitions.relation A_233322222223232222322222322222222222) (Lambda PER_23332222222323222232222232222222222222 (App PER A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222) (Case 2 (Lambda PER_233322222223232222322222322222222222222 (App PER A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222) (App Coq.Classes.RelationClasses.Symmetric A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222)) (CaseMatch PER_23332222222323222232222232222222222222) (CaseBranches (Lambda PER_Symmetric_233322222223232222322222322222222222222 (App Coq.Classes.RelationClasses.Symmetric A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222) (Lambda PER_Transitive_2333222222232322223222223222222222222222 (App Coq.Classes.RelationClasses.Transitive A_233322222223232222322222322222222222 R_2333222222232322223222223222222222222) PER_Symmetric_233322222223232222322222322222222222222)))))))) (Definition Coq.Classes.Morphisms.PER_morphism_obligation_1 (LetIn U_2333222222232322223222223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232222232 U_2333222222232322223222223 (Lambda R_233322222223232222322222322 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232222232) (Lambda H_2333222222232322223222223222 (App PER A_23332222222323222232222232 R_233322222223232222322222322) (Lambda x_23332222222323222232222232222 A_23332222222323222232222232 (Lambda y_233322222223232222322222322222 A_23332222222323222232222232 (Lambda H0_2333222222232322223222223222222 (App R_233322222223232222322222322 x_23332222222323222232222232222 y_233322222223232222322222322222) (Lambda x0_23332222222323222232222232222222 A_23332222222323222232222232 (Lambda y0_233322222223232222322222322222222 A_23332222222323222232222232 (Lambda H1_2333222222232322223222223222222222 (App R_233322222223232222322222322 x0_23332222222323222232222232222222 y0_233322222223232222322222322222222) (App conj (Prod out_23332222222323222232222232222222221 (App R_233322222223232222322222322 x_23332222222323222232222232222 x0_23332222222323222232222232222222) (App R_233322222223232222322222322 y_233322222223232222322222322222 y0_233322222223232222322222322222222)) (Prod out_23332222222323222232222232222222221 (App R_233322222223232222322222322 y_233322222223232222322222322222 y0_233322222223232222322222322222222) (App R_233322222223232222322222322 x_23332222222323222232222232222 x0_23332222222323222232222232222222)) (Lambda H2_23332222222323222232222232222222222 (App R_233322222223232222322222322 x_23332222222323222232222232222 x0_23332222222323222232222232222222) (App Coq.Classes.RelationClasses.transitivity A_23332222222323222232222232 R_233322222223232222322222322 (App Coq.Classes.RelationClasses.PER_Transitive A_23332222222323222232222232 R_233322222223232222322222322 H_2333222222232322223222223222) y_233322222223232222322222322222 x0_23332222222323222232222232222222 y0_233322222223232222322222322222222 (App Coq.Classes.RelationClasses.transitivity A_23332222222323222232222232 R_233322222223232222322222322 (App Coq.Classes.RelationClasses.PER_Transitive A_23332222222323222232222232 R_233322222223232222322222322 H_2333222222232322223222223222) y_233322222223232222322222322222 x_23332222222323222232222232222 x0_23332222222323222232222232222222 (App Coq.Classes.RelationClasses.symmetry A_23332222222323222232222232 R_233322222223232222322222322 (App Coq.Classes.RelationClasses.PER_Symmetric A_23332222222323222232222232 R_233322222223232222322222322 H_2333222222232322223222223222) x_23332222222323222232222232222 y_233322222223232222322222322222 H0_2333222222232322223222223222222) H2_23332222222323222232222232222222222) H1_2333222222232322223222223222222222)) (Lambda H2_23332222222323222232222232222222222 (App R_233322222223232222322222322 y_233322222223232222322222322222 y0_233322222223232222322222322222222) (App Coq.Classes.RelationClasses.transitivity A_23332222222323222232222232 R_233322222223232222322222322 (App Coq.Classes.RelationClasses.PER_Transitive A_23332222222323222232222232 R_233322222223232222322222322 H_2333222222232322223222223222) x_23332222222323222232222232222 y_233322222223232222322222322222 x0_23332222222323222232222232222222 H0_2333222222232322223222223222222 (App Coq.Classes.RelationClasses.transitivity A_23332222222323222232222232 R_233322222223232222322222322 (App Coq.Classes.RelationClasses.PER_Transitive A_23332222222323222232222232 R_233322222223232222322222322 H_2333222222232322223222223222) y_233322222223232222322222322222 y0_233322222223232222322222322222222 x0_23332222222323222232222232222222 H2_23332222222323222232222232222222222 (App Coq.Classes.RelationClasses.symmetry A_23332222222323222232222232 R_233322222223232222322222322 (App Coq.Classes.RelationClasses.PER_Symmetric A_23332222222323222232222232 R_233322222223232222322222322 H_2333222222232322223222223222) x0_23332222222323222232222232222222 y0_233322222223232222322222322222222 H1_2333222222232322223222223222222222)))))))))))))))) (Definition Coq.Classes.Morphisms.PER_morphism (LetIn U_2333222222232322223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232 U_2333222222232322223 (Lambda R_233322222223232222322 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda H_2333222222232322223222 (App PER A_23332222222323222232 R_233322222223232222322) (App (Lambda R_23332222222323222232222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda H_233322222223232222322222 (App PER A_23332222222323222232 R_23332222222323222232222) (App Coq.Classes.Morphisms.PER_morphism_obligation_1 A_23332222222323222232 R_23332222222323222232222 H_233322222223232222322222))) R_233322222223232222322 H_2333222222232322223222)))))) (Definition Coq.Classes.RelationClasses.Symmetric (Lambda A_23332222222323222222222222 (Sort Type) (Lambda R_233322222223232222222222222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222222222222) (Prod x_2333222222232322222222222221 A_23332222222323222222222222 (Prod y_23332222222323222222222222211 A_23332222222323222222222222 (Prod out_233322222223232222222222222111 (App R_233322222223232222222222222 x_2333222222232322222222222221 y_23332222222323222222222222211) (App R_233322222223232222222222222 y_23332222222323222222222222211 x_2333222222232322222222222221))))))) (Definition Coq.Classes.RelationClasses.Reflexive (Lambda A_2333222222232322222222222 (Sort Type) (Lambda R_23332222222323222222222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222222222) (Prod x_233322222223232222222222221 A_2333222222232322222222222 (App R_23332222222323222222222222 x_233322222223232222222222221 x_233322222223232222222222221))))) (Definition Coq.Classes.RelationClasses.Transitive (Lambda A_233322222223232222222222222 (Sort Type) (Lambda R_2333222222232322222222222222 (App Coq.Relations.Relation_Definitions.relation A_233322222223232222222222222) (Prod x_23332222222323222222222222221 A_233322222223232222222222222 (Prod y_233322222223232222222222222211 A_233322222223232222222222222 (Prod z_2333222222232322222222222222111 A_233322222223232222222222222 (Prod out_23332222222323222222222222221111 (App R_2333222222232322222222222222 x_23332222222323222222222222221 y_233322222223232222222222222211) (Prod out_233322222223232222222222222211111 (App R_2333222222232322222222222222 y_233322222223232222222222222211 z_2333222222232322222222222222111) (App R_2333222222232322222222222222 x_23332222222323222222222222221 z_2333222222232322222222222222111))))))))) (Definition Coq.Classes.RelationClasses.Equivalence_Symmetric (Lambda A_2333222222232322222222 (Sort Type) (Lambda R_23332222222323222222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222222) (Lambda Equivalence_233322222223232222222222 (App Equivalence A_2333222222232322222222 R_23332222222323222222222) (Case 2 (Lambda Equivalence_2333222222232322222222222 (App Equivalence A_2333222222232322222222 R_23332222222323222222222) (App Coq.Classes.RelationClasses.Symmetric A_2333222222232322222222 R_23332222222323222222222)) (CaseMatch Equivalence_233322222223232222222222) (CaseBranches (Lambda Equivalence_Reflexive_2333222222232322222222222 (App Coq.Classes.RelationClasses.Reflexive A_2333222222232322222222 R_23332222222323222222222) (Lambda Equivalence_Symmetric_23332222222323222222222222 (App Coq.Classes.RelationClasses.Symmetric A_2333222222232322222222 R_23332222222323222222222) (Lambda Equivalence_Transitive_233322222223232222222222222 (App Coq.Classes.RelationClasses.Transitive A_2333222222232322222222 R_23332222222323222222222) Equivalence_Symmetric_23332222222323222222222222))))))))) (Definition Coq.Classes.RelationClasses.Equivalence_Transitive (Lambda A_2333222222232322222222 (Sort Type) (Lambda R_23332222222323222222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222222) (Lambda Equivalence_233322222223232222222222 (App Equivalence A_2333222222232322222222 R_23332222222323222222222) (Case 2 (Lambda Equivalence_2333222222232322222222222 (App Equivalence A_2333222222232322222222 R_23332222222323222222222) (App Coq.Classes.RelationClasses.Transitive A_2333222222232322222222 R_23332222222323222222222)) (CaseMatch Equivalence_233322222223232222222222) (CaseBranches (Lambda Equivalence_Reflexive_2333222222232322222222222 (App Coq.Classes.RelationClasses.Reflexive A_2333222222232322222222 R_23332222222323222222222) (Lambda Equivalence_Symmetric_23332222222323222222222222 (App Coq.Classes.RelationClasses.Symmetric A_2333222222232322222222 R_23332222222323222222222) (Lambda Equivalence_Transitive_233322222223232222222222222 (App Coq.Classes.RelationClasses.Transitive A_2333222222232322222222 R_23332222222323222222222) Equivalence_Transitive_233322222223232222222222222))))))))) (Definition Coq.Classes.RelationClasses.Equivalence_PER (Lambda A_2333222222232322222 (Sort Type) (Lambda R_23332222222323222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Lambda E_233322222223232222222 (App Equivalence A_2333222222232322222 R_23332222222323222222) (App Build_PER A_2333222222232322222 R_23332222222323222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric A_2333222222232322222 R_23332222222323222222 E_233322222223232222222) (App Coq.Classes.RelationClasses.Equivalence_Transitive A_2333222222232322222 R_23332222222323222222 E_233322222223232222222)))))) (Definition ExportProof.set_eq_refl (Cast (Lambda x_2333222222232322222 (Prod out_2333222222232322221 (Axiom ExportProof.X) bool) (Lambda x0_23332222222323222222 (Axiom ExportProof.X) (App eq_refl bool (App x_2333222222232322222 x0_23332222222323222222)))) REVERTcast (App Coq.Classes.RelationClasses.Reflexive ExportProof.set ExportProof.set_eq))) (Definition ExportProof.set_eq_sym (Cast (Lambda x_2333222222232322222 (Prod out_2333222222232322221 (Axiom ExportProof.X) bool) (Lambda y_23332222222323222222 (Prod out_23332222222323222221 (Axiom ExportProof.X) bool) (Lambda H_233322222223232222222 (Prod x_233322222223232222221 (Axiom ExportProof.X) (App eq bool (App x_2333222222232322222 x_233322222223232222221) (App y_23332222222323222222 x_233322222223232222221))) (Lambda x0_2333222222232322222222 (Axiom ExportProof.X) (App Coq.Init.Logic.eq_sym bool (App x_2333222222232322222 x0_2333222222232322222222) (App y_23332222222323222222 x0_2333222222232322222222) (App H_233322222223232222222 x0_2333222222232322222222)))))) REVERTcast (App Coq.Classes.RelationClasses.Symmetric ExportProof.set ExportProof.set_eq))) (Definition ExportProof.set_eq_trans (Cast (Lambda x_2333222222232322222 (Prod out_2333222222232322221 (Axiom ExportProof.X) bool) (Lambda y_23332222222323222222 (Prod out_23332222222323222221 (Axiom ExportProof.X) bool) (Lambda z_233322222223232222222 (Prod out_233322222223232222221 (Axiom ExportProof.X) bool) (Lambda H_2333222222232322222222 (Prod x_2333222222232322222221 (Axiom ExportProof.X) (App eq bool (App x_2333222222232322222 x_2333222222232322222221) (App y_23332222222323222222 x_2333222222232322222221))) (Lambda H0_23332222222323222222222 (Prod x_23332222222323222222221 (Axiom ExportProof.X) (App eq bool (App y_23332222222323222222 x_23332222222323222222221) (App z_233322222223232222222 x_23332222222323222222221))) (Lambda x0_233322222223232222222222 (Axiom ExportProof.X) (App Coq.Init.Logic.eq_trans bool (App x_2333222222232322222 x0_233322222223232222222222) (App y_23332222222323222222 x0_233322222223232222222222) (App z_233322222223232222222 x0_233322222223232222222222) (App H_2333222222232322222222 x0_233322222223232222222222) (App H0_23332222222323222222222 x0_233322222223232222222222)))))))) REVERTcast (App Coq.Classes.RelationClasses.Transitive ExportProof.set ExportProof.set_eq))) (Definition ExportProof.Set_eq (App Build_Equivalence ExportProof.set ExportProof.set_eq ExportProof.set_eq_refl ExportProof.set_eq_sym ExportProof.set_eq_trans)) (Definition Coq.Program.Basics.flip (Lambda A_2333222222232322222 (Sort Type) (Lambda B_23332222222323222222 (Sort Type) (Lambda C_233322222223232222222 (Sort Type) (Lambda f_2333222222232322222222 (Prod out_2333222222232322222221 A_2333222222232322222 (Prod out_23332222222323222222211 B_23332222222323222222 C_233322222223232222222)) (Lambda x_23332222222323222222222 B_23332222222323222222 (Lambda y_233322222223232222222222 A_2333222222232322222 (App f_2333222222232322222222 y_233322222223232222222222 x_23332222222323222222222)))))))) (Definition Coq.Program.Basics.impl (Lambda A_2333222222232322222 (Sort Prop) (Lambda B_23332222222323222222 (Sort Prop) (Prod out_233322222223232222221 A_2333222222232322222 B_23332222222323222222)))) (Definition Coq.Classes.Morphisms.subrelation_respectful (LetIn U_2333222222232322223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232 U_2333222222232322223 (Lambda B_233322222223232222322 U_2333222222232322223 (Lambda RA'_2333222222232322223222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda RA_23332222222323222232222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda subl_233322222223232222322222 (App Coq.Classes.RelationClasses.subrelation A_23332222222323222232 RA'_2333222222232322223222 RA_23332222222323222232222) (Lambda RB_2333222222232322223222222 (App Coq.Relations.Relation_Definitions.relation B_233322222223232222322) (Lambda RB'_23332222222323222232222222 (App Coq.Relations.Relation_Definitions.relation B_233322222223232222322) (Lambda subr_233322222223232222322222222 (App Coq.Classes.RelationClasses.subrelation B_233322222223232222322 RB_2333222222232322223222222 RB'_23332222222323222232222222) (Cast (Lambda x_2333222222232322223222222222 (Prod out_2333222222232322223222222221 A_23332222222323222232 B_233322222223232222322) (Lambda y_23332222222323222232222222222 (Prod out_23332222222323222232222222221 A_23332222222323222232 B_233322222223232222322) (Lambda H_233322222223232222322222222222 (App Coq.Classes.Morphisms.respectful A_23332222222323222232 B_233322222223232222322 RA_23332222222323222232222 RB_2333222222232322223222222 x_2333222222232322223222222222 y_23332222222323222232222222222) (Cast (Lambda x0_2333222222232322223222222222222 A_23332222222323222232 (Lambda y0_23332222222323222232222222222222 A_23332222222323222232 (Lambda H0_233322222223232222322222222222222 (App RA'_2333222222232322223222 x0_2333222222232322223222222222222 y0_23332222222323222232222222222222) (App (Lambda H1_2333222222232322223222222222222222 (Prod y_2333222222232322223222222222222221 B_233322222223232222322 (Prod out_23332222222323222232222222222222211 (App RB_2333222222232322223222222 (App x_2333222222232322223222222222 x0_2333222222232322223222222222222) y_2333222222232322223222222222222221) (App RB'_23332222222323222232222222 (App x_2333222222232322223222222222 x0_2333222222232322223222222222222) y_2333222222232322223222222222222221))) (App (Lambda H2_23332222222323222232222222222222222 (Prod y_23332222222323222232222222222222221 A_23332222222323222232 (Prod out_233322222223232222322222222222222211 (App RA_23332222222323222232222 x0_2333222222232322223222222222222 y_23332222222323222232222222222222221) (App RB_2333222222232322223222222 (App x_2333222222232322223222222222 x0_2333222222232322223222222222222) (App y_23332222222323222232222222222 y_23332222222323222232222222222222221)))) (App (Lambda H3_233322222223232222322222222222222222 (Prod out_233322222223232222322222222222222221 (App RB_2333222222232322223222222 (App x_2333222222232322223222222222 x0_2333222222232322223222222222222) (App y_23332222222323222232222222222 y0_23332222222323222232222222222222)) (App RB'_23332222222323222232222222 (App x_2333222222232322223222222222 x0_2333222222232322223222222222222) (App y_23332222222323222232222222222 y0_23332222222323222232222222222222))) (App subr_233322222223232222322222222 (App x_2333222222232322223222222222 x0_2333222222232322223222222222222) (App y_23332222222323222232222222222 y0_23332222222323222232222222222222) (App H_233322222223232222322222222222 x0_2333222222232322223222222222222 y0_23332222222323222232222222222222 (App subl_233322222223232222322222 x0_2333222222232322223222222222222 y0_23332222222323222232222222222222 H0_233322222223232222322222222222222)))) (App H1_2333222222232322223222222222222222 (App y_23332222222323222232222222222 y0_23332222222323222232222222222222)))) (App H_233322222223232222322222222222 x0_2333222222232322223222222222222))) (App subr_233322222223232222322222222 (App x_2333222222232322223222222222 x0_2333222222232322223222222222222)))))) REVERTcast (App Coq.Classes.Morphisms.respectful A_23332222222323222232 B_233322222223232222322 RA'_2333222222232322223222 RB'_23332222222323222232222222 x_2333222222232322223222222222 y_23332222222323222232222222222))))) REVERTcast (App Coq.Classes.RelationClasses.subrelation (Prod out_2333222222232322223222222221 A_23332222222323222232 B_233322222223232222322) (App Coq.Classes.Morphisms.respectful A_23332222222323222232 B_233322222223232222322 RA_23332222222323222232222 RB_2333222222232322223222222) (App Coq.Classes.Morphisms.respectful A_23332222222323222232 B_233322222223232222322 RA'_2333222222232322223222 RB'_23332222222323222232222222))))))))))))) (Definition Coq.Classes.RelationClasses.subrelation_symmetric (Lambda A_2333222222232322222 (Sort Type) (Lambda R_23332222222323222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Lambda H_233322222223232222222 (App Coq.Classes.RelationClasses.Symmetric A_2333222222232322222 R_23332222222323222222) (Cast (Lambda x_2333222222232322222222 A_2333222222232322222 (Lambda y_23332222222323222222222 A_2333222222232322222 (Lambda H0_233322222223232222222222 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222 x_2333222222232322222222 y_23332222222323222222222) (App Coq.Classes.RelationClasses.symmetry A_2333222222232322222 R_23332222222323222222 H_233322222223232222222 y_23332222222323222222222 x_2333222222232322222222 H0_233322222223232222222222)))) REVERTcast (App Coq.Classes.RelationClasses.subrelation A_2333222222232322222 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222) R_23332222222323222222)))))) (Definition ExportProof.Set_eq_Symmetric ExportProof.set_eq_sym) (Definition Coq.Classes.Morphisms.subrelation_refl (LetIn U_2333222222232322223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232 U_2333222222232322223 (Lambda R_233322222223232222322 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Cast (Lambda x_2333222222232322223222 A_23332222222323222232 (Lambda y_23332222222323222232222 A_23332222222323222232 (Lambda H_233322222223232222322222 (App R_233322222223232222322 x_2333222222232322223222 y_23332222222323222232222) H_233322222223232222322222))) REVERTcast (App Coq.Classes.RelationClasses.subrelation A_23332222222323222232 R_233322222223232222322 R_233322222223232222322)))))) (Definition Coq.Init.Logic.and_ind (Lambda A_23332222222323222222222 (Sort Prop) (Lambda B_233322222223232222222222 (Sort Prop) (Lambda P_2333222222232322222222222 (Sort Prop) (Lambda f_23332222222323222222222222 (Prod out_23332222222323222222222221 A_23332222222323222222222 (Prod out_233322222223232222222222211 B_233322222223232222222222 P_2333222222232322222222222)) (Lambda a_233322222223232222222222222 (App and A_23332222222323222222222 B_233322222223232222222222) (Case 2 (Lambda out_2333222222232322222222222222 (App and A_23332222222323222222222 B_233322222223232222222222) P_2333222222232322222222222) (CaseMatch a_233322222223232222222222222) (CaseBranches f_23332222222323222222222222)))))))) (Definition Coq.Classes.Morphisms.iff_flip_impl_subrelation (Cast (Lambda x_2333222222232322222 (Sort Prop) (Lambda y_23332222222323222222 (Sort Prop) (Lambda H_233322222223232222222 (App Coq.Init.Logic.iff x_2333222222232322222 y_23332222222323222222) (Cast (Lambda H0_2333222222232322222222 y_23332222222323222222 (App Coq.Init.Logic.and_ind (Prod out_23332222222323222222221 x_2333222222232322222 y_23332222222323222222) (Prod out_23332222222323222222221 y_23332222222323222222 x_2333222222232322222) x_2333222222232322222 (Lambda H_23332222222323222222222 (Prod out_23332222222323222222221 x_2333222222232322222 y_23332222222323222222) (Lambda H1_233322222223232222222222 (Prod out_233322222223232222222221 y_23332222222323222222 x_2333222222232322222) (App (Lambda H1_2333222222232322222222222 x_2333222222232322222 H1_2333222222232322222222222) (App H1_233322222223232222222222 H0_2333222222232322222222)))) H_233322222223232222222)) REVERTcast (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl x_2333222222232322222 y_23332222222323222222))))) REVERTcast (App Coq.Classes.RelationClasses.subrelation (Sort Prop) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)))) (Definition Coq.Classes.Morphisms.ProperProxy (LetIn U_233322222223232222322222223 (Sort Type) (Sort Type) (Lambda A_2333222222232322223222222232 U_233322222223232222322222223 (Lambda R_23332222222323222232222222322 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322223222222232) (Lambda m_233322222223232222322222223222 A_2333222222232322223222222232 (App R_23332222222323222232222222322 m_233322222223232222322222223222 m_233322222223232222322222223222)))))) (Definition Coq.Classes.Morphisms.Reflexive_partial_app_morphism (LetIn U_2333222222232322223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232 U_2333222222232322223 (Lambda B_233322222223232222322 U_2333222222232322223 (Lambda R_2333222222232322223222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda R'_23332222222323222232222 (App Coq.Relations.Relation_Definitions.relation B_233322222223232222322) (Lambda m_233322222223232222322222 (Prod out_233322222223232222322221 A_23332222222323222232 B_233322222223232222322) (Lambda H_2333222222232322223222222 (App Coq.Classes.Morphisms.Proper (Prod out_2333222222232322223222221 A_23332222222323222232 B_233322222223232222322) (App Coq.Classes.Morphisms.respectful A_23332222222323222232 B_233322222223232222322 R_2333222222232322223222 R'_23332222222323222232222) m_233322222223232222322222) (Lambda x_23332222222323222232222222 A_23332222222323222232 (Lambda H0_233322222223232222322222222 (App Coq.Classes.Morphisms.ProperProxy A_23332222222323222232 R_2333222222232322223222 x_23332222222323222232222222) (Cast (Cast (Cast (Cast (App H_2333222222232322223222222 x_23332222222323222232222222 x_23332222222323222232222222 H0_233322222223232222322222222) REVERTcast (App R'_23332222222323222232222 (App m_233322222223232222322222 x_23332222222323222232222222) (App m_233322222223232222322222 x_23332222222323222232222222))) REVERTcast (App R'_23332222222323222232222 (App m_233322222223232222322222 x_23332222222323222232222222) (App m_233322222223232222322222 x_23332222222323222232222222))) REVERTcast (App Coq.Classes.Morphisms.Proper B_233322222223232222322 R'_23332222222323222232222 (App m_233322222223232222322222 x_23332222222323222232222222))) REVERTcast (App Coq.Classes.Morphisms.Proper B_233322222223232222322 R'_23332222222323222232222 (App m_233322222223232222322222 x_23332222222323222232222222))))))))))))) (Definition Coq.Classes.RelationClasses.relation_equivalence (Lambda A_2333222222232322222222222 (Sort Type) (App Coq.Classes.RelationClasses.predicate_equivalence (App Tcons A_2333222222232322222222222 (App Tcons A_2333222222232322222222222 Tnil))))) (Definition Coq.Classes.Morphisms.Normalizes (Lambda A_2333222222232322222222 (Sort Type) (Lambda m_23332222222323222222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222222) (Lambda m'_233322222223232222222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222222) (App Coq.Classes.RelationClasses.relation_equivalence A_2333222222232322222222 m_23332222222323222222222 m'_233322222223232222222222))))) (Definition Coq.Classes.RelationClasses.iff_Symmetric Coq.Init.Logic.iff_sym) (Definition Coq.Classes.Morphisms.proper_proper (Cast (Cast (Lambda A_23332222222323222222222222 (Sort Type) (Cast (Lambda x_233322222223232222222222222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222222222222) (Lambda y_2333222222232322222222222222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222222222222) (Lambda H_23332222222323222222222222222 (App Coq.Classes.RelationClasses.relation_equivalence A_23332222222323222222222222 x_233322222223232222222222222 y_2333222222232322222222222222) (Cast (Lambda x0_233322222223232222222222222222 A_23332222222323222222222222 (Lambda y0_2333222222232322222222222222222 A_23332222222323222222222222 (Lambda H0_23332222222323222222222222222222 (App eq A_23332222222323222222222222 x0_233322222223232222222222222222 y0_2333222222232322222222222222222) (Cast (Cast (App Coq.Init.Logic.eq_ind_r A_23332222222323222222222222 y0_2333222222232322222222222222222 (Lambda x0_233322222223232222222222222222222 A_23332222222323222222222222 (App Coq.Init.Logic.iff (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 x_233322222223232222222222222 x0_233322222223232222222222222222222) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 y_2333222222232322222222222222 y0_2333222222232322222222222222222))) (App conj (Prod out_233322222223232222222222222222221 (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 x_233322222223232222222222222 y0_2333222222232322222222222222222) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 y_2333222222232322222222222222 y0_2333222222232322222222222222222)) (Prod out_233322222223232222222222222222221 (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 y_2333222222232322222222222222 y0_2333222222232322222222222222222) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 x_233322222223232222222222222 y0_2333222222232322222222222222222)) (Cast (Lambda H0_233322222223232222222222222222222 (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 x_233322222223232222222222222 y0_2333222222232322222222222222222) (App Coq.Classes.Morphisms.iff_flip_impl_subrelation (App y_2333222222232322222222222222 y0_2333222222232322222222222222222 y0_2333222222232322222222222222222) (App x_233322222223232222222222222 y0_2333222222232322222222222222222 y0_2333222222232322222222222222222) (App Coq.Classes.RelationClasses.symmetry (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Symmetric (App x_233322222223232222222222222 y0_2333222222232322222222222222222 y0_2333222222232322222222222222222) (App y_2333222222232322222222222222 y0_2333222222232322222222222222222 y0_2333222222232322222222222222222) (App H_23332222222323222222222222222 y0_2333222222232322222222222222222 y0_2333222222232322222222222222222)) H0_233322222223232222222222222222222)) REVERTcast (Prod out_233322222223232222222222222222221 (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 x_233322222223232222222222222 y0_2333222222232322222222222222222) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 y_2333222222232322222222222222 y0_2333222222232322222222222222222))) (Cast (Lambda H0_233322222223232222222222222222222 (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 y_2333222222232322222222222222 y0_2333222222232322222222222222222) (App Coq.Classes.Morphisms.iff_flip_impl_subrelation (App x_233322222223232222222222222 y0_2333222222232322222222222222222 y0_2333222222232322222222222222222) (App y_2333222222232322222222222222 y0_2333222222232322222222222222222 y0_2333222222232322222222222222222) (App H_23332222222323222222222222222 y0_2333222222232322222222222222222 y0_2333222222232322222222222222222) H0_233322222223232222222222222222222)) REVERTcast (Prod out_233322222223232222222222222222221 (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 y_2333222222232322222222222222 y0_2333222222232322222222222222222) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 x_233322222223232222222222222 y0_2333222222232322222222222222222)))) x0_233322222223232222222222222222 H0_23332222222323222222222222222222) REVERTcast (App Coq.Init.Logic.iff (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 x_233322222223232222222222222 x0_233322222223232222222222222222) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 y_2333222222232322222222222222 y0_2333222222232322222222222222222))) REVERTcast (App Coq.Init.Logic.iff (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 x_233322222223232222222222222 x0_233322222223232222222222222222) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 y_2333222222232322222222222222 y0_2333222222232322222222222222222)))))) REVERTcast (App Coq.Classes.Morphisms.respectful A_23332222222323222222222222 (Sort Prop) (App eq A_23332222222323222222222222) Coq.Init.Logic.iff (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 x_233322222223232222222222222) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222 y_2333222222232322222222222222)))))) REVERTcast (App Coq.Classes.Morphisms.respectful (App Coq.Relations.Relation_Definitions.relation A_23332222222323222222222222) (Prod out_233322222223232222222222221 A_23332222222323222222222222 (Sort Prop)) (App Coq.Classes.RelationClasses.relation_equivalence A_23332222222323222222222222) (App Coq.Classes.Morphisms.respectful A_23332222222323222222222222 (Sort Prop) (App eq A_23332222222323222222222222) Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222222)))) REVERTcast (Prod A_23332222222323222222222221 (Sort Type) (App Coq.Classes.Morphisms.Proper (Prod out_233322222223232222222222211 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222222222221) (Prod out_2333222222232322222222222111 A_23332222222323222222222221 (Sort Prop))) (App Coq.Classes.Morphisms.respectful (App Coq.Relations.Relation_Definitions.relation A_23332222222323222222222221) (Prod out_233322222223232222222222211 A_23332222222323222222222221 (Sort Prop)) (App Coq.Classes.RelationClasses.relation_equivalence A_23332222222323222222222221) (App Coq.Classes.Morphisms.respectful A_23332222222323222222222221 (Sort Prop) (App eq A_23332222222323222222222221) Coq.Init.Logic.iff)) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222221)))) REVERTcast (Prod A_23332222222323222222222221 (Sort Type) (App Coq.Classes.Morphisms.Proper (Prod out_233322222223232222222222211 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222222222221) (Prod out_2333222222232322222222222111 A_23332222222323222222222221 (Sort Prop))) (App Coq.Classes.Morphisms.respectful (App Coq.Relations.Relation_Definitions.relation A_23332222222323222222222221) (Prod out_233322222223232222222222211 A_23332222222323222222222221 (Sort Prop)) (App Coq.Classes.RelationClasses.relation_equivalence A_23332222222323222222222221) (App Coq.Classes.Morphisms.respectful A_23332222222323222222222221 (Sort Prop) (App eq A_23332222222323222222222221) Coq.Init.Logic.iff)) (App Coq.Classes.Morphisms.Proper A_23332222222323222222222221))))) (Definition Coq.Classes.Morphisms.eq_proper_proxy (LetIn U_23332222222323222222222223 (Sort Type) (Sort Type) (Lambda A_233322222223232222222222232 U_23332222222323222222222223 (Lambda x_2333222222232322222222222322 A_233322222223232222222222232 (App eq_refl A_233322222223232222222222232 x_2333222222232322222222222322))))) (Definition Coq.Classes.Morphisms.proper_normalizes_proper (Lambda A_2333222222232322222 (Sort Type) (Lambda R0_23332222222323222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Lambda R1_233322222223232222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Lambda H_2333222222232322222222 (App Coq.Classes.Morphisms.Normalizes A_2333222222232322222 R0_23332222222323222222 R1_233322222223232222222) (Lambda m_23332222222323222222222 A_2333222222232322222 (Lambda H0_233322222223232222222222 (App Coq.Classes.Morphisms.Proper A_2333222222232322222 R1_233322222223232222222 m_23332222222323222222222) (App (Lambda lemma_2333222222232322222222222 (App Coq.Classes.RelationClasses.relation_equivalence A_2333222222232322222 R0_23332222222323222222 R1_233322222223232222222) (App Coq.Classes.Morphisms.subrelation_proper (Prod R_23332222222323222222222221 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Prod m_233322222223232222222222211 A_2333222222232322222 (Sort Prop))) (App Coq.Classes.Morphisms.respectful (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Prod out_23332222222323222222222221 A_2333222222232322222 (Sort Prop)) (App Coq.Classes.RelationClasses.relation_equivalence A_2333222222232322222) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 (Sort Prop) (App eq A_2333222222232322222) Coq.Init.Logic.iff)) (App Coq.Classes.Morphisms.Proper A_2333222222232322222) (App Coq.Classes.Morphisms.proper_proper A_2333222222232322222) (App Coq.Classes.Morphisms.respectful (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Prod m_23332222222323222222222221 A_2333222222232322222 (Sort Prop)) (App Coq.Classes.RelationClasses.relation_equivalence A_2333222222232322222) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 (Sort Prop) (App eq A_2333222222232322222) (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Prod m_23332222222323222222222221 A_2333222222232322222 (Sort Prop)) (App Coq.Classes.RelationClasses.relation_equivalence A_2333222222232322222) (App Coq.Classes.RelationClasses.relation_equivalence A_2333222222232322222) (App Coq.Classes.Morphisms.subrelation_refl (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (App Coq.Classes.RelationClasses.relation_equivalence A_2333222222232322222)) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 (Sort Prop) (App eq A_2333222222232322222) Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 (Sort Prop) (App eq A_2333222222232322222) (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful A_2333222222232322222 (Sort Prop) (App eq A_2333222222232322222) (App eq A_2333222222232322222) (App Coq.Classes.Morphisms.subrelation_refl A_2333222222232322222 (App eq A_2333222222232322222)) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) R0_23332222222323222222 R1_233322222223232222222 lemma_2333222222232322222222222 m_23332222222323222222222 m_23332222222323222222222 (App Coq.Classes.Morphisms.eq_proper_proxy A_2333222222232322222 m_23332222222323222222222))) H_2333222222232322222222 H0_233322222223232222222222)))))))) (Definition Coq.Classes.RelationClasses.binary_relation (Lambda A_233322222223232222222222222 (Sort Type) (App Coq.Classes.RelationClasses.arrows (App Tcons A_233322222223232222222222222 (App Tcons A_233322222223232222222222222 Tnil)) (Sort Prop)))) (Definition Coq.Classes.RelationClasses.arrows (Fix (Functions (App arrows 0 (Prod l_23332222222323222222222222111 Tlist (Prod r_233322222223232222222222221111 (Sort Type) (Sort Type))) (Lambda l_23332222222323222222222222112 Tlist (Lambda r_233322222223232222222222221122 (Sort Type) (Case 0 (Lambda l_2333222222232322222222222211222 Tlist (Sort Type)) (CaseMatch l_23332222222323222222222222112) (CaseBranches r_233322222223232222222222221122 (Lambda A_2333222222232322222222222211222 (Sort Type) (Lambda l'_23332222222323222222222222112222 Tlist (Prod out_233322222223232222222222221122221 A_2333222222232322222222222211222 (App arrows l'_23332222222323222222222222112222 r_233322222223232222222222221122)))))))))) 0)) (Definition Coq.Classes.RelationClasses.pointwise_lifting (Fix (Functions (App pointwise_lifting 0 (Prod op_233322222223232222222222221 (App Coq.Classes.RelationClasses.binary_relation (Sort Prop)) (Prod l_2333222222232322222222222211 Tlist (App Coq.Classes.RelationClasses.binary_relation (App Coq.Classes.RelationClasses.arrows l_2333222222232322222222222211 (Sort Prop))))) (Lambda op_233322222223232222222222222 (App Coq.Classes.RelationClasses.binary_relation (Sort Prop)) (Lambda l_2333222222232322222222222222 Tlist (Case 0 (Lambda l_23332222222323222222222222222 Tlist (App Coq.Classes.RelationClasses.binary_relation (App Coq.Classes.RelationClasses.arrows l_23332222222323222222222222222 (Sort Prop)))) (CaseMatch l_2333222222232322222222222222) (CaseBranches (Lambda R_23332222222323222222222222222 (App Coq.Classes.RelationClasses.arrows Tnil (Sort Prop)) (Lambda R'_233322222223232222222222222222 (App Coq.Classes.RelationClasses.arrows Tnil (Sort Prop)) (App op_233322222223232222222222222 R_23332222222323222222222222222 R'_233322222223232222222222222222))) (Lambda A_23332222222323222222222222222 (Sort Type) (Lambda tl_233322222223232222222222222222 Tlist (Lambda R_2333222222232322222222222222222 (App Coq.Classes.RelationClasses.arrows (App Tcons A_23332222222323222222222222222 tl_233322222223232222222222222222) (Sort Prop)) (Lambda R'_23332222222323222222222222222222 (App Coq.Classes.RelationClasses.arrows (App Tcons A_23332222222323222222222222222 tl_233322222223232222222222222222) (Sort Prop)) (Prod x_233322222223232222222222222222221 A_23332222222323222222222222222 (App pointwise_lifting op_233322222223232222222222222 tl_233322222223232222222222222222 (App R_2333222222232322222222222222222 x_233322222223232222222222222222221) (App R'_23332222222323222222222222222222 x_233322222223232222222222222222221))))))))))))) 0)) (Definition Coq.Classes.RelationClasses.predicate_equivalence (Lambda l_233322222223232222222222222 Tlist (App Coq.Classes.RelationClasses.pointwise_lifting Coq.Init.Logic.iff l_233322222223232222222222222))) (Definition Coq.Classes.Morphisms.flip_arrow (Lambda A_2333222222232322222 (Sort Type) (Lambda B_23332222222323222222 (Sort Type) (Lambda R_233322222223232222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Lambda R'''_2333222222232322222222 (Prod out_2333222222232322222221 A_2333222222232322222 (Prod out_23332222222323222222211 A_2333222222232322222 (Sort Prop))) (Lambda NA_23332222222323222222222 (App Coq.Classes.Morphisms.Normalizes A_2333222222232322222 R_233322222223232222222 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R'''_2333222222232322222222)) (Lambda R'_233322222223232222222222 (App Coq.Relations.Relation_Definitions.relation B_23332222222323222222) (Lambda R''_2333222222232322222222222 (Prod out_2333222222232322222222221 B_23332222222323222222 (Prod out_23332222222323222222222211 B_23332222222323222222 (Sort Prop))) (Lambda NB_23332222222323222222222222 (App Coq.Classes.Morphisms.Normalizes B_23332222222323222222 R'_233322222223232222222222 (App Coq.Program.Basics.flip B_23332222222323222222 B_23332222222323222222 (Sort Prop) R''_2333222222232322222222222)) (Cast (Cast (Cast (Cast (Cast (Cast (Lambda x_233322222223232222222222222 (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Lambda x0_2333222222232322222222222222 (Prod out_2333222222232322222222222221 A_2333222222232322222 B_23332222222323222222) (App conj (Prod out_23332222222323222222222222221 (Prod x_23332222222323222222222222221 A_2333222222232322222 (Prod y_233322222223232222222222222211 A_2333222222232322222 (Prod out_2333222222232322222222222222111 (App R_233322222223232222222 x_23332222222323222222222222221 y_233322222223232222222222222211) (App R'_233322222223232222222222 (App x_233322222223232222222222222 x_23332222222323222222222222221) (App x0_2333222222232322222222222222 y_233322222223232222222222222211))))) (Prod x_233322222223232222222222222211 A_2333222222232322222 (Prod y_2333222222232322222222222222111 A_2333222222232322222 (Prod out_23332222222323222222222222221111 (App R'''_2333222222232322222222 x_233322222223232222222222222211 y_2333222222232322222222222222111) (App R''_2333222222232322222222222 (App x0_2333222222232322222222222222 x_233322222223232222222222222211) (App x_233322222223232222222222222 y_2333222222232322222222222222111)))))) (Prod out_23332222222323222222222222221 (Prod x_23332222222323222222222222221 A_2333222222232322222 (Prod y_233322222223232222222222222211 A_2333222222232322222 (Prod out_2333222222232322222222222222111 (App R'''_2333222222232322222222 x_23332222222323222222222222221 y_233322222223232222222222222211) (App R''_2333222222232322222222222 (App x0_2333222222232322222222222222 x_23332222222323222222222222221) (App x_233322222223232222222222222 y_233322222223232222222222222211))))) (Prod x_233322222223232222222222222211 A_2333222222232322222 (Prod y_2333222222232322222222222222111 A_2333222222232322222 (Prod out_23332222222323222222222222221111 (App R_233322222223232222222 x_233322222223232222222222222211 y_2333222222232322222222222222111) (App R'_233322222223232222222222 (App x_233322222223232222222222222 x_233322222223232222222222222211) (App x0_2333222222232322222222222222 y_2333222222232322222222222222111)))))) (Lambda H_23332222222323222222222222222 (Prod x_23332222222323222222222222221 A_2333222222232322222 (Prod y_233322222223232222222222222211 A_2333222222232322222 (Prod out_2333222222232322222222222222111 (App R_233322222223232222222 x_23332222222323222222222222221 y_233322222223232222222222222211) (App R'_233322222223232222222222 (App x_233322222223232222222222222 x_23332222222323222222222222221) (App x0_2333222222232322222222222222 y_233322222223232222222222222211))))) (Lambda x1_233322222223232222222222222222 A_2333222222232322222 (Lambda y_2333222222232322222222222222222 A_2333222222232322222 (Lambda H0_23332222222323222222222222222222 (App R'''_2333222222232322222222 x1_233322222223232222222222222222 y_2333222222232322222222222222222) (LetIn H1_233322222223232222222222222222223 (Lambda x_233322222223232222222222222222222 B_23332222222323222222 (Lambda x_2333222222232322222222222222222222 B_23332222222323222222 (Case 2 (Lambda out_23332222222323222222222222222222222 (App and (Prod out_23332222222323222222222222222222221 (App R'_233322222223232222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222) (App R''_2333222222232322222222222 x_2333222222232322222222222222222222 x_233322222223232222222222222222222)) (Prod out_23332222222323222222222222222222221 (App R''_2333222222232322222222222 x_2333222222232322222222222222222222 x_233322222223232222222222222222222) (App R'_233322222223232222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222))) (Prod out_233322222223232222222222222222222221 (App R'_233322222223232222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222) (App R''_2333222222232322222222222 x_2333222222232322222222222222222222 x_233322222223232222222222222222222))) (CaseMatch (App NB_23332222222323222222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222)) (CaseBranches (Lambda out_23332222222323222222222222222222222 (Prod out_23332222222323222222222222222222221 (App R'_233322222223232222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222) (App R''_2333222222232322222222222 x_2333222222232322222222222222222222 x_233322222223232222222222222222222)) (Lambda out_233322222223232222222222222222222222 (Prod out_233322222223232222222222222222222221 (App R''_2333222222232322222222222 x_2333222222232322222222222222222222 x_233322222223232222222222222222222) (App R'_233322222223232222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222)) out_23332222222323222222222222222222222)))))) (Prod x_233322222223232222222222222222221 B_23332222222323222222 (Prod x_2333222222232322222222222222222211 B_23332222222323222222 (Prod out_23332222222323222222222222222222111 (App R'_233322222223232222222222 x_233322222223232222222222222222221 x_2333222222232322222222222222222211) (App R''_2333222222232322222222222 x_2333222222232322222222222222222211 x_233322222223232222222222222222221)))) (App H1_233322222223232222222222222222223 (App x_233322222223232222222222222 y_2333222222232322222222222222222) (App x0_2333222222232322222222222222 x1_233322222223232222222222222222) (App H_23332222222323222222222222222 y_2333222222232322222222222222222 x1_233322222223232222222222222222 (LetIn H1_2333222222232322222222222222222233 (Lambda x_2333222222232322222222222222222232 A_2333222222232322222 (Lambda x_23332222222323222222222222222222322 A_2333222222232322222 (Case 2 (Lambda out_233322222223232222222222222222223222 (App and (Prod out_233322222223232222222222222222223221 (App R_233322222223232222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322) (App R'''_2333222222232322222222 x_23332222222323222222222222222222322 x_2333222222232322222222222222222232)) (Prod out_233322222223232222222222222222223221 (App R'''_2333222222232322222222 x_23332222222323222222222222222222322 x_2333222222232322222222222222222232) (App R_233322222223232222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322))) (Prod out_2333222222232322222222222222222232221 (App R'''_2333222222232322222222 x_23332222222323222222222222222222322 x_2333222222232322222222222222222232) (App R_233322222223232222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322))) (CaseMatch (App NA_23332222222323222222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322)) (CaseBranches (Lambda out_233322222223232222222222222222223222 (Prod out_233322222223232222222222222222223221 (App R_233322222223232222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322) (App R'''_2333222222232322222222 x_23332222222323222222222222222222322 x_2333222222232322222222222222222232)) (Lambda out_2333222222232322222222222222222232222 (Prod out_2333222222232322222222222222222232221 (App R'''_2333222222232322222222 x_23332222222323222222222222222222322 x_2333222222232322222222222222222232) (App R_233322222223232222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322)) out_2333222222232322222222222222222232222)))))) (Prod x_2333222222232322222222222222222231 A_2333222222232322222 (Prod x_23332222222323222222222222222222311 A_2333222222232322222 (Prod out_233322222223232222222222222222223111 (App R'''_2333222222232322222222 x_23332222222323222222222222222222311 x_2333222222232322222222222222222231) (App R_233322222223232222222 x_2333222222232322222222222222222231 x_23332222222323222222222222222222311)))) (App H1_2333222222232322222222222222222233 y_2333222222232322222222222222222 x1_233322222223232222222222222222 H0_23332222222323222222222222222222))))))))) (Lambda H_23332222222323222222222222222 (Prod x_23332222222323222222222222221 A_2333222222232322222 (Prod y_233322222223232222222222222211 A_2333222222232322222 (Prod out_2333222222232322222222222222111 (App R'''_2333222222232322222222 x_23332222222323222222222222221 y_233322222223232222222222222211) (App R''_2333222222232322222222222 (App x0_2333222222232322222222222222 x_23332222222323222222222222221) (App x_233322222223232222222222222 y_233322222223232222222222222211))))) (Lambda x1_233322222223232222222222222222 A_2333222222232322222 (Lambda y_2333222222232322222222222222222 A_2333222222232322222 (Lambda H0_23332222222323222222222222222222 (App R_233322222223232222222 x1_233322222223232222222222222222 y_2333222222232322222222222222222) (LetIn H1_233322222223232222222222222222223 (Lambda x_233322222223232222222222222222222 B_23332222222323222222 (Lambda x_2333222222232322222222222222222222 B_23332222222323222222 (Case 2 (Lambda out_23332222222323222222222222222222222 (App and (Prod out_23332222222323222222222222222222221 (App R'_233322222223232222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222) (App R''_2333222222232322222222222 x_2333222222232322222222222222222222 x_233322222223232222222222222222222)) (Prod out_23332222222323222222222222222222221 (App R''_2333222222232322222222222 x_2333222222232322222222222222222222 x_233322222223232222222222222222222) (App R'_233322222223232222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222))) (Prod out_233322222223232222222222222222222221 (App R''_2333222222232322222222222 x_2333222222232322222222222222222222 x_233322222223232222222222222222222) (App R'_233322222223232222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222))) (CaseMatch (App NB_23332222222323222222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222)) (CaseBranches (Lambda out_23332222222323222222222222222222222 (Prod out_23332222222323222222222222222222221 (App R'_233322222223232222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222) (App R''_2333222222232322222222222 x_2333222222232322222222222222222222 x_233322222223232222222222222222222)) (Lambda out_233322222223232222222222222222222222 (Prod out_233322222223232222222222222222222221 (App R''_2333222222232322222222222 x_2333222222232322222222222222222222 x_233322222223232222222222222222222) (App R'_233322222223232222222222 x_233322222223232222222222222222222 x_2333222222232322222222222222222222)) out_233322222223232222222222222222222222)))))) (Prod x_233322222223232222222222222222221 B_23332222222323222222 (Prod x_2333222222232322222222222222222211 B_23332222222323222222 (Prod out_23332222222323222222222222222222111 (App R''_2333222222232322222222222 x_2333222222232322222222222222222211 x_233322222223232222222222222222221) (App R'_233322222223232222222222 x_233322222223232222222222222222221 x_2333222222232322222222222222222211)))) (App H1_233322222223232222222222222222223 (App x_233322222223232222222222222 x1_233322222223232222222222222222) (App x0_2333222222232322222222222222 y_2333222222232322222222222222222) (App H_23332222222323222222222222222 y_2333222222232322222222222222222 x1_233322222223232222222222222222 (LetIn H1_2333222222232322222222222222222233 (Lambda x_2333222222232322222222222222222232 A_2333222222232322222 (Lambda x_23332222222323222222222222222222322 A_2333222222232322222 (Case 2 (Lambda out_233322222223232222222222222222223222 (App and (Prod out_233322222223232222222222222222223221 (App R_233322222223232222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322) (App R'''_2333222222232322222222 x_23332222222323222222222222222222322 x_2333222222232322222222222222222232)) (Prod out_233322222223232222222222222222223221 (App R'''_2333222222232322222222 x_23332222222323222222222222222222322 x_2333222222232322222222222222222232) (App R_233322222223232222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322))) (Prod out_2333222222232322222222222222222232221 (App R_233322222223232222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322) (App R'''_2333222222232322222222 x_23332222222323222222222222222222322 x_2333222222232322222222222222222232))) (CaseMatch (App NA_23332222222323222222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322)) (CaseBranches (Lambda out_233322222223232222222222222222223222 (Prod out_233322222223232222222222222222223221 (App R_233322222223232222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322) (App R'''_2333222222232322222222 x_23332222222323222222222222222222322 x_2333222222232322222222222222222232)) (Lambda out_2333222222232322222222222222222232222 (Prod out_2333222222232322222222222222222232221 (App R'''_2333222222232322222222 x_23332222222323222222222222222222322 x_2333222222232322222222222222222232) (App R_233322222223232222222 x_2333222222232322222222222222222232 x_23332222222323222222222222222222322)) out_233322222223232222222222222222223222)))))) (Prod x_2333222222232322222222222222222231 A_2333222222232322222 (Prod x_23332222222323222222222222222222311 A_2333222222232322222 (Prod out_233322222223232222222222222222223111 (App R_233322222223232222222 x_2333222222232322222222222222222231 x_23332222222323222222222222222222311) (App R'''_2333222222232322222222 x_23332222222323222222222222222222311 x_2333222222232322222222222222222231)))) (App H1_2333222222232322222222222222222233 x1_233322222223232222222222222222 y_2333222222232322222222222222222 H0_23332222222323222222222222222222)))))))))))) REVERTcast (Prod x_233322222223232222222222221 (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Prod x_2333222222232322222222222211 (Prod out_2333222222232322222222222211 A_2333222222232322222 B_23332222222323222222) (App Coq.Init.Logic.iff (Prod x_23332222222323222222222222111 A_2333222222232322222 (Prod y_233322222223232222222222221111 A_2333222222232322222 (Prod out_2333222222232322222222222211111 (App R_233322222223232222222 x_23332222222323222222222222111 y_233322222223232222222222221111) (App R'_233322222223232222222222 (App x_233322222223232222222222221 x_23332222222323222222222222111) (App x_2333222222232322222222222211 y_233322222223232222222222221111))))) (App Coq.Program.Basics.flip (Prod out_23332222222323222222222222111 A_2333222222232322222 B_23332222222323222222) (Prod out_23332222222323222222222222111 A_2333222222232322222 B_23332222222323222222) (Sort Prop) (Lambda f_23332222222323222222222222112 (Prod x_23332222222323222222222222111 A_2333222222232322222 B_23332222222323222222) (Lambda g_233322222223232222222222221122 (Prod x_233322222223232222222222221121 A_2333222222232322222 B_23332222222323222222) (Prod x_2333222222232322222222222211221 A_2333222222232322222 (Prod y_23332222222323222222222222112211 A_2333222222232322222 (Prod out_233322222223232222222222221122111 (App R'''_2333222222232322222222 x_2333222222232322222222222211221 y_23332222222323222222222222112211) (App R''_2333222222232322222222222 (App f_23332222222323222222222222112 x_2333222222232322222222222211221) (App g_233322222223232222222222221122 y_23332222222323222222222222112211))))))) x_233322222223232222222222221 x_2333222222232322222222222211))))) REVERTcast (Prod x_233322222223232222222222221 (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Prod x_2333222222232322222222222211 (Prod out_2333222222232322222222222211 A_2333222222232322222 B_23332222222323222222) (App Coq.Init.Logic.iff (App Coq.Classes.Morphisms.respectful A_2333222222232322222 B_23332222222323222222 R_233322222223232222222 R'_233322222223232222222222 x_233322222223232222222222221 x_2333222222232322222222222211) (App Coq.Program.Basics.flip (Prod out_23332222222323222222222222111 A_2333222222232322222 B_23332222222323222222) (Prod out_23332222222323222222222222111 A_2333222222232322222 B_23332222222323222222) (Sort Prop) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 B_23332222222323222222 R'''_2333222222232322222222 R''_2333222222232322222222222) x_233322222223232222222222221 x_2333222222232322222222222211))))) REVERTcast (App Coq.Classes.RelationClasses.pointwise_lifting Coq.Init.Logic.iff (App Tcons (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (App Tcons (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) Tnil)) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 B_23332222222323222222 R_233322222223232222222 R'_233322222223232222222222) (App Coq.Program.Basics.flip (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Sort Prop) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 B_23332222222323222222 R'''_2333222222232322222222 R''_2333222222232322222222222)))) REVERTcast (App Coq.Classes.RelationClasses.predicate_equivalence (App Tcons (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (App Tcons (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) Tnil)) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 B_23332222222323222222 R_233322222223232222222 R'_233322222223232222222222) (App Coq.Program.Basics.flip (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Sort Prop) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 B_23332222222323222222 R'''_2333222222232322222222 R''_2333222222232322222222222)))) REVERTcast (App Coq.Classes.RelationClasses.relation_equivalence (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 B_23332222222323222222 R_233322222223232222222 R'_233322222223232222222222) (App Coq.Program.Basics.flip (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Sort Prop) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 B_23332222222323222222 R'''_2333222222232322222222 R''_2333222222232322222222222)))) REVERTcast (App Coq.Classes.Morphisms.Normalizes (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 B_23332222222323222222 R_233322222223232222222 R'_233322222223232222222222) (App Coq.Program.Basics.flip (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Prod out_233322222223232222222222221 A_2333222222232322222 B_23332222222323222222) (Sort Prop) (App Coq.Classes.Morphisms.respectful A_2333222222232322222 B_23332222222323222222 R'''_2333222222232322222222 R''_2333222222232322222222222))))))))))))) (Definition Coq.Classes.Morphisms.flip_atom (Lambda A_2333222222232322222 (Sort Type) (Lambda R_23332222222323222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Cast (Lambda x_233322222223232222222 A_2333222222232322222 (Cast (Lambda x0_2333222222232322222222 A_2333222222232322222 (App conj (Prod out_23332222222323222222221 (App R_23332222222323222222 x_233322222223232222222 x0_2333222222232322222222) (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222) x_233322222223232222222 x0_2333222222232322222222)) (Prod out_23332222222323222222221 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222) x_233322222223232222222 x0_2333222222232322222222) (App R_23332222222323222222 x_233322222223232222222 x0_2333222222232322222222)) (Lambda H_23332222222323222222222 (App R_23332222222323222222 x_233322222223232222222 x0_2333222222232322222222) H_23332222222323222222222) (Lambda H_23332222222323222222222 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222) x_233322222223232222222 x0_2333222222232322222222) H_23332222222323222222222))) REVERTcast (App Coq.Classes.RelationClasses.pointwise_lifting Coq.Init.Logic.iff (App Tcons A_2333222222232322222 Tnil) (App R_23332222222323222222 x_233322222223232222222) (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222) x_233322222223232222222)))) REVERTcast (App Coq.Classes.Morphisms.Normalizes A_2333222222232322222 R_23332222222323222222 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222))))))) (Definition Coq.Classes.Morphisms.proper_flip_proper (LetIn U_2333222222232322223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232 U_2333222222232322223 (Lambda R_233322222223232222322 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda m_2333222222232322223222 A_23332222222323222232 (Lambda mor_23332222222323222232222 (App Coq.Classes.Morphisms.Proper A_23332222222323222232 R_233322222223232222322 m_2333222222232322223222) mor_23332222222323222232222)))))) (Definition ExportProof.union_morphism (Cast (Lambda A_2333222222232322222 ExportProof.set (Lambda B_23332222222323222222 ExportProof.set (Lambda E_233322222223232222222 (App ExportProof.set_eq A_2333222222232322222 B_23332222222323222222) (Cast (Lambda C_2333222222232322222222 ExportProof.set (Lambda D_23332222222323222222222 ExportProof.set (Lambda F_233322222223232222222222 (App ExportProof.set_eq C_2333222222232322222222 D_23332222222323222222222) (Cast (Lambda x_2333222222232322222222222 (Axiom ExportProof.X) (Cast (App Coq.Init.Logic.eq_ind_r bool (App B_23332222222323222222 x_2333222222232322222222222) (Lambda b_23332222222323222222222222 bool (App eq bool (App Coq.Init.Datatypes.orb b_23332222222323222222222222 (App C_2333222222232322222222 x_2333222222232322222222222)) (App Coq.Init.Datatypes.orb (App B_23332222222323222222 x_2333222222232322222222222) (App D_23332222222323222222222 x_2333222222232322222222222)))) (App Coq.Init.Logic.eq_ind_r bool (App D_23332222222323222222222 x_2333222222232322222222222) (Lambda b_23332222222323222222222222 bool (App eq bool (App Coq.Init.Datatypes.orb (App B_23332222222323222222 x_2333222222232322222222222) b_23332222222323222222222222) (App Coq.Init.Datatypes.orb (App B_23332222222323222222 x_2333222222232322222222222) (App D_23332222222323222222222 x_2333222222232322222222222)))) (App eq_refl bool (App Coq.Init.Datatypes.orb (App B_23332222222323222222 x_2333222222232322222222222) (App D_23332222222323222222222 x_2333222222232322222222222))) (App C_2333222222232322222222 x_2333222222232322222222222) (App F_233322222223232222222222 x_2333222222232322222222222)) (App A_2333222222232322222 x_2333222222232322222222222) (App E_233322222223232222222 x_2333222222232322222222222)) REVERTcast (App eq bool (App ExportProof.binary_union A_2333222222232322222 C_2333222222232322222222 x_2333222222232322222222222) (App ExportProof.binary_union B_23332222222323222222 D_23332222222323222222222 x_2333222222232322222222222)))) REVERTcast (App ExportProof.set_eq (App ExportProof.binary_union A_2333222222232322222 C_2333222222232322222222) (App ExportProof.binary_union B_23332222222323222222 D_23332222222323222222222)))))) REVERTcast (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq (App ExportProof.binary_union A_2333222222232322222) (App ExportProof.binary_union B_23332222222323222222)))))) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_2333222222232322221 ExportProof.set (Prod out_23332222222323222211 ExportProof.set ExportProof.set)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_2333222222232322221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_union))) (Definition Coq.Classes.Morphisms.flip1 (LetIn U_2333222222232322223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232 U_2333222222232322223 (Lambda R'_233322222223232222322 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda R_2333222222232322223222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda H_23332222222323222232222 (App Coq.Classes.RelationClasses.subrelation A_23332222222323222232 R'_233322222223232222322 R_2333222222232322223222) H_23332222222323222232222)))))) (Definition Coq.Classes.Morphisms.flip2 (LetIn U_2333222222232322223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232 U_2333222222232322223 (Lambda R_233322222223232222322 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda R'_2333222222232322223222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda H_23332222222323222232222 (App Coq.Classes.RelationClasses.subrelation A_23332222222323222232 R_233322222223232222322 R'_2333222222232322223222) H_23332222222323222232222)))))) (Definition Coq.Classes.Morphisms.reflexive_proper_proxy (LetIn U_2333222222232322223 (Sort Type) (Sort Type) (Lambda A_23332222222323222232 U_2333222222232322223 (Lambda R_233322222223232222322 (App Coq.Relations.Relation_Definitions.relation A_23332222222323222232) (Lambda H_2333222222232322223222 (App Coq.Classes.RelationClasses.Reflexive A_23332222222323222232 R_233322222223232222322) (Lambda x_23332222222323222232222 A_23332222222323222232 (App (Lambda H0_233322222223232222322222 (App R_233322222223232222322 x_23332222222323222232222 x_23332222222323222232222) H0_233322222223232222322222) (App H_2333222222232322223222 x_23332222222323222232222)))))))) (Definition Coq.Classes.RelationClasses.PreOrder_Reflexive (Lambda A_2333222222232322222 (Sort Type) (Lambda R_23332222222323222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Lambda PreOrder_233322222223232222222 (App PreOrder A_2333222222232322222 R_23332222222323222222) (Case 2 (Lambda PreOrder_2333222222232322222222 (App PreOrder A_2333222222232322222 R_23332222222323222222) (App Coq.Classes.RelationClasses.Reflexive A_2333222222232322222 R_23332222222323222222)) (CaseMatch PreOrder_233322222223232222222) (CaseBranches (Lambda PreOrder_Reflexive_2333222222232322222222 (App Coq.Classes.RelationClasses.Reflexive A_2333222222232322222 R_23332222222323222222) (Lambda PreOrder_Transitive_23332222222323222222222 (App Coq.Classes.RelationClasses.Transitive A_2333222222232322222 R_23332222222323222222) PreOrder_Reflexive_2333222222232322222222)))))))) (Definition Coq.Classes.RelationClasses.flip_PreOrder (Lambda A_2333222222232322222 (Sort Type) (Lambda R_23332222222323222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Lambda H_233322222223232222222 (App PreOrder A_2333222222232322222 R_23332222222323222222) (Case 2 (Lambda out_2333222222232322222222 (App PreOrder A_2333222222232322222 R_23332222222323222222) (App PreOrder A_2333222222232322222 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222))) (CaseMatch H_233322222223232222222) (CaseBranches (Lambda PreOrder_Reflexive0_2333222222232322222222 (App Coq.Classes.RelationClasses.Reflexive A_2333222222232322222 R_23332222222323222222) (Lambda PreOrder_Transitive0_23332222222323222222222 (App Coq.Classes.RelationClasses.Transitive A_2333222222232322222 R_23332222222323222222) (App Build_PreOrder A_2333222222232322222 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222) PreOrder_Reflexive0_2333222222232322222222 (Cast (Lambda x_233322222223232222222222 A_2333222222232322222 (Lambda y_2333222222232322222222222 A_2333222222232322222 (Lambda z_23332222222323222222222222 A_2333222222232322222 (Lambda H_233322222223232222222222222 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222 x_233322222223232222222222 y_2333222222232322222222222) (Lambda H0_2333222222232322222222222222 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222 y_2333222222232322222222222 z_23332222222323222222222222) (App (Lambda H1_23332222222323222222222222222 (Prod y_23332222222323222222222222221 A_2333222222232322222 (Prod z_233322222223232222222222222211 A_2333222222232322222 (Prod out_2333222222232322222222222222111 (App R_23332222222323222222 z_23332222222323222222222222 y_23332222222323222222222222221) (Prod out_23332222222323222222222222221111 (App R_23332222222323222222 y_23332222222323222222222222221 z_233322222223232222222222222211) (App R_23332222222323222222 z_23332222222323222222222222 z_233322222223232222222222222211))))) (App (Lambda H2_233322222223232222222222222222 (Prod z_233322222223232222222222222221 A_2333222222232322222 (Prod out_2333222222232322222222222222211 (App R_23332222222323222222 z_23332222222323222222222222 y_2333222222232322222222222) (Prod out_23332222222323222222222222222111 (App R_23332222222323222222 y_2333222222232322222222222 z_233322222223232222222222222221) (App R_23332222222323222222 z_23332222222323222222222222 z_233322222223232222222222222221)))) (App (Lambda H3_2333222222232322222222222222222 (Prod out_2333222222232322222222222222221 (App R_23332222222323222222 z_23332222222323222222222222 y_2333222222232322222222222) (Prod out_23332222222323222222222222222211 (App R_23332222222323222222 y_2333222222232322222222222 x_233322222223232222222222) (App R_23332222222323222222 z_23332222222323222222222222 x_233322222223232222222222))) (App (Lambda H3_23332222222323222222222222222222 (Prod out_23332222222323222222222222222221 (App R_23332222222323222222 y_2333222222232322222222222 x_233322222223232222222222) (App R_23332222222323222222 z_23332222222323222222222222 x_233322222223232222222222)) (App (Lambda H3_233322222223232222222222222222222 (App R_23332222222323222222 z_23332222222323222222222222 x_233322222223232222222222) H3_233322222223232222222222222222222) (App H3_23332222222323222222222222222222 H_233322222223232222222222222))) (App H3_2333222222232322222222222222222 H0_2333222222232322222222222222))) (App H2_233322222223232222222222222222 x_233322222223232222222222))) (App H1_23332222222323222222222222222 y_2333222222232322222222222))) (App PreOrder_Transitive0_23332222222323222222222 z_23332222222323222222222222))))))) REVERTcast (App Coq.Classes.RelationClasses.Transitive A_2333222222232322222 (App Coq.Program.Basics.flip A_2333222222232322222 A_2333222222232322222 (Sort Prop) R_23332222222323222222)))))))))))) (Definition Coq.Classes.RelationClasses.Equivalence_Reflexive (Lambda A_2333222222232322222222 (Sort Type) (Lambda R_23332222222323222222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222222) (Lambda Equivalence_233322222223232222222222 (App Equivalence A_2333222222232322222222 R_23332222222323222222222) (Case 2 (Lambda Equivalence_2333222222232322222222222 (App Equivalence A_2333222222232322222222 R_23332222222323222222222) (App Coq.Classes.RelationClasses.Reflexive A_2333222222232322222222 R_23332222222323222222222)) (CaseMatch Equivalence_233322222223232222222222) (CaseBranches (Lambda Equivalence_Reflexive_2333222222232322222222222 (App Coq.Classes.RelationClasses.Reflexive A_2333222222232322222222 R_23332222222323222222222) (Lambda Equivalence_Symmetric_23332222222323222222222222 (App Coq.Classes.RelationClasses.Symmetric A_2333222222232322222222 R_23332222222323222222222) (Lambda Equivalence_Transitive_233322222223232222222222222 (App Coq.Classes.RelationClasses.Transitive A_2333222222232322222222 R_23332222222323222222222) Equivalence_Reflexive_2333222222232322222222222))))))))) (Definition Coq.Classes.RelationClasses.Equivalence_PreOrder (Lambda A_2333222222232322222 (Sort Type) (Lambda R_23332222222323222222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232322222) (Lambda E_233322222223232222222 (App Equivalence A_2333222222232322222 R_23332222222323222222) (App Build_PreOrder A_2333222222232322222 R_23332222222323222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive A_2333222222232322222 R_23332222222323222222 E_233322222223232222222) (App Coq.Classes.RelationClasses.Equivalence_Transitive A_2333222222232322222 R_23332222222323222222 E_233322222223232222222)))))) (Definition ExportProof.Set_eq_Reflexive ExportProof.set_eq_refl) (Definition Coq.setoid_ring.Ring_polynom.mkZmon (Lambda j_2333222222232333233222222222222222222222222 positive (Lambda M_23332222222323332332222222222222222222222222 Mon (Case 0 (Lambda M_233322222223233323322222222222222222222222222 Mon Mon) (CaseMatch M_23332222222323332332222222222222222222222222) (CaseBranches mon0 (Lambda p_233322222223233323322222222222222222222222222 positive (Lambda m_2333222222232333233222222222222222222222222222 Mon (App zmon j_2333222222232333233222222222222222222222222 M_23332222222323332332222222222222222222222222))) (Lambda p_233322222223233323322222222222222222222222222 positive (Lambda m_2333222222232333233222222222222222222222222222 Mon (App zmon j_2333222222232333233222222222222222222222222 M_23332222222323332332222222222222222222222222)))))))) (Definition Coq.setoid_ring.Ring_polynom.Peq (Lambda C_23332222222323332332222222222222222222222 (Sort Type) (Lambda ceqb_233322222223233323322222222222222222222222 (Prod out_233322222223233323322222222222222222222221 C_23332222222323332332222222222222222222222 (Prod out_2333222222232333233222222222222222222222211 C_23332222222323332332222222222222222222222 bool)) (Fix (Functions (App Peq 0 (Prod P_2333222222232333233222222222222222222222221 (App Pol C_23332222222323332332222222222222222222222) (Prod P'_23332222222323332332222222222222222222222211 (App Pol C_23332222222323332332222222222222222222222) bool)) (Lambda P_2333222222232333233222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) (Lambda P'_23332222222323332332222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) (Case 1 (Lambda P_233322222223233323322222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) bool) (CaseMatch P_2333222222232333233222222222222222222222222) (CaseBranches (Lambda c_233322222223233323322222222222222222222222222 C_23332222222323332332222222222222222222222 (Case 1 (Lambda P'_2333222222232333233222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) bool) (CaseMatch P'_23332222222323332332222222222222222222222222) (CaseBranches (Lambda c'_2333222222232333233222222222222222222222222222 C_23332222222323332332222222222222222222222 (App ceqb_233322222223233323322222222222222222222222 c_233322222223233323322222222222222222222222222 c'_2333222222232333233222222222222222222222222222)) (Lambda p_2333222222232333233222222222222222222222222222 positive (Lambda p0_23332222222323332332222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) false)) (Lambda p_2333222222232333233222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) (Lambda p0_23332222222323332332222222222222222222222222222 positive (Lambda p1_233322222223233323322222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) false)))))) (Lambda j_233322222223233323322222222222222222222222222 positive (Lambda Q_2333222222232333233222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) (Case 1 (Lambda P'_23332222222323332332222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) bool) (CaseMatch P'_23332222222323332332222222222222222222222222) (CaseBranches (Lambda c_23332222222323332332222222222222222222222222222 C_23332222222323332332222222222222222222222 false) (Lambda j'_23332222222323332332222222222222222222222222222 positive (Lambda Q'_233322222223233323322222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) (Case 0 (Lambda x_2333222222232333233222222222222222222222222222222 comparison bool) (CaseMatch (App Coq.PArith.BinPosDef.Pos.compare j_233322222223233323322222222222222222222222222 j'_23332222222323332332222222222222222222222222222)) (CaseBranches (App Peq Q_2333222222232333233222222222222222222222222222 Q'_233322222223233323322222222222222222222222222222) false false)))) (Lambda p_23332222222323332332222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) (Lambda p0_233322222223233323322222222222222222222222222222 positive (Lambda p1_2333222222232333233222222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) false))))))) (Lambda P_233322222223233323322222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) (Lambda i_2333222222232333233222222222222222222222222222 positive (Lambda Q_23332222222323332332222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) (Case 1 (Lambda P'_233322222223233323322222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) bool) (CaseMatch P'_23332222222323332332222222222222222222222222) (CaseBranches (Lambda c_233322222223233323322222222222222222222222222222 C_23332222222323332332222222222222222222222 false) (Lambda p_233322222223233323322222222222222222222222222222 positive (Lambda p0_2333222222232333233222222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) false)) (Lambda P'_233322222223233323322222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) (Lambda i'_2333222222232333233222222222222222222222222222222 positive (Lambda Q'_23332222222323332332222222222222222222222222222222 (App Pol C_23332222222323332332222222222222222222222) (Case 0 (Lambda x_233322222223233323322222222222222222222222222222222 comparison bool) (CaseMatch (App Coq.PArith.BinPosDef.Pos.compare i_2333222222232333233222222222222222222222222222 i'_2333222222232333233222222222222222222222222222222)) (CaseBranches (Case 0 (Lambda b_233322222223233323322222222222222222222222222222222 bool bool) (CaseMatch (App Peq P_233322222223233323322222222222222222222222222 P'_233322222223233323322222222222222222222222222222)) (CaseBranches (App Peq Q_23332222222323332332222222222222222222222222222 Q'_23332222222323332332222222222222222222222222222222) false)) false false)))))))))))))))) 0)))) (Definition Coq.setoid_ring.Ring_polynom.P0 (Lambda C_23332222222323332332222222222222222222222 (Sort Type) (Lambda cO_233322222223233323322222222222222222222222 C_23332222222323332332222222222222222222222 (App Pc C_23332222222323332332222222222222222222222 cO_233322222223233323322222222222222222222222)))) (Definition Coq.setoid_ring.Ring_polynom.mkVmon (Lambda i_23332222222323332332222222222222222222222222 positive (Lambda M_233322222223233323322222222222222222222222222 Mon (Case 0 (Lambda M_2333222222232333233222222222222222222222222222 Mon Mon) (CaseMatch M_233322222223233323322222222222222222222222222) (CaseBranches (App vmon i_23332222222323332332222222222222222222222222 mon0) (Lambda j_2333222222232333233222222222222222222222222222 positive (Lambda m_23332222222323332332222222222222222222222222222 Mon (App vmon i_23332222222323332332222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.zmon_pred j_2333222222232333233222222222222222222222222222 m_23332222222323332332222222222222222222222222222)))) (Lambda i'_2333222222232333233222222222222222222222222222 positive (Lambda m_23332222222323332332222222222222222222222222222 Mon (App vmon (App Coq.PArith.BinPosDef.Pos.add i_23332222222323332332222222222222222222222222 i'_2333222222232333233222222222222222222222222222) m_23332222222323332332222222222222222222222222222)))))))) (Definition Coq.setoid_ring.Ring_polynom.mon_of_pol (Lambda C_2333222222232333233222222222222222 (Sort Type) (Lambda cO_23332222222323332332222222222222222 C_2333222222232333233222222222222222 (Lambda ceqb_233322222223233323322222222222222222 (Prod out_233322222223233323322222222222222221 C_2333222222232333233222222222222222 (Prod out_2333222222232333233222222222222222211 C_2333222222232333233222222222222222 bool)) (Fix (Functions (App mon_of_pol 0 (Prod P_2333222222232333233222222222222222221 (App Pol C_2333222222232333233222222222222222) (App option (App prod C_2333222222232333233222222222222222 Mon))) (Lambda P_2333222222232333233222222222222222222 (App Pol C_2333222222232333233222222222222222) (Case 1 (Lambda P_23332222222323332332222222222222222222 (App Pol C_2333222222232333233222222222222222) (App option (App prod C_2333222222232333233222222222222222 Mon))) (CaseMatch P_2333222222232333233222222222222222222) (CaseBranches (Lambda c_23332222222323332332222222222222222222 C_2333222222232333233222222222222222 (Case 0 (Lambda b_233322222223233323322222222222222222222 bool (App option (App prod C_2333222222232333233222222222222222 Mon))) (CaseMatch (App ceqb_233322222223233323322222222222222222 c_23332222222323332332222222222222222222 cO_23332222222323332332222222222222222)) (CaseBranches (App None (App prod C_2333222222232333233222222222222222 Mon)) (App Some (App prod C_2333222222232333233222222222222222 Mon) (App pair C_2333222222232333233222222222222222 Mon c_23332222222323332332222222222222222222 mon0))))) (Lambda j_23332222222323332332222222222222222222 positive (Lambda P_233322222223233323322222222222222222222 (App Pol C_2333222222232333233222222222222222) (Case 1 (Lambda x_2333222222232333233222222222222222222222 (App option (App prod C_2333222222232333233222222222222222 Mon)) (App option (App prod C_2333222222232333233222222222222222 Mon))) (CaseMatch (App mon_of_pol P_233322222223233323322222222222222222222)) (CaseBranches (Lambda p_2333222222232333233222222222222222222222 (App prod C_2333222222232333233222222222222222 Mon) (Case 2 (Lambda p_23332222222323332332222222222222222222222 (App prod C_2333222222232333233222222222222222 Mon) (App option (App prod C_2333222222232333233222222222222222 Mon))) (CaseMatch p_2333222222232333233222222222222222222222) (CaseBranches (Lambda c_23332222222323332332222222222222222222222 C_2333222222232333233222222222222222 (Lambda m_233322222223233323322222222222222222222222 Mon (App Some (App prod C_2333222222232333233222222222222222 Mon) (App pair C_2333222222232333233222222222222222 Mon c_23332222222323332332222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mkZmon j_23332222222323332332222222222222222222 m_233322222223233323322222222222222222222222)))))))) (App None (App prod C_2333222222232333233222222222222222 Mon)))))) (Lambda P_23332222222323332332222222222222222222 (App Pol C_2333222222232333233222222222222222) (Lambda i_233322222223233323322222222222222222222 positive (Lambda Q_2333222222232333233222222222222222222222 (App Pol C_2333222222232333233222222222222222) (Case 0 (Lambda b_23332222222323332332222222222222222222222 bool (App option (App prod C_2333222222232333233222222222222222 Mon))) (CaseMatch (App Coq.setoid_ring.Ring_polynom.Peq C_2333222222232333233222222222222222 ceqb_233322222223233323322222222222222222 Q_2333222222232333233222222222222222222222 (App Coq.setoid_ring.Ring_polynom.P0 C_2333222222232333233222222222222222 cO_23332222222323332332222222222222222))) (CaseBranches (Case 1 (Lambda x_23332222222323332332222222222222222222222 (App option (App prod C_2333222222232333233222222222222222 Mon)) (App option (App prod C_2333222222232333233222222222222222 Mon))) (CaseMatch (App mon_of_pol P_23332222222323332332222222222222222222)) (CaseBranches (Lambda p_23332222222323332332222222222222222222222 (App prod C_2333222222232333233222222222222222 Mon) (Case 2 (Lambda p_233322222223233323322222222222222222222222 (App prod C_2333222222232333233222222222222222 Mon) (App option (App prod C_2333222222232333233222222222222222 Mon))) (CaseMatch p_23332222222323332332222222222222222222222) (CaseBranches (Lambda c_233322222223233323322222222222222222222222 C_2333222222232333233222222222222222 (Lambda m_2333222222232333233222222222222222222222222 Mon (App Some (App prod C_2333222222232333233222222222222222 Mon) (App pair C_2333222222232333233222222222222222 Mon c_233322222223233323322222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mkVmon i_233322222223233323322222222222222222222 m_2333222222232333233222222222222222222222222)))))))) (App None (App prod C_2333222222232333233222222222222222 Mon)))) (App None (App prod C_2333222222232333233222222222222222 Mon)))))))))))) 0))))) (Definition Coq.setoid_ring.Ring_polynom.PNSubstL (Lambda C_2333222222232333233222222222222222222222222222 (Sort Type) (Lambda cO_23332222222323332332222222222222222222222222222 C_2333222222232333233222222222222222222222222222 (Lambda cI_233322222223233323322222222222222222222222222222 C_2333222222232333233222222222222222222222222222 (Lambda cadd_2333222222232333233222222222222222222222222222222 (Prod out_2333222222232333233222222222222222222222222222221 C_2333222222232333233222222222222222222222222222 (Prod out_23332222222323332332222222222222222222222222222211 C_2333222222232333233222222222222222222222222222 C_2333222222232333233222222222222222222222222222)) (Lambda cmul_23332222222323332332222222222222222222222222222222 (Prod out_23332222222323332332222222222222222222222222222221 C_2333222222232333233222222222222222222222222222 (Prod out_233322222223233323322222222222222222222222222222211 C_2333222222232333233222222222222222222222222222 C_2333222222232333233222222222222222222222222222)) (Lambda ceqb_233322222223233323322222222222222222222222222222222 (Prod out_233322222223233323322222222222222222222222222222221 C_2333222222232333233222222222222222222222222222 (Prod out_2333222222232333233222222222222222222222222222222211 C_2333222222232333233222222222222222222222222222 bool)) (Lambda cdiv_2333222222232333233222222222222222222222222222222222 (Prod out_2333222222232333233222222222222222222222222222222221 C_2333222222232333233222222222222222222222222222 (Prod out_23332222222323332332222222222222222222222222222222211 C_2333222222232333233222222222222222222222222222 (App prod C_2333222222232333233222222222222222222222222222 C_2333222222232333233222222222222222222222222222))) (Fix (Functions (App PNSubstL 0 (Prod P1_23332222222323332332222222222222222222222222222222221 (App Pol C_2333222222232333233222222222222222222222222222) (Prod LM1_233322222223233323322222222222222222222222222222222211 (App list (App prod (App prod C_2333222222232333233222222222222222222222222222 Mon) (App Pol C_2333222222232333233222222222222222222222222222))) (Prod m_2333222222232333233222222222222222222222222222222222111 nat (Prod n_23332222222323332332222222222222222222222222222222221111 nat (App Pol C_2333222222232333233222222222222222222222222222))))) (Lambda P1_23332222222323332332222222222222222222222222222222222 (App Pol C_2333222222232333233222222222222222222222222222) (Lambda LM1_233322222223233323322222222222222222222222222222222222 (App list (App prod (App prod C_2333222222232333233222222222222222222222222222 Mon) (App Pol C_2333222222232333233222222222222222222222222222))) (Lambda m_2333222222232333233222222222222222222222222222222222222 nat (Lambda n_23332222222323332332222222222222222222222222222222222222 nat (Case 1 (Lambda x_233322222223233323322222222222222222222222222222222222222 (App option (App Pol C_2333222222232333233222222222222222222222222222)) (App Pol C_2333222222232333233222222222222222222222222222)) (CaseMatch (App Coq.setoid_ring.Ring_polynom.PSubstL C_2333222222232333233222222222222222222222222222 cO_23332222222323332332222222222222222222222222222 cI_233322222223233323322222222222222222222222222222 cadd_2333222222232333233222222222222222222222222222222 cmul_23332222222323332332222222222222222222222222222222 ceqb_233322222223233323322222222222222222222222222222222 cdiv_2333222222232333233222222222222222222222222222222222 P1_23332222222323332332222222222222222222222222222222222 LM1_233322222223233323322222222222222222222222222222222222 n_23332222222323332332222222222222222222222222222222222222)) (CaseBranches (Lambda P3_233322222223233323322222222222222222222222222222222222222 (App Pol C_2333222222232333233222222222222222222222222222) (Case 0 (Lambda m_2333222222232333233222222222222222222222222222222222222222 nat (App Pol C_2333222222232333233222222222222222222222222222)) (CaseMatch m_2333222222232333233222222222222222222222222222222222222) (CaseBranches P3_233322222223233323322222222222222222222222222222222222222 (Lambda m1_2333222222232333233222222222222222222222222222222222222222 nat (App PNSubstL P3_233322222223233323322222222222222222222222222222222222222 LM1_233322222223233323322222222222222222222222222222222222 m1_2333222222232333233222222222222222222222222222222222222222 n_23332222222323332332222222222222222222222222222222222222))))) P1_23332222222323332332222222222222222222222222222222222)))))))) 0))))))))) (Definition Coq.setoid_ring.Ring_polynom.norm_aux (Lambda C_23332222222323332332222222222222222222222222322 (Sort Type) (Lambda cO_233322222223233323322222222222222222222222223222 C_23332222222323332332222222222222222222222222322 (Lambda cI_2333222222232333233222222222222222222222222232222 C_23332222222323332332222222222222222222222222322 (Lambda cadd_23332222222323332332222222222222222222222222322222 (Prod out_23332222222323332332222222222222222222222222322221 C_23332222222323332332222222222222222222222222322 (Prod out_233322222223233323322222222222222222222222223222211 C_23332222222323332332222222222222222222222222322 C_23332222222323332332222222222222222222222222322)) (Lambda cmul_233322222223233323322222222222222222222222223222222 (Prod out_233322222223233323322222222222222222222222223222221 C_23332222222323332332222222222222222222222222322 (Prod out_2333222222232333233222222222222222222222222232222211 C_23332222222323332332222222222222222222222222322 C_23332222222323332332222222222222222222222222322)) (Lambda csub_2333222222232333233222222222222222222222222232222222 (Prod out_2333222222232333233222222222222222222222222232222221 C_23332222222323332332222222222222222222222222322 (Prod out_23332222222323332332222222222222222222222222322222211 C_23332222222323332332222222222222222222222222322 C_23332222222323332332222222222222222222222222322)) (Lambda copp_23332222222323332332222222222222222222222222322222222 (Prod out_23332222222323332332222222222222222222222222322222221 C_23332222222323332332222222222222222222222222322 C_23332222222323332332222222222222222222222222322) (Lambda ceqb_233322222223233323322222222222222222222222223222222222 (Prod out_233322222223233323322222222222222222222222223222222221 C_23332222222323332332222222222222222222222222322 (Prod out_2333222222232333233222222222222222222222222232222222211 C_23332222222323332332222222222222222222222222322 bool)) (Fix (Functions (App norm_aux 0 (Prod pe_2333222222232333233222222222222222222222222232222222221 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (Lambda pe_2333222222232333233222222222222222222222222232222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Case 1 (Lambda pe_23332222222323332332222222222222222222222222322222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (CaseMatch pe_2333222222232333233222222222222222222222222232222222222) (CaseBranches (App Pc C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222) (App Pc C_23332222222323332332222222222222222222222222322 cI_2333222222232333233222222222222222222222222232222) (Lambda c_23332222222323332332222222222222222222222222322222222222 C_23332222222323332332222222222222222222222222322 (App Pc C_23332222222323332332222222222222222222222222322 c_23332222222323332332222222222222222222222222322222222222)) (Lambda j_23332222222323332332222222222222222222222222322222222222 positive (App Coq.setoid_ring.Ring_polynom.mk_X C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cI_2333222222232333233222222222222222222222222232222 j_23332222222323332332222222222222222222222222322222222222)) (Lambda pe1_23332222222323332332222222222222222222222222322222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda pe2_233322222223233323322222222222222222222222223222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Case 1 (Lambda pe1_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (CaseMatch pe1_23332222222323332332222222222222222222222222322222222222) (CaseBranches (Case 1 (Lambda pe2_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (CaseMatch pe2_233322222223233323322222222222222222222222223222222222222) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (Lambda c_2333222222232333233222222222222222222222222232222222222222 C_23332222222323332332222222222222222222222222322 (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 positive (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda pe2_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Psub C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 csub_2333222222232333233222222222222222222222222232222222 copp_23332222222323332332222222222222222222222222322222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_2333222222232333233222222222222222222222222232222222222222))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda n0_23332222222323332332222222222222222222222222322222222222222 N (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))))) (Case 1 (Lambda pe2_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (CaseMatch pe2_233322222223233323322222222222222222222222223222222222222) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (Lambda c_2333222222232333233222222222222222222222222232222222222222 C_23332222222323332332222222222222222222222222322 (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 positive (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda pe2_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Psub C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 csub_2333222222232333233222222222222222222222222232222222 copp_23332222222323332332222222222222222222222222322222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_2333222222232333233222222222222222222222222232222222222222))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda n0_23332222222323332332222222222222222222222222322222222222222 N (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))))) (Lambda c_2333222222232333233222222222222222222222222232222222222222 C_23332222222323332332222222222222222222222222322 (Case 1 (Lambda pe2_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (CaseMatch pe2_233322222223233323322222222222222222222222223222222222222) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (Lambda c_23332222222323332332222222222222222222222222322222222222222 C_23332222222323332332222222222222222222222222322 (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_23332222222323332332222222222222222222222222322222222222222 positive (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda pe2_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Psub C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 csub_2333222222232333233222222222222222222222222232222222 copp_23332222222323332332222222222222222222222222322222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_23332222222323332332222222222222222222222222322222222222222))) (Lambda p_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda n0_233322222223233323322222222222222222222222223222222222222222 N (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))))))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 positive (Case 1 (Lambda pe2_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (CaseMatch pe2_233322222223233323322222222222222222222222223222222222222) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (Lambda c_23332222222323332332222222222222222222222222322222222222222 C_23332222222323332332222222222222222222222222322 (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_23332222222323332332222222222222222222222222322222222222222 positive (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda pe2_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Psub C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 csub_2333222222232333233222222222222222222222222232222222 copp_23332222222323332332222222222222222222222222322222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_23332222222323332332222222222222222222222222322222222222222))) (Lambda p_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda n0_233322222223233323322222222222222222222222223222222222222222 N (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))))))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Case 1 (Lambda pe2_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (CaseMatch pe2_233322222223233323322222222222222222222222223222222222222) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (Lambda c_233322222223233323322222222222222222222222223222222222222222 C_23332222222323332332222222222222222222222222322 (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 positive (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda pe2_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Psub C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 csub_2333222222232333233222222222222222222222222232222222 copp_23332222222323332332222222222222222222222222322222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda n0_2333222222232333233222222222222222222222222232222222222222222 N (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))))))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Case 1 (Lambda pe2_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (CaseMatch pe2_233322222223233323322222222222222222222222223222222222222) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (Lambda c_233322222223233323322222222222222222222222223222222222222222 C_23332222222323332332222222222222222222222222322 (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 positive (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda pe2_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Psub C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 csub_2333222222232333233222222222222222222222222232222222 copp_23332222222323332332222222222222222222222222322222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda n0_2333222222232333233222222222222222222222222232222222222222222 N (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))))))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_23332222222323332332222222222222222222222222322222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Case 1 (Lambda pe2_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (CaseMatch pe2_233322222223233323322222222222222222222222223222222222222) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (Lambda c_233322222223233323322222222222222222222222223222222222222222 C_23332222222323332332222222222222222222222222322 (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 positive (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda pe2_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Psub C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 csub_2333222222232333233222222222222222222222222232222222 copp_23332222222323332332222222222222222222222222322222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda n0_2333222222232333233222222222222222222222222232222222222222222 N (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))))))) (Lambda pe1_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Psub C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 csub_2333222222232333233222222222222222222222222232222222 copp_23332222222323332332222222222222222222222222322222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222) (App norm_aux pe1_2333222222232333233222222222222222222222222232222222222222))) (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda n0_23332222222323332332222222222222222222222222322222222222222 N (Case 1 (Lambda pe2_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Pol C_23332222222323332332222222222222222222222222322)) (CaseMatch pe2_233322222223233323322222222222222222222222223222222222222) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)) (Lambda c_233322222223233323322222222222222222222222223222222222222222 C_23332222222323332332222222222222222222222222322 (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 positive (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda p0_2333222222232333233222222222222222222222222232222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda pe2_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Psub C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 csub_2333222222232333233222222222222222222222222232222222 copp_23332222222323332332222222222222222222222222322222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222222))) (Lambda p_233322222223233323322222222222222222222222223222222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda n0_2333222222232333233222222222222222222222222232222222222222222 N (App Coq.setoid_ring.Ring_polynom.Padd C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))))))))))) (Lambda pe1_23332222222323332332222222222222222222222222322222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda pe2_233322222223233323322222222222222222222222223222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Psub C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cadd_23332222222323332332222222222222222222222222322222 csub_2333222222232333233222222222222222222222222232222222 copp_23332222222323332332222222222222222222222222322222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda pe1_23332222222323332332222222222222222222222222322222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda pe2_233322222223233323322222222222222222222222223222222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Pmul C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cI_2333222222232333233222222222222222222222222232222 cadd_23332222222323332332222222222222222222222222322222 cmul_233322222223233323322222222222222222222222223222222 ceqb_233322222223233323322222222222222222222222223222222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) (App norm_aux pe2_233322222223233323322222222222222222222222223222222222222)))) (Lambda pe1_23332222222323332332222222222222222222222222322222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (App Coq.setoid_ring.Ring_polynom.Popp C_23332222222323332332222222222222222222222222322 copp_23332222222323332332222222222222222222222222322222222 (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222))) (Lambda pe1_23332222222323332332222222222222222222222222322222222222 (App PExpr C_23332222222323332332222222222222222222222222322) (Lambda n_233322222223233323322222222222222222222222223222222222222 N (App Coq.setoid_ring.Ring_polynom.Ppow_N C_23332222222323332332222222222222222222222222322 cO_233322222223233323322222222222222222222222223222 cI_2333222222232333233222222222222222222222222232222 cadd_23332222222323332332222222222222222222222222322222 cmul_233322222223233323322222222222222222222222223222222 ceqb_233322222223233323322222222222222222222222223222222222 (Lambda p_2333222222232333233222222222222222222222222232222222222222 (App Pol C_23332222222323332332222222222222222222222222322) p_2333222222232333233222222222222222222222222232222222222222) (App norm_aux pe1_23332222222323332332222222222222222222222222322222222222) n_233322222223233323322222222222222222222222223222222222222)))))))) 0)))))))))) (Definition Coq.setoid_ring.Ring_polynom.norm_subst (Lambda C_2333222222232333233222222222222222 (Sort Type) (Lambda cO_23332222222323332332222222222222222 C_2333222222232333233222222222222222 (Lambda cI_233322222223233323322222222222222222 C_2333222222232333233222222222222222 (Lambda cadd_2333222222232333233222222222222222222 (Prod out_2333222222232333233222222222222222221 C_2333222222232333233222222222222222 (Prod out_23332222222323332332222222222222222211 C_2333222222232333233222222222222222 C_2333222222232333233222222222222222)) (Lambda cmul_23332222222323332332222222222222222222 (Prod out_23332222222323332332222222222222222221 C_2333222222232333233222222222222222 (Prod out_233322222223233323322222222222222222211 C_2333222222232333233222222222222222 C_2333222222232333233222222222222222)) (Lambda csub_233322222223233323322222222222222222222 (Prod out_233322222223233323322222222222222222221 C_2333222222232333233222222222222222 (Prod out_2333222222232333233222222222222222222211 C_2333222222232333233222222222222222 C_2333222222232333233222222222222222)) (Lambda copp_2333222222232333233222222222222222222222 (Prod out_2333222222232333233222222222222222222221 C_2333222222232333233222222222222222 C_2333222222232333233222222222222222) (Lambda ceqb_23332222222323332332222222222222222222222 (Prod out_23332222222323332332222222222222222222221 C_2333222222232333233222222222222222 (Prod out_233322222223233323322222222222222222222211 C_2333222222232333233222222222222222 bool)) (Lambda cdiv_233322222223233323322222222222222222222222 (Prod out_233322222223233323322222222222222222222221 C_2333222222232333233222222222222222 (Prod out_2333222222232333233222222222222222222222211 C_2333222222232333233222222222222222 (App prod C_2333222222232333233222222222222222 C_2333222222232333233222222222222222))) (Lambda n_2333222222232333233222222222222222222222222 nat (Lambda lmp_23332222222323332332222222222222222222222222 (App list (App prod (App prod C_2333222222232333233222222222222222 Mon) (App Pol C_2333222222232333233222222222222222))) (LetIn subst_l_233322222223233323322222222222222222222222223 (Lambda P_233322222223233323322222222222222222222222222 (App Pol C_2333222222232333233222222222222222) (App Coq.setoid_ring.Ring_polynom.PNSubstL C_2333222222232333233222222222222222 cO_23332222222323332332222222222222222 cI_233322222223233323322222222222222222 cadd_2333222222232333233222222222222222222 cmul_23332222222323332332222222222222222222 ceqb_23332222222323332332222222222222222222222 cdiv_233322222223233323322222222222222222222222 P_233322222223233323322222222222222222222222222 lmp_23332222222323332332222222222222222222222222 n_2333222222232333233222222222222222222222222 n_2333222222232333233222222222222222222222222)) (Prod P_233322222223233323322222222222222222222222221 (App Pol C_2333222222232333233222222222222222) (App Pol C_2333222222232333233222222222222222)) (Lambda pe_2333222222232333233222222222222222222222222232 (App PExpr C_2333222222232333233222222222222222) (App subst_l_233322222223233323322222222222222222222222223 (App Coq.setoid_ring.Ring_polynom.norm_aux C_2333222222232333233222222222222222 cO_23332222222323332332222222222222222 cI_233322222223233323322222222222222222 cadd_2333222222232333233222222222222222222 cmul_23332222222323332332222222222222222222 csub_233322222223233323322222222222222222222 copp_2333222222232333233222222222222222222222 ceqb_23332222222323332332222222222222222222222 pe_2333222222232333233222222222222222222222222232)))))))))))))))) (Definition Coq.setoid_ring.Ring_polynom.mk_monpol_list (Lambda C_23332222222323332332 (Sort Type) (Lambda cO_233322222223233323322 C_23332222222323332332 (Lambda cI_2333222222232333233222 C_23332222222323332332 (Lambda cadd_23332222222323332332222 (Prod out_23332222222323332332221 C_23332222222323332332 (Prod out_233322222223233323322211 C_23332222222323332332 C_23332222222323332332)) (Lambda cmul_233322222223233323322222 (Prod out_233322222223233323322221 C_23332222222323332332 (Prod out_2333222222232333233222211 C_23332222222323332332 C_23332222222323332332)) (Lambda csub_2333222222232333233222222 (Prod out_2333222222232333233222221 C_23332222222323332332 (Prod out_23332222222323332332222211 C_23332222222323332332 C_23332222222323332332)) (Lambda copp_23332222222323332332222222 (Prod out_23332222222323332332222221 C_23332222222323332332 C_23332222222323332332) (Lambda ceqb_233322222223233323322222222 (Prod out_233322222223233323322222221 C_23332222222323332332 (Prod out_2333222222232333233222222211 C_23332222222323332332 bool)) (Lambda cdiv_2333222222232333233222222222 (Prod out_2333222222232333233222222221 C_23332222222323332332 (Prod out_23332222222323332332222222211 C_23332222222323332332 (App prod C_23332222222323332332 C_23332222222323332332))) (Fix (Functions (App mk_monpol_list 0 (Prod lpe_23332222222323332332222222221 (App list (App prod (App PExpr C_23332222222323332332) (App PExpr C_23332222222323332332))) (App list (App prod (App prod C_23332222222323332332 Mon) (App Pol C_23332222222323332332)))) (Lambda lpe_23332222222323332332222222222 (App list (App prod (App PExpr C_23332222222323332332) (App PExpr C_23332222222323332332))) (Case 1 (Lambda lpe_233322222223233323322222222222 (App list (App prod (App PExpr C_23332222222323332332) (App PExpr C_23332222222323332332))) (App list (App prod (App prod C_23332222222323332332 Mon) (App Pol C_23332222222323332332)))) (CaseMatch lpe_23332222222323332332222222222) (CaseBranches (App nil (App prod (App prod C_23332222222323332332 Mon) (App Pol C_23332222222323332332))) (Lambda p_233322222223233323322222222222 (App prod (App PExpr C_23332222222323332332) (App PExpr C_23332222222323332332)) (Lambda lpe_2333222222232333233222222222222 (App list (App prod (App PExpr C_23332222222323332332) (App PExpr C_23332222222323332332))) (Case 2 (Lambda p_23332222222323332332222222222222 (App prod (App PExpr C_23332222222323332332) (App PExpr C_23332222222323332332)) (App list (App prod (App prod C_23332222222323332332 Mon) (App Pol C_23332222222323332332)))) (CaseMatch p_233322222223233323322222222222) (CaseBranches (Lambda me_23332222222323332332222222222222 (App PExpr C_23332222222323332332) (Lambda pe_233322222223233323322222222222222 (App PExpr C_23332222222323332332) (Case 1 (Lambda x_2333222222232333233222222222222222 (App option (App prod C_23332222222323332332 Mon)) (App list (App prod (App prod C_23332222222323332332 Mon) (App Pol C_23332222222323332332)))) (CaseMatch (App Coq.setoid_ring.Ring_polynom.mon_of_pol C_23332222222323332332 cO_233322222223233323322 ceqb_233322222223233323322222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332332 cO_233322222223233323322 cI_2333222222232333233222 cadd_23332222222323332332222 cmul_233322222223233323322222 csub_2333222222232333233222222 copp_23332222222323332332222222 ceqb_233322222223233323322222222 cdiv_2333222222232333233222222222 O (App nil (App prod (App prod C_23332222222323332332 Mon) (App Pol C_23332222222323332332))) me_23332222222323332332222222222222))) (CaseBranches (Lambda m_2333222222232333233222222222222222 (App prod C_23332222222323332332 Mon) (App cons (App prod (App prod C_23332222222323332332 Mon) (App Pol C_23332222222323332332)) (App pair (App prod C_23332222222323332332 Mon) (App Pol C_23332222222323332332) m_2333222222232333233222222222222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332332 cO_233322222223233323322 cI_2333222222232333233222 cadd_23332222222323332332222 cmul_233322222223233323322222 csub_2333222222232333233222222 copp_23332222222323332332222222 ceqb_233322222223233323322222222 cdiv_2333222222232333233222222222 O (App nil (App prod (App prod C_23332222222323332332 Mon) (App Pol C_23332222222323332332))) pe_233322222223233323322222222222222)) (App mk_monpol_list lpe_2333222222232333233222222222222))) (App mk_monpol_list lpe_2333222222232333233222222222222)))))))))))))) 0))))))))))) (Definition Coq.PArith.BinPosDef.Pos.compare (App Coq.PArith.BinPosDef.Pos.compare_cont Eq)) (Definition Coq.Init.Datatypes.CompOpp (Lambda r_23332222222323332332222222 comparison (Case 0 (Lambda r_233322222223233323322222222 comparison comparison) (CaseMatch r_23332222222323332332222222) (CaseBranches Eq Gt Lt)))) (Definition Coq.ZArith.BinIntDef.Z.compare (Lambda x_2333222222232333233222 Z (Lambda y_23332222222323332332222 Z (Case 0 (Lambda x_233322222223233323322222 Z comparison) (CaseMatch x_2333222222232333233222) (CaseBranches (Case 0 (Lambda y_233322222223233323322222 Z comparison) (CaseMatch y_23332222222323332332222) (CaseBranches Eq (Lambda y'_233322222223233323322222 positive Lt) (Lambda y'_233322222223233323322222 positive Gt))) (Lambda x'_233322222223233323322222 positive (Case 0 (Lambda y_2333222222232333233222222 Z comparison) (CaseMatch y_23332222222323332332222) (CaseBranches Gt (Lambda y'_2333222222232333233222222 positive (App Coq.PArith.BinPosDef.Pos.compare x'_233322222223233323322222 y'_2333222222232333233222222)) (Lambda y'_2333222222232333233222222 positive Gt)))) (Lambda x'_233322222223233323322222 positive (Case 0 (Lambda y_2333222222232333233222222 Z comparison) (CaseMatch y_23332222222323332332222) (CaseBranches Lt (Lambda y'_2333222222232333233222222 positive Lt) (Lambda y'_2333222222232333233222222 positive (App Coq.Init.Datatypes.CompOpp (App Coq.PArith.BinPosDef.Pos.compare x'_233322222223233323322222 y'_2333222222232333233222222))))))))))) (Definition Coq.ZArith.Zbool.Zeq_bool (Lambda x_23332222222323332332 Z (Lambda y_233322222223233323322 Z (Case 0 (Lambda x_2333222222232333233222 comparison bool) (CaseMatch (App Coq.ZArith.BinIntDef.Z.compare x_23332222222323332332 y_233322222223233323322)) (CaseBranches true false false))))) (Definition Coq.NArith.BinNatDef.N.succ_double (Lambda x_23332222222323332332222222222 N (Case 0 (Lambda x_233322222223233323322222222222 N N) (CaseMatch x_23332222222323332332222222222) (CaseBranches (App Npos xH) (Lambda p_233322222223233323322222222222 positive (App Npos (App xI p_233322222223233323322222222222))))))) (Definition Coq.NArith.BinNatDef.N.leb (Lambda x_233322222223233323322222222232 N (Lambda y_2333222222232333233222222222322 N (Case 0 (Lambda x_23332222222323332332222222223222 comparison bool) (CaseMatch (App Coq.NArith.BinNatDef.N.compare x_233322222223233323322222222232 y_2333222222232333233222222222322)) (CaseBranches true true false))))) (Definition Coq.NArith.BinNatDef.N.sub (Lambda n_233322222223233323322222222232 N (Lambda m_2333222222232333233222222222322 N (Case 0 (Lambda n_23332222222323332332222222223222 N N) (CaseMatch n_233322222223233323322222222232) (CaseBranches N0 (Lambda n'_23332222222323332332222222223222 positive (Case 0 (Lambda m_233322222223233323322222222232222 N N) (CaseMatch m_2333222222232333233222222222322) (CaseBranches n_233322222223233323322222222232 (Lambda m'_233322222223233323322222222232222 positive (Case 0 (Lambda x_2333222222232333233222222222322222 mask N) (CaseMatch (App Coq.PArith.BinPosDef.Pos.sub_mask n'_23332222222323332332222222223222 m'_233322222223233323322222222232222)) (CaseBranches N0 (Lambda p_2333222222232333233222222222322222 positive (App Npos p_2333222222232333233222222222322222)) N0))))))))))) (Definition Coq.NArith.BinNatDef.N.double (Lambda n_233322222223233323322222222232 N (Case 0 (Lambda n_2333222222232333233222222222322 N N) (CaseMatch n_233322222223233323322222222232) (CaseBranches N0 (Lambda p_2333222222232333233222222222322 positive (App Npos (App xO p_2333222222232333233222222222322))))))) (Definition Coq.NArith.BinNatDef.N.pos_div_eucl (Fix (Functions (App pos_div_eucl 0 (Prod a_233322222223233323322221 positive (Prod b_2333222222232333233222211 N (App prod N N))) (Lambda a_233322222223233323322222 positive (Lambda b_2333222222232333233222222 N (Case 0 (Lambda a_23332222222323332332222222 positive (App prod N N)) (CaseMatch a_233322222223233323322222) (CaseBranches (Lambda a'_23332222222323332332222222 positive (Case 2 (Lambda p_233322222223233323322222222 (App prod N N) (App prod N N)) (CaseMatch (App pos_div_eucl a'_23332222222323332332222222 b_2333222222232333233222222)) (CaseBranches (Lambda q_233322222223233323322222222 N (Lambda r_2333222222232333233222222222 N (LetIn r'_23332222222323332332222222223 (App Coq.NArith.BinNatDef.N.succ_double r_2333222222232333233222222222) N (Case 0 (Lambda b_233322222223233323322222222232 bool (App prod N N)) (CaseMatch (App Coq.NArith.BinNatDef.N.leb b_2333222222232333233222222 r'_23332222222323332332222222223)) (CaseBranches (App pair N N (App Coq.NArith.BinNatDef.N.succ_double q_233322222223233323322222222) (App Coq.NArith.BinNatDef.N.sub r'_23332222222323332332222222223 b_2333222222232333233222222)) (App pair N N (App Coq.NArith.BinNatDef.N.double q_233322222223233323322222222) r'_23332222222323332332222222223))))))))) (Lambda a'_23332222222323332332222222 positive (Case 2 (Lambda p_233322222223233323322222222 (App prod N N) (App prod N N)) (CaseMatch (App pos_div_eucl a'_23332222222323332332222222 b_2333222222232333233222222)) (CaseBranches (Lambda q_233322222223233323322222222 N (Lambda r_2333222222232333233222222222 N (LetIn r'_23332222222323332332222222223 (App Coq.NArith.BinNatDef.N.double r_2333222222232333233222222222) N (Case 0 (Lambda b_233322222223233323322222222232 bool (App prod N N)) (CaseMatch (App Coq.NArith.BinNatDef.N.leb b_2333222222232333233222222 r'_23332222222323332332222222223)) (CaseBranches (App pair N N (App Coq.NArith.BinNatDef.N.succ_double q_233322222223233323322222222) (App Coq.NArith.BinNatDef.N.sub r'_23332222222323332332222222223 b_2333222222232333233222222)) (App pair N N (App Coq.NArith.BinNatDef.N.double q_233322222223233323322222222) r'_23332222222323332332222222223))))))))) (Case 0 (Lambda b_23332222222323332332222222 N (App prod N N)) (CaseMatch b_2333222222232333233222222) (CaseBranches (App pair N N N0 (App Npos xH)) (Lambda p_23332222222323332332222222 positive (Case 0 (Lambda p_233322222223233323322222222 positive (App prod N N)) (CaseMatch p_23332222222323332332222222) (CaseBranches (Lambda p_233322222223233323322222222 positive (App pair N N N0 (App Npos xH))) (Lambda p_233322222223233323322222222 positive (App pair N N N0 (App Npos xH))) (App pair N N (App Npos xH) N0)))))))))))) 0)) (Definition Coq.ZArith.BinIntDef.Z.of_N (Lambda n_23332222222323332332222222 N (Case 0 (Lambda n_233322222223233323322222222 N Z) (CaseMatch n_23332222222323332332222222) (CaseBranches Z0 (Lambda p_233322222223233323322222222 positive (App Zpos p_233322222223233323322222222)))))) (Definition Coq.ZArith.BinIntDef.Z.quotrem (Lambda a_23332222222323332332 Z (Lambda b_233322222223233323322 Z (Case 0 (Lambda a_2333222222232333233222 Z (App prod Z Z)) (CaseMatch a_23332222222323332332) (CaseBranches (App pair Z Z Z0 Z0) (Lambda a_2333222222232333233222 positive (Case 0 (Lambda b_23332222222323332332222 Z (App prod Z Z)) (CaseMatch b_233322222223233323322) (CaseBranches (App pair Z Z Z0 a_23332222222323332332) (Lambda b_23332222222323332332222 positive (Case 2 (Lambda p_233322222223233323322222 (App prod N N) (App prod Z Z)) (CaseMatch (App Coq.NArith.BinNatDef.N.pos_div_eucl a_2333222222232333233222 (App Npos b_23332222222323332332222))) (CaseBranches (Lambda q_233322222223233323322222 N (Lambda r_2333222222232333233222222 N (App pair Z Z (App Coq.ZArith.BinIntDef.Z.of_N q_233322222223233323322222) (App Coq.ZArith.BinIntDef.Z.of_N r_2333222222232333233222222))))))) (Lambda b_23332222222323332332222 positive (Case 2 (Lambda p_233322222223233323322222 (App prod N N) (App prod Z Z)) (CaseMatch (App Coq.NArith.BinNatDef.N.pos_div_eucl a_2333222222232333233222 (App Npos b_23332222222323332332222))) (CaseBranches (Lambda q_233322222223233323322222 N (Lambda r_2333222222232333233222222 N (App pair Z Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N q_233322222223233323322222)) (App Coq.ZArith.BinIntDef.Z.of_N r_2333222222232333233222222)))))))))) (Lambda a_2333222222232333233222 positive (Case 0 (Lambda b_23332222222323332332222 Z (App prod Z Z)) (CaseMatch b_233322222223233323322) (CaseBranches (App pair Z Z Z0 a_23332222222323332332) (Lambda b_23332222222323332332222 positive (Case 2 (Lambda p_233322222223233323322222 (App prod N N) (App prod Z Z)) (CaseMatch (App Coq.NArith.BinNatDef.N.pos_div_eucl a_2333222222232333233222 (App Npos b_23332222222323332332222))) (CaseBranches (Lambda q_233322222223233323322222 N (Lambda r_2333222222232333233222222 N (App pair Z Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N q_233322222223233323322222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N r_2333222222232333233222222)))))))) (Lambda b_23332222222323332332222 positive (Case 2 (Lambda p_233322222223233323322222 (App prod N N) (App prod Z Z)) (CaseMatch (App Coq.NArith.BinNatDef.N.pos_div_eucl a_2333222222232333233222 (App Npos b_23332222222323332332222))) (CaseBranches (Lambda q_233322222223233323322222 N (Lambda r_2333222222232333233222222 N (App pair Z Z (App Coq.ZArith.BinIntDef.Z.of_N q_233322222223233323322222) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N r_2333222222232333233222222)))))))))))))))) (Definition Coq.setoid_ring.Ring_polynom.interp_PElist (Lambda R_23332222222323332333222222222222222222222222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222 (Lambda rI_2333222222232333233322222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222 (Lambda radd_23332222222323332333222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222)) (Lambda rmul_233322222223233323332222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222)) (Lambda rsub_2333222222232333233322222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222)) (Lambda ropp_23332222222323332333222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222) (Lambda req_233322222223233323332222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222 (Sort Prop))) (Lambda C_2333222222232333233322222222222222222222222222222222222222222 (Sort Type) (Lambda phi_23332222222323332333222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222) (Lambda Cpow_233322222223233323332222222222222222222222222222222222222222222 (Sort Type) (Lambda Cp_phi_2333222222232333233322222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222221 N Cpow_233322222223233323332222222222222222222222222222222222222222222) (Lambda rpow_23332222222323332333222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222211 Cpow_233322222223233323332222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222)) (Fix (Functions (App interp_PElist 0 (Prod l_233322222223233323332222222222222222222222222222222222222222222221 (App list R_23332222222323332333222222222222222222222222222222222) (Prod lpe_2333222222232333233322222222222222222222222222222222222222222222211 (App list (App prod (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (App PExpr C_2333222222232333233322222222222222222222222222222222222222222))) (Sort Prop))) (Lambda l_233322222223233323332222222222222222222222222222222222222222222222 (App list R_23332222222323332333222222222222222222222222222222222) (Lambda lpe_2333222222232333233322222222222222222222222222222222222222222222222 (App list (App prod (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (App PExpr C_2333222222232333233322222222222222222222222222222222222222222))) (Case 1 (Lambda lpe_23332222222323332333222222222222222222222222222222222222222222222222 (App list (App prod (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (App PExpr C_2333222222232333233322222222222222222222222222222222222222222))) (Sort Prop)) (CaseMatch lpe_2333222222232333233322222222222222222222222222222222222222222222222) (CaseBranches True (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222 (App prod (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (App PExpr C_2333222222232333233322222222222222222222222222222222222222222)) (Lambda lpe_233322222223233323332222222222222222222222222222222222222222222222222 (App list (App prod (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (App PExpr C_2333222222232333233322222222222222222222222222222222222222222))) (Case 2 (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222 (App prod (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (App PExpr C_2333222222232333233322222222222222222222222222222222222222222)) (Sort Prop)) (CaseMatch p_23332222222323332333222222222222222222222222222222222222222222222222) (CaseBranches (Lambda me_2333222222232333233322222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (Lambda pe_23332222222323332333222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (Case 1 (Lambda lpe_233322222223233323332222222222222222222222222222222222222222222222222222 (App list (App prod (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (App PExpr C_2333222222232333233322222222222222222222222222222222222222222))) (Sort Prop)) (CaseMatch lpe_233322222223233323332222222222222222222222222222222222222222222222222) (CaseBranches (App req_233322222223233323332222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.PEeval R_23332222222323332333222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222 phi_23332222222323332333222222222222222222222222222222222222222222 Cpow_233322222223233323332222222222222222222222222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222222222222222222222222 rpow_23332222222323332333222222222222222222222222222222222222222222222 l_233322222223233323332222222222222222222222222222222222222222222222 me_2333222222232333233322222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.PEeval R_23332222222323332333222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222 phi_23332222222323332333222222222222222222222222222222222222222222 Cpow_233322222223233323332222222222222222222222222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222222222222222222222222 rpow_23332222222323332333222222222222222222222222222222222222222222222 l_233322222223233323332222222222222222222222222222222222222222222222 pe_23332222222323332333222222222222222222222222222222222222222222222222222)) (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222 (App prod (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (App PExpr C_2333222222232333233322222222222222222222222222222222222222222)) (Lambda l_2333222222232333233322222222222222222222222222222222222222222222222222222 (App list (App prod (App PExpr C_2333222222232333233322222222222222222222222222222222222222222) (App PExpr C_2333222222232333233322222222222222222222222222222222222222222))) (App and (App req_233322222223233323332222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.PEeval R_23332222222323332333222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222 phi_23332222222323332333222222222222222222222222222222222222222222 Cpow_233322222223233323332222222222222222222222222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222222222222222222222222 rpow_23332222222323332333222222222222222222222222222222222222222222222 l_233322222223233323332222222222222222222222222222222222222222222222 me_2333222222232333233322222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.PEeval R_23332222222323332333222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222 phi_23332222222323332333222222222222222222222222222222222222222222 Cpow_233322222223233323332222222222222222222222222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222222222222222222222222 rpow_23332222222323332333222222222222222222222222222222222222222222222 l_233322222223233323332222222222222222222222222222222222222222222222 pe_23332222222323332333222222222222222222222222222222222222222222222222222)) (App interp_PElist l_233322222223233323332222222222222222222222222222222222222222222222 lpe_233322222223233323332222222222222222222222222222222222222222222222222)))))))))))))))))) 0))))))))))))))) (Definition Coq.setoid_ring.Ring_polynom.Pphi_pow (Lambda R_23332222222323332333222222222222222222222222222222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda rI_2333222222232333233322222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda radd_23332222222323332333222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda rmul_233322222223233323332222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda rsub_2333222222232333233322222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda ropp_23332222222323332333222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222) (Lambda C_233322222223233323332222222222222222222222222222222222222222222222 (Sort Type) (Lambda cO_2333222222232333233322222222222222222222222222222222222222222222222 C_233322222223233323332222222222222222222222222222222222222222222222 (Lambda cI_23332222222323332333222222222222222222222222222222222222222222222222 C_233322222223233323332222222222222222222222222222222222222222222222 (Lambda ceqb_233322222223233323332222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222221 C_233322222223233323332222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222211 C_233322222223233323332222222222222222222222222222222222222222222222 bool)) (Lambda phi_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222221 C_233322222223233323332222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222) (Lambda Cpow_23332222222323332333222222222222222222222222222222222222222222222222222 (Sort Type) (Lambda Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222221 N Cpow_23332222222323332333222222222222222222222222222222222222222222222222222) (Lambda rpow_2333222222232333233322222222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222211 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda get_sign_23332222222323332333222222222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222221 C_233322222223233323332222222222222222222222222222222222222222222222 (App option C_233322222223233323332222222222222222222222222222222222222222222222)) (LetIn mkpow_233322222223233323332222222222222222222222222222222222222222222222222222223 (Lambda x_233322222223233323332222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222 positive (Case 0 (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_2333222222232333233322222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222 x_233322222223233323332222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222 (App Npos p_2333222222232333233322222222222222222222222222222222222222222222222222222222)))) (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222 x_233322222223233323332222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222 (App Npos p_2333222222232333233322222222222222222222222222222222222222222222222222222222)))) x_233322222223233323332222222222222222222222222222222222222222222222222222222)))) (Prod x_233322222223233323332222222222222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod p_2333222222232333233322222222222222222222222222222222222222222222222222222211 positive R_23332222222323332333222222222222222222222222222222222222222)) (LetIn mkopp_pow_2333222222232333233322222222222222222222222222222222222222222222222222222233 (Lambda x_2333222222232333233322222222222222222222222222222222222222222222222222222232 R_23332222222323332333222222222222222222222222222222222222222 (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222322 positive (App ropp_23332222222323332333222222222222222222222222222222222222222222222 (App mkpow_233322222223233323332222222222222222222222222222222222222222222222222222223 x_2333222222232333233322222222222222222222222222222222222222222222222222222232 p_23332222222323332333222222222222222222222222222222222222222222222222222222322)))) (Prod x_2333222222232333233322222222222222222222222222222222222222222222222222222231 R_23332222222323332333222222222222222222222222222222222222222 (Prod p_23332222222323332333222222222222222222222222222222222222222222222222222222311 positive R_23332222222323332333222222222222222222222222222222222222222)) (LetIn mkmult_pow_23332222222323332333222222222222222222222222222222222222222222222222222222333 (Lambda r_23332222222323332333222222222222222222222222222222222222222222222222222222332 R_23332222222323332333222222222222222222222222222222222222222 (Lambda x_233322222223233323332222222222222222222222222222222222222222222222222222223322 R_23332222222323332333222222222222222222222222222222222222222 (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222233222 positive (App rmul_233322222223233323332222222222222222222222222222222222222222222 r_23332222222323332333222222222222222222222222222222222222222222222222222222332 (App mkpow_233322222223233323332222222222222222222222222222222222222222222222222222223 x_233322222223233323332222222222222222222222222222222222222222222222222222223322 p_2333222222232333233322222222222222222222222222222222222222222222222222222233222))))) (Prod r_23332222222323332333222222222222222222222222222222222222222222222222222222331 R_23332222222323332333222222222222222222222222222222222222222 (Prod x_233322222223233323332222222222222222222222222222222222222222222222222222223311 R_23332222222323332333222222222222222222222222222222222222222 (Prod p_2333222222232333233322222222222222222222222222222222222222222222222222222233111 positive R_23332222222323332333222222222222222222222222222222222222222))) (App Coq.setoid_ring.Ring_polynom.Pphi_avoid R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 C_233322222223233323332222222222222222222222222222222222222222222222 cO_2333222222232333233322222222222222222222222222222222222222222222222 cI_23332222222323332333222222222222222222222222222222222222222222222222 ceqb_233322222223233323332222222222222222222222222222222222222222222222222 phi_2333222222232333233322222222222222222222222222222222222222222222222222 get_sign_23332222222323332333222222222222222222222222222222222222222222222222222222 mkpow_233322222223233323332222222222222222222222222222222222222222222222222222223 mkopp_pow_2333222222232333233322222222222222222222222222222222222222222222222222222233 mkmult_pow_23332222222323332333222222222222222222222222222222222222222222222222222222333))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_polynom.Pphi (Lambda R_23332222222323332333222222222222222222222222222222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda radd_2333222222232333233322222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda rmul_23332222222323332333222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda C_233322222223233323332222222222222222222222222222222222222222222 (Sort Type) (Lambda phi_2333222222232333233322222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222221 C_233322222223233323332222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222) (Fix (Functions (App Pphi 0 (Prod l_23332222222323332333222222222222222222222222222222222222222222221 (App list R_23332222222323332333222222222222222222222222222222222222222) (Prod P_233322222223233323332222222222222222222222222222222222222222222211 (App Pol C_233322222223233323332222222222222222222222222222222222222222222) R_23332222222323332333222222222222222222222222222222222222222)) (Lambda l_23332222222323332333222222222222222222222222222222222222222222222 (App list R_23332222222323332333222222222222222222222222222222222222222) (Lambda P_233322222223233323332222222222222222222222222222222222222222222222 (App Pol C_233322222223233323332222222222222222222222222222222222222222222) (Case 1 (Lambda P_2333222222232333233322222222222222222222222222222222222222222222222 (App Pol C_233322222223233323332222222222222222222222222222222222222222222) R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch P_233322222223233323332222222222222222222222222222222222222222222222) (CaseBranches (Lambda c_2333222222232333233322222222222222222222222222222222222222222222222 C_233322222223233323332222222222222222222222222222222222222222222 (App phi_2333222222232333233322222222222222222222222222222222222222222222 c_2333222222232333233322222222222222222222222222222222222222222222222)) (Lambda j_2333222222232333233322222222222222222222222222222222222222222222222 positive (Lambda Q_23332222222323332333222222222222222222222222222222222222222222222222 (App Pol C_233322222223233323332222222222222222222222222222222222222222222) (App Pphi (App Coq.setoid_ring.BinList.jump R_23332222222323332333222222222222222222222222222222222222222 j_2333222222232333233322222222222222222222222222222222222222222222222 l_23332222222323332333222222222222222222222222222222222222222222222) Q_23332222222323332333222222222222222222222222222222222222222222222222))) (Lambda P_2333222222232333233322222222222222222222222222222222222222222222222 (App Pol C_233322222223233323332222222222222222222222222222222222222222222) (Lambda i_23332222222323332333222222222222222222222222222222222222222222222222 positive (Lambda Q_233322222223233323332222222222222222222222222222222222222222222222222 (App Pol C_233322222223233323332222222222222222222222222222222222222222222) (App radd_2333222222232333233322222222222222222222222222222222222222222 (App rmul_23332222222323332333222222222222222222222222222222222222222222 (App Pphi l_23332222222323332333222222222222222222222222222222222222222222222 P_2333222222232333233322222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_23332222222323332333222222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 l_23332222222323332333222222222222222222222222222222222222222222222) i_23332222222323332333222222222222222222222222222222222222222222222222)) (App Pphi (App Coq.Lists.List.tl R_23332222222323332333222222222222222222222222222222222222222 l_23332222222323332333222222222222222222222222222222222222222222222) Q_233322222223233323332222222222222222222222222222222222222222222222222))))))))))) 0)))))))) (Definition Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (LetIn U_233322222223233323332222222222222222222222222222222222222223 (Sort Type) (Sort Type) (Lambda A_2333222222232333233322222222222222222222222222222222222222232 U_233322222223233323332222222222222222222222222222222222222223 (Lambda R_23332222222323332333222222222222222222222222222222222222222322 (App Coq.Relations.Relation_Definitions.relation A_2333222222232333233322222222222222222222222222222222222222232) (Lambda H_233322222223233323332222222222222222222222222222222222222223222 (App PER A_2333222222232333233322222222222222222222222222222222222222232 R_23332222222323332333222222222222222222222222222222222222222322) (Lambda x_2333222222232333233322222222222222222222222222222222222222232222 A_2333222222232333233322222222222222222222222222222222222222232 (App (Lambda R_23332222222323332333222222222222222222222222222222222222222322222 (App Coq.Relations.Relation_Definitions.relation A_2333222222232333233322222222222222222222222222222222222222232) (Lambda H_233322222223233323332222222222222222222222222222222222222223222222 (App PER A_2333222222232333233322222222222222222222222222222222222222232 R_23332222222323332333222222222222222222222222222222222222222322222) (Lambda x_2333222222232333233322222222222222222222222222222222222222232222222 A_2333222222232333233322222222222222222222222222222222222222232 (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism_obligation_1 A_2333222222232333233322222222222222222222222222222222222222232 R_23332222222323332333222222222222222222222222222222222222222322222 H_233322222223233323332222222222222222222222222222222222222223222222 x_2333222222232333233322222222222222222222222222222222222222232222222)))) R_23332222222323332333222222222222222222222222222222222222222322 H_233322222223233323332222222222222222222222222222222222222223222 x_2333222222232333233322222222222222222222222222222222222222232222))))))) (Definition Coq.setoid_ring.Ring_polynom.PEeval (Lambda R_233322222223233323332222222222222222222222222222222222222222 (Sort Type) (Lambda rO_2333222222232333233322222222222222222222222222222222222222222 R_233322222223233323332222222222222222222222222222222222222222 (Lambda rI_23332222222323332333222222222222222222222222222222222222222222 R_233322222223233323332222222222222222222222222222222222222222 (Lambda radd_233322222223233323332222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222221 R_233322222223233323332222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222211 R_233322222223233323332222222222222222222222222222222222222222 R_233322222223233323332222222222222222222222222222222222222222)) (Lambda rmul_2333222222232333233322222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222221 R_233322222223233323332222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222211 R_233322222223233323332222222222222222222222222222222222222222 R_233322222223233323332222222222222222222222222222222222222222)) (Lambda rsub_23332222222323332333222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222221 R_233322222223233323332222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222211 R_233322222223233323332222222222222222222222222222222222222222 R_233322222223233323332222222222222222222222222222222222222222)) (Lambda ropp_233322222223233323332222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222221 R_233322222223233323332222222222222222222222222222222222222222 R_233322222223233323332222222222222222222222222222222222222222) (Lambda C_2333222222232333233322222222222222222222222222222222222222222222222 (Sort Type) (Lambda phi_23332222222323332333222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222 R_233322222223233323332222222222222222222222222222222222222222) (Lambda Cpow_233322222223233323332222222222222222222222222222222222222222222222222 (Sort Type) (Lambda Cp_phi_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222221 N Cpow_233322222223233323332222222222222222222222222222222222222222222222222) (Lambda rpow_23332222222323332333222222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222221 R_233322222223233323332222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222211 Cpow_233322222223233323332222222222222222222222222222222222222222222222222 R_233322222223233323332222222222222222222222222222222222222222)) (Fix (Functions (App PEeval 0 (Prod l_233322222223233323332222222222222222222222222222222222222222222222222221 (App list R_233322222223233323332222222222222222222222222222222222222222) (Prod pe_2333222222232333233322222222222222222222222222222222222222222222222222211 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) R_233322222223233323332222222222222222222222222222222222222222)) (Lambda l_233322222223233323332222222222222222222222222222222222222222222222222222 (App list R_233322222223233323332222222222222222222222222222222222222222) (Lambda pe_2333222222232333233322222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) (Case 1 (Lambda pe_23332222222323332333222222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) R_233322222223233323332222222222222222222222222222222222222222) (CaseMatch pe_2333222222232333233322222222222222222222222222222222222222222222222222222) (CaseBranches rO_2333222222232333233322222222222222222222222222222222222222222 rI_23332222222323332333222222222222222222222222222222222222222222 (Lambda c_23332222222323332333222222222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222 (App phi_23332222222323332333222222222222222222222222222222222222222222222222 c_23332222222323332333222222222222222222222222222222222222222222222222222222)) (Lambda j_23332222222323332333222222222222222222222222222222222222222222222222222222 positive (App Coq.setoid_ring.BinList.nth R_233322222223233323332222222222222222222222222222222222222222 rO_2333222222232333233322222222222222222222222222222222222222222 j_23332222222323332333222222222222222222222222222222222222222222222222222222 l_233322222223233323332222222222222222222222222222222222222222222222222222)) (Lambda pe1_23332222222323332333222222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) (Lambda pe2_233322222223233323332222222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) (App radd_233322222223233323332222222222222222222222222222222222222222222 (App PEeval l_233322222223233323332222222222222222222222222222222222222222222222222222 pe1_23332222222323332333222222222222222222222222222222222222222222222222222222) (App PEeval l_233322222223233323332222222222222222222222222222222222222222222222222222 pe2_233322222223233323332222222222222222222222222222222222222222222222222222222)))) (Lambda pe1_23332222222323332333222222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) (Lambda pe2_233322222223233323332222222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) (App rsub_23332222222323332333222222222222222222222222222222222222222222222 (App PEeval l_233322222223233323332222222222222222222222222222222222222222222222222222 pe1_23332222222323332333222222222222222222222222222222222222222222222222222222) (App PEeval l_233322222223233323332222222222222222222222222222222222222222222222222222 pe2_233322222223233323332222222222222222222222222222222222222222222222222222222)))) (Lambda pe1_23332222222323332333222222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) (Lambda pe2_233322222223233323332222222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) (App rmul_2333222222232333233322222222222222222222222222222222222222222222 (App PEeval l_233322222223233323332222222222222222222222222222222222222222222222222222 pe1_23332222222323332333222222222222222222222222222222222222222222222222222222) (App PEeval l_233322222223233323332222222222222222222222222222222222222222222222222222 pe2_233322222223233323332222222222222222222222222222222222222222222222222222222)))) (Lambda pe1_23332222222323332333222222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) (App ropp_233322222223233323332222222222222222222222222222222222222222222222 (App PEeval l_233322222223233323332222222222222222222222222222222222222222222222222222 pe1_23332222222323332333222222222222222222222222222222222222222222222222222222))) (Lambda pe1_23332222222323332333222222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222) (Lambda n_233322222223233323332222222222222222222222222222222222222222222222222222222 N (App rpow_23332222222323332333222222222222222222222222222222222222222222222222222 (App PEeval l_233322222223233323332222222222222222222222222222222222222222222222222222 pe1_23332222222323332333222222222222222222222222222222222222222222222222222222) (App Cp_phi_2333222222232333233322222222222222222222222222222222222222222222222222 n_233322222223233323332222222222222222222222222222222222222222222222222222222)))))))))) 0)))))))))))))) (Definition Coq.setoid_ring.Ring_polynom.Pphi_pow_ok (Lambda R_23332222222323332333222222222222222222222222222222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda rI_2333222222232333233322222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda radd_23332222222323332333222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda rmul_233322222223233323332222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda rsub_2333222222232333233322222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda ropp_23332222222323332333222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222) (Lambda req_233322222223233323332222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 (Sort Prop))) (Lambda Rsth_2333222222232333233322222222222222222222222222222222222222222222222 (App Equivalence R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222) (Lambda Reqe_23332222222323332333222222222222222222222222222222222222222222222222 (App ring_eq_ext R_23332222222323332333222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222) (Lambda ARth_233322222223233323332222222222222222222222222222222222222222222222222 (App almost_ring_theory R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222) (Lambda C_2333222222232333233322222222222222222222222222222222222222222222222222 (Sort Type) (Lambda cO_23332222222323332333222222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Lambda cI_233322222223233323332222222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Lambda cadd_2333222222232333233322222222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222211 C_2333222222232333233322222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222)) (Lambda cmul_23332222222323332333222222222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222211 C_2333222222232333233322222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222)) (Lambda csub_233322222223233323332222222222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222222222211 C_2333222222232333233322222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222)) (Lambda copp_2333222222232333233322222222222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222) (Lambda ceqb_23332222222323332333222222222222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222222211 C_2333222222232333233322222222222222222222222222222222222222222222222222 bool)) (Lambda phi_233322222223233323332222222222222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222) (Lambda CRmorph_2333222222232333233322222222222222222222222222222222222222222222222222222222222 (App ring_morph R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 cO_23332222222323332333222222222222222222222222222222222222222222222222222 cI_233322222223233323332222222222222222222222222222222222222222222222222222 cadd_2333222222232333233322222222222222222222222222222222222222222222222222222 cmul_23332222222323332333222222222222222222222222222222222222222222222222222222 csub_233322222223233323332222222222222222222222222222222222222222222222222222222 copp_2333222222232333233322222222222222222222222222222222222222222222222222222222 ceqb_23332222222323332333222222222222222222222222222222222222222222222222222222222 phi_233322222223233323332222222222222222222222222222222222222222222222222222222222) (Lambda Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 (Sort Type) (Lambda Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222222222221 N Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222) (Lambda rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222222222222211 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda pow_th_23332222222323332333222222222222222222222222222222222222222222222222222222222222222 (App power_theory R_23332222222323332333222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222) (Lambda get_sign_233322222223233323332222222222222222222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 (App option C_2333222222232333233322222222222222222222222222222222222222222222222222)) (Lambda get_sign_spec_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222 (App sign_theory C_2333222222232333233322222222222222222222222222222222222222222222222222 copp_2333222222232333233322222222222222222222222222222222222222222222222222222222 ceqb_23332222222323332333222222222222222222222222222222222222222222222222222222222 get_sign_233322222223233323332222222222222222222222222222222222222222222222222222222222222222) (Cast (Lambda P_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222 (App Pol C_2333222222232333233322222222222222222222222222222222222222222222222222) (Lambda fv_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222 (App list R_23332222222323332333222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi_avoid_ok R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222 Reqe_23332222222323332333222222222222222222222222222222222222222222222222 ARth_233322222223233323332222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 cO_23332222222323332333222222222222222222222222222222222222222222222222222 cI_233322222223233323332222222222222222222222222222222222222222222222222222 cadd_2333222222232333233322222222222222222222222222222222222222222222222222222 cmul_23332222222323332333222222222222222222222222222222222222222222222222222222 csub_233322222223233323332222222222222222222222222222222222222222222222222222222 copp_2333222222232333233322222222222222222222222222222222222222222222222222222222 ceqb_23332222222323332333222222222222222222222222222222222222222222222222222222222 phi_233322222223233323332222222222222222222222222222222222222222222222222222222222 CRmorph_2333222222232333233322222222222222222222222222222222222222222222222222222222222 get_sign_233322222223233323332222222222222222222222222222222222222222222222222222222222222222 get_sign_spec_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222 (Lambda x_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 positive (Case 0 (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) x_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda x_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 positive (App ropp_23332222222323332333222222222222222222222222222222222222222222222 (Case 0 (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) x_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222))))) (Lambda r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive (App rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (Case 0 (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)))) x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))))) (Lambda r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 positive (App (Lambda lemma_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 (App req_233322222223233323332222222222222222222222222222222222222222222222 (Case 0 (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222) (Case 0 (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) lemma_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) (App Coq.setoid_ring.Ring_polynom.local_mkpow_ok R_23332222222323332333222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 pow_th_23332222222323332333222222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (App Coq.Classes.RelationClasses.reflexivity R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222))))) (Lambda r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 positive (App (Lambda lemma_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 (App req_233322222223233323332222222222222222222222222222222222222222222222 (Case 0 (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222) (App ropp_23332222222323332333222222222222222222222222222222222222222222222 (Case 0 (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222))) (App ropp_23332222222323332333222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.ropp_ext_Proper R_23332222222323332333222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Reqe_23332222222323332333222222222222222222222222222222222222222222222222 (Case 0 (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))) r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) lemma_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222) (App ropp_23332222222323332333222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)) (App ropp_23332222222323332333222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222222222222222222222222222222 (App ropp_23332222222323332333222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222))))) (App Coq.setoid_ring.Ring_polynom.local_mkpow_ok R_23332222222323332333222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 pow_th_23332222222323332333222222222222222222222222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222) (App Coq.Classes.RelationClasses.reflexivity R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222) (App ropp_23332222222323332333222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)))))) (Lambda r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 positive (App (Lambda lemma_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 (App req_233322222223233323332222222222222222222222222222222222222222222222 (Case 0 (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)))) x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222) (App rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (Case 0 (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)))) x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222))) (App rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222) req_233322222223233323332222222222222222222222222222222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222) rmul_233322222223233323332222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.rmul_ext_Proper R_23332222222323332333222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Reqe_23332222222323332333222222222222222222222222222222222222222222222222) r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222) r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222) (Case 0 (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222222 positive R_23332222222323332333222222222222222222222222222222222222222) (CaseMatch p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)))) (Lambda p_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222222 positive (App rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 (App Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (App Npos p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)))) x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222) lemma_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222222) (App rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)) (App rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222222222222222222222222222222 (App rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222))))) (App Coq.setoid_ring.Ring_polynom.local_mkpow_ok R_23332222222323332333222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 pow_th_23332222222323332333222222222222222222222222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222) (App Coq.Classes.RelationClasses.reflexivity R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222) (App rmul_233322222223233323332222222222222222222222222222222222222222222 r_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_theory.pow_pos R_23332222222323332333222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 x_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 p_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222))))))) P_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222 fv_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222))) REVERTcast (Prod P_23332222222323332333222222222222222222222222222222222222222222222222222222222222222221 (App Pol C_2333222222232333233322222222222222222222222222222222222222222222222222) (Prod fv_233322222223233323332222222222222222222222222222222222222222222222222222222222222222211 (App list R_23332222222323332333222222222222222222222222222222222222222) (App req_233322222223233323332222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi_pow R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 cO_23332222222323332333222222222222222222222222222222222222222222222222222 cI_233322222223233323332222222222222222222222222222222222222222222222222222 ceqb_23332222222323332333222222222222222222222222222222222222222222222222222222222 phi_233322222223233323332222222222222222222222222222222222222222222222222222222222 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 get_sign_233322222223233323332222222222222222222222222222222222222222222222222222222222222222 fv_233322222223233323332222222222222222222222222222222222222222222222222222222222222222211 P_23332222222323332333222222222222222222222222222222222222222222222222222222222222222221) (App Coq.setoid_ring.Ring_polynom.Pphi R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 phi_233322222223233323332222222222222222222222222222222222222222222222222222222222 fv_233322222223233323332222222222222222222222222222222222222222222222222222222222222222211 P_23332222222323332333222222222222222222222222222222222222222222222222222222222222222221))))))))))))))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_polynom.norm_subst_ok (Lambda R_23332222222323332333222222222222222222222222222222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda rI_2333222222232333233322222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222 (Lambda radd_23332222222323332333222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda rmul_233322222223233323332222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda rsub_2333222222232333233322222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda ropp_23332222222323332333222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222) (Lambda req_233322222223233323332222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222211 R_23332222222323332333222222222222222222222222222222222222222 (Sort Prop))) (Lambda Rsth_2333222222232333233322222222222222222222222222222222222222222222222 (App Equivalence R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222) (Lambda Reqe_23332222222323332333222222222222222222222222222222222222222222222222 (App ring_eq_ext R_23332222222323332333222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222) (Lambda ARth_233322222223233323332222222222222222222222222222222222222222222222222 (App almost_ring_theory R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222) (Lambda C_2333222222232333233322222222222222222222222222222222222222222222222222 (Sort Type) (Lambda cO_23332222222323332333222222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Lambda cI_233322222223233323332222222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Lambda cadd_2333222222232333233322222222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222211 C_2333222222232333233322222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222)) (Lambda cmul_23332222222323332333222222222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222211 C_2333222222232333233322222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222)) (Lambda csub_233322222223233323332222222222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222222222211 C_2333222222232333233322222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222)) (Lambda copp_2333222222232333233322222222222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222) (Lambda ceqb_23332222222323332333222222222222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222222211 C_2333222222232333233322222222222222222222222222222222222222222222222222 bool)) (Lambda phi_233322222223233323332222222222222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222) (Lambda CRmorph_2333222222232333233322222222222222222222222222222222222222222222222222222222222 (App ring_morph R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 cO_23332222222323332333222222222222222222222222222222222222222222222222222 cI_233322222223233323332222222222222222222222222222222222222222222222222222 cadd_2333222222232333233322222222222222222222222222222222222222222222222222222 cmul_23332222222323332333222222222222222222222222222222222222222222222222222222 csub_233322222223233323332222222222222222222222222222222222222222222222222222222 copp_2333222222232333233322222222222222222222222222222222222222222222222222222222 ceqb_23332222222323332333222222222222222222222222222222222222222222222222222222222 phi_233322222223233323332222222222222222222222222222222222222222222222222222222222) (Lambda Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 (Sort Type) (Lambda Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222222222221 N Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222) (Lambda rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222222222222222221 R_23332222222323332333222222222222222222222222222222222222222 (Prod out_23332222222323332333222222222222222222222222222222222222222222222222222222222222211 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 R_23332222222323332333222222222222222222222222222222222222222)) (Lambda pow_th_23332222222323332333222222222222222222222222222222222222222222222222222222222222222 (App power_theory R_23332222222323332333222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222) (Lambda cdiv_233322222223233323332222222222222222222222222222222222222222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222222222222222222222222222222222222222221 C_2333222222232333233322222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222222222222222222222222222222222222222222211 C_2333222222232333233322222222222222222222222222222222222222222222222222 (App prod C_2333222222232333233322222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222))) (Lambda div_th_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222 (App div_theory R_23332222222323332333222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 cadd_2333222222232333233322222222222222222222222222222222222222222222222222222 cmul_23332222222323332333222222222222222222222222222222222222222222222222222222 phi_233322222223233323332222222222222222222222222222222222222222222222222222222222 cdiv_233322222223233323332222222222222222222222222222222222222222222222222222222222222222) (Lambda n_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222 nat (Lambda l_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222 (App list R_23332222222323332333222222222222222222222222222222222222222) (Lambda lpe_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 (App list (App prod (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222222) (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222222))) (Lambda pe_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 (App PExpr C_2333222222232333233322222222222222222222222222222222222222222222222222) (Lambda H_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.interp_PElist R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 phi_233322222223233323332222222222222222222222222222222222222222222222222222222222 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 l_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222 lpe_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.norm_subst_spec R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222 Reqe_23332222222323332333222222222222222222222222222222222222222222222222 ARth_233322222223233323332222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 cO_23332222222323332333222222222222222222222222222222222222222222222222222 cI_233322222223233323332222222222222222222222222222222222222222222222222222 cadd_2333222222232333233322222222222222222222222222222222222222222222222222222 cmul_23332222222323332333222222222222222222222222222222222222222222222222222222 csub_233322222223233323332222222222222222222222222222222222222222222222222222222 copp_2333222222232333233322222222222222222222222222222222222222222222222222222222 ceqb_23332222222323332333222222222222222222222222222222222222222222222222222222222 phi_233322222223233323332222222222222222222222222222222222222222222222222222222222 CRmorph_2333222222232333233322222222222222222222222222222222222222222222222222222222222 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 pow_th_23332222222323332333222222222222222222222222222222222222222222222222222222222222222 cdiv_233322222223233323332222222222222222222222222222222222222222222222222222222222222222 div_th_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222 n_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_2333222222232333233322222222222222222222222222222222222222222222222222 cO_23332222222323332333222222222222222222222222222222222222222222222222222 cI_233322222223233323332222222222222222222222222222222222222222222222222222 cadd_2333222222232333233322222222222222222222222222222222222222222222222222222 cmul_23332222222323332333222222222222222222222222222222222222222222222222222222 csub_233322222223233323332222222222222222222222222222222222222222222222222222222 copp_2333222222232333233322222222222222222222222222222222222222222222222222222222 ceqb_23332222222323332333222222222222222222222222222222222222222222222222222222222 cdiv_233322222223233323332222222222222222222222222222222222222222222222222222222222222222 lpe_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222) l_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222 pe_23332222222323332333222222222222222222222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.interp_PElist_ok R_23332222222323332333222222222222222222222222222222222222222 rO_233322222223233323332222222222222222222222222222222222222222 rI_2333222222232333233322222222222222222222222222222222222222222 radd_23332222222323332333222222222222222222222222222222222222222222 rmul_233322222223233323332222222222222222222222222222222222222222222 rsub_2333222222232333233322222222222222222222222222222222222222222222 ropp_23332222222323332333222222222222222222222222222222222222222222222 req_233322222223233323332222222222222222222222222222222222222222222222 Rsth_2333222222232333233322222222222222222222222222222222222222222222222 Reqe_23332222222323332333222222222222222222222222222222222222222222222222 ARth_233322222223233323332222222222222222222222222222222222222222222222222 C_2333222222232333233322222222222222222222222222222222222222222222222222 cO_23332222222323332333222222222222222222222222222222222222222222222222222 cI_233322222223233323332222222222222222222222222222222222222222222222222222 cadd_2333222222232333233322222222222222222222222222222222222222222222222222222 cmul_23332222222323332333222222222222222222222222222222222222222222222222222222 csub_233322222223233323332222222222222222222222222222222222222222222222222222222 copp_2333222222232333233322222222222222222222222222222222222222222222222222222222 ceqb_23332222222323332333222222222222222222222222222222222222222222222222222222222 phi_233322222223233323332222222222222222222222222222222222222222222222222222222222 CRmorph_2333222222232333233322222222222222222222222222222222222222222222222222222222222 Cpow_23332222222323332333222222222222222222222222222222222222222222222222222222222222 Cp_phi_233322222223233323332222222222222222222222222222222222222222222222222222222222222 rpow_2333222222232333233322222222222222222222222222222222222222222222222222222222222222 pow_th_23332222222323332333222222222222222222222222222222222222222222222222222222222222222 cdiv_233322222223233323332222222222222222222222222222222222222222222222222222222222222222 div_th_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222 l_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222 lpe_2333222222232333233322222222222222222222222222222222222222222222222222222222222222222222 H_233322222223233323332222222222222222222222222222222222222222222222222222222222222222222222))))))))))))))))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_polynom.ring_rw_pow_correct (Lambda R_233322222223233323332 (Sort Type) (Lambda rO_2333222222232333233322 R_233322222223233323332 (Lambda rI_23332222222323332333222 R_233322222223233323332 (Lambda radd_233322222223233323332222 (Prod out_233322222223233323332221 R_233322222223233323332 (Prod out_2333222222232333233322211 R_233322222223233323332 R_233322222223233323332)) (Lambda rmul_2333222222232333233322222 (Prod out_2333222222232333233322221 R_233322222223233323332 (Prod out_23332222222323332333222211 R_233322222223233323332 R_233322222223233323332)) (Lambda rsub_23332222222323332333222222 (Prod out_23332222222323332333222221 R_233322222223233323332 (Prod out_233322222223233323332222211 R_233322222223233323332 R_233322222223233323332)) (Lambda ropp_233322222223233323332222222 (Prod out_233322222223233323332222221 R_233322222223233323332 R_233322222223233323332) (Lambda req_2333222222232333233322222222 (Prod out_2333222222232333233322222221 R_233322222223233323332 (Prod out_23332222222323332333222222211 R_233322222223233323332 (Sort Prop))) (Lambda Rsth_23332222222323332333222222222 (App Equivalence R_233322222223233323332 req_2333222222232333233322222222) (Lambda Reqe_233322222223233323332222222222 (App ring_eq_ext R_233322222223233323332 radd_233322222223233323332222 rmul_2333222222232333233322222 ropp_233322222223233323332222222 req_2333222222232333233322222222) (Lambda ARth_2333222222232333233322222222222 (App almost_ring_theory R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222) (Lambda C_23332222222323332333222222222222 (Sort Type) (Lambda cO_233322222223233323332222222222222 C_23332222222323332333222222222222 (Lambda cI_2333222222232333233322222222222222 C_23332222222323332333222222222222 (Lambda cadd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 C_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 C_23332222222323332333222222222222 C_23332222222323332333222222222222)) (Lambda cmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 C_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 C_23332222222323332333222222222222 C_23332222222323332333222222222222)) (Lambda csub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 C_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 C_23332222222323332333222222222222 C_23332222222323332333222222222222)) (Lambda copp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 C_23332222222323332333222222222222 C_23332222222323332333222222222222) (Lambda ceqb_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 C_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 C_23332222222323332333222222222222 bool)) (Lambda phi_2333222222232333233322222222222222222222 (Prod out_2333222222232333233322222222222222222221 C_23332222222323332333222222222222 R_233322222223233323332) (Lambda CRmorph_23332222222323332333222222222222222222222 (App ring_morph R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 C_23332222222323332333222222222222 cO_233322222223233323332222222222222 cI_2333222222232333233322222222222222 cadd_23332222222323332333222222222222222 cmul_233322222223233323332222222222222222 csub_2333222222232333233322222222222222222 copp_23332222222323332333222222222222222222 ceqb_233322222223233323332222222222222222222 phi_2333222222232333233322222222222222222222) (Lambda Cpow_233322222223233323332222222222222222222222 (Sort Type) (Lambda Cp_phi_2333222222232333233322222222222222222222222 (Prod out_2333222222232333233322222222222222222222221 N Cpow_233322222223233323332222222222222222222222) (Lambda rpow_23332222222323332333222222222222222222222222 (Prod out_23332222222323332333222222222222222222222221 R_233322222223233323332 (Prod out_233322222223233323332222222222222222222222211 Cpow_233322222223233323332222222222222222222222 R_233322222223233323332)) (Lambda pow_th_233322222223233323332222222222222222222222222 (App power_theory R_233322222223233323332 rI_23332222222323332333222 rmul_2333222222232333233322222 req_2333222222232333233322222222 Cpow_233322222223233323332222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222 rpow_23332222222323332333222222222222222222222222) (Lambda cdiv_2333222222232333233322222222222222222222222222 (Prod out_2333222222232333233322222222222222222222222221 C_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222222222222211 C_23332222222323332333222222222222 (App prod C_23332222222323332333222222222222 C_23332222222323332333222222222222))) (Lambda div_th_23332222222323332333222222222222222222222222222 (App div_theory R_233322222223233323332 req_2333222222232333233322222222 C_23332222222323332333222222222222 cadd_23332222222323332333222222222222222 cmul_233322222223233323332222222222222222 phi_2333222222232333233322222222222222222222 cdiv_2333222222232333233322222222222222222222222222) (Lambda get_sign_233322222223233323332222222222222222222222222222 (Prod out_233322222223233323332222222222222222222222222221 C_23332222222323332333222222222222 (App option C_23332222222323332333222222222222)) (Lambda get_sign_spec_2333222222232333233322222222222222222222222222222 (App sign_theory C_23332222222323332333222222222222 copp_23332222222323332333222222222222222222 ceqb_233322222223233323332222222222222222222 get_sign_233322222223233323332222222222222222222222222222) (Lambda n_23332222222323332333222222222222222222222222222222 nat (Lambda lH_233322222223233323332222222222222222222222222222222 (App list (App prod (App PExpr C_23332222222323332333222222222222) (App PExpr C_23332222222323332333222222222222))) (Lambda l_2333222222232333233322222222222222222222222222222222 (App list R_233322222223233323332) (Lambda H1_23332222222323332333222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.interp_PElist R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 C_23332222222323332333222222222222 phi_2333222222232333233322222222222222222222 Cpow_233322222223233323332222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222 rpow_23332222222323332333222222222222222222222222 l_2333222222232333233322222222222222222222222222222222 lH_233322222223233323332222222222222222222222222222222) (Lambda lmp_233322222223233323332222222222222222222222222222222222 (App list (App prod (App prod C_23332222222323332333222222222222 Mon) (App Pol C_23332222222323332333222222222222))) (Lambda Heq1_2333222222232333233322222222222222222222222222222222222 (App eq (App list (App prod (App prod C_23332222222323332333222222222222 Mon) (App Pol C_23332222222323332333222222222222))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333222222222222 cO_233322222223233323332222222222222 cI_2333222222232333233322222222222222 cadd_23332222222323332333222222222222222 cmul_233322222223233323332222222222222222 csub_2333222222232333233322222222222222222 copp_23332222222323332333222222222222222222 ceqb_233322222223233323332222222222222222222 cdiv_2333222222232333233322222222222222222222222222 lH_233322222223233323332222222222222222222222222222222) lmp_233322222223233323332222222222222222222222222222222222) (Lambda pe_23332222222323332333222222222222222222222222222222222222 (App PExpr C_23332222222323332333222222222222) (Lambda npe_233322222223233323332222222222222222222222222222222222222 (App Pol C_23332222222323332333222222222222) (Lambda Heq2_2333222222232333233322222222222222222222222222222222222222 (App eq (App Pol C_23332222222323332333222222222222) (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333222222222222 cO_233322222223233323332222222222222 cI_2333222222232333233322222222222222 cadd_23332222222323332333222222222222222 cmul_233322222223233323332222222222222222 csub_2333222222232333233322222222222222222 copp_23332222222323332333222222222222222222 ceqb_233322222223233323332222222222222222222 cdiv_2333222222232333233322222222222222222222222222 n_23332222222323332333222222222222222222222222222222 lmp_233322222223233323332222222222222222222222222222222222 pe_23332222222323332333222222222222222222222222222222222222) npe_233322222223233323332222222222222222222222222222222222222) (App (Lambda lemma_23332222222323332333222222222222222222222222222222222222222 (App req_2333222222232333233322222222 (App Coq.setoid_ring.Ring_polynom.Pphi_pow R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 C_23332222222323332333222222222222 cO_233322222223233323332222222222222 cI_2333222222232333233322222222222222 ceqb_233322222223233323332222222222222222222 phi_2333222222232333233322222222222222222222 Cpow_233322222223233323332222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222 rpow_23332222222323332333222222222222222222222222 get_sign_233322222223233323332222222222222222222222222222 l_2333222222232333233322222222222222222222222222222222 npe_233322222223233323332222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_233322222223233323332 rO_2333222222232333233322 radd_233322222223233323332222 rmul_2333222222232333233322222 C_23332222222323332333222222222222 phi_2333222222232333233322222222222222222222 l_2333222222232333233322222222222222222222222222222222 npe_233322222223233323332222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_233322222223233323332 req_2333222222232333233322222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_233322222223233323332 req_2333222222232333233322222222 Rsth_23332222222323332333222222222) (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 C_23332222222323332333222222222222 phi_2333222222232333233322222222222222222222 Cpow_233322222223233323332222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222 rpow_23332222222323332333222222222222222222222222 l_2333222222232333233322222222222222222222222222222222 pe_23332222222323332333222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi_pow R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 C_23332222222323332333222222222222 cO_233322222223233323332222222222222 cI_2333222222232333233322222222222222 ceqb_233322222223233323332222222222222222222 phi_2333222222232333233322222222222222222222 Cpow_233322222223233323332222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222 rpow_23332222222323332333222222222222222222222222 get_sign_233322222223233323332222222222222222222222222222 l_2333222222232333233322222222222222222222222222222222 npe_233322222223233323332222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_233322222223233323332 rO_2333222222232333233322 radd_233322222223233323332222 rmul_2333222222232333233322222 C_23332222222323332333222222222222 phi_2333222222232333233322222222222222222222 l_2333222222232333233322222222222222222222222222222222 npe_233322222223233323332222222222222222222222222222222222222) lemma_23332222222323332333222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi_pow_ok R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rsth_23332222222323332333222222222 Reqe_233322222223233323332222222222 ARth_2333222222232333233322222222222 C_23332222222323332333222222222222 cO_233322222223233323332222222222222 cI_2333222222232333233322222222222222 cadd_23332222222323332333222222222222222 cmul_233322222223233323332222222222222222 csub_2333222222232333233322222222222222222 copp_23332222222323332333222222222222222222 ceqb_233322222223233323332222222222222222222 phi_2333222222232333233322222222222222222222 CRmorph_23332222222323332333222222222222222222222 Cpow_233322222223233323332222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222 rpow_23332222222323332333222222222222222222222222 pow_th_233322222223233323332222222222222222222222222 get_sign_233322222223233323332222222222222222222222222222 get_sign_spec_2333222222232333233322222222222222222222222222222 npe_233322222223233323332222222222222222222222222222222222222 l_2333222222232333233322222222222222222222222222222222) (App Coq.Init.Logic.eq_ind (App Pol C_23332222222323332333222222222222) (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333222222222222 cO_233322222223233323332222222222222 cI_2333222222232333233322222222222222 cadd_23332222222323332333222222222222222 cmul_233322222223233323332222222222222222 csub_2333222222232333233322222222222222222 copp_23332222222323332333222222222222222222 ceqb_233322222223233323332222222222222222222 cdiv_2333222222232333233322222222222222222222222222 n_23332222222323332333222222222222222222222222222222 lmp_233322222223233323332222222222222222222222222222222222 pe_23332222222323332333222222222222222222222222222222222222) (Lambda npe_23332222222323332333222222222222222222222222222222222222222 (App Pol C_23332222222323332333222222222222) (App req_2333222222232333233322222222 (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 C_23332222222323332333222222222222 phi_2333222222232333233322222222222222222222 Cpow_233322222223233323332222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222 rpow_23332222222323332333222222222222222222222222 l_2333222222232333233322222222222222222222222222222222 pe_23332222222323332333222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_233322222223233323332 rO_2333222222232333233322 radd_233322222223233323332222 rmul_2333222222232333233322222 C_23332222222323332333222222222222 phi_2333222222232333233322222222222222222222 l_2333222222232333233322222222222222222222222222222222 npe_23332222222323332333222222222222222222222222222222222222222))) (App Coq.Init.Logic.eq_ind (App list (App prod (App prod C_23332222222323332333222222222222 Mon) (App Pol C_23332222222323332333222222222222))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333222222222222 cO_233322222223233323332222222222222 cI_2333222222232333233322222222222222 cadd_23332222222323332333222222222222222 cmul_233322222223233323332222222222222222 csub_2333222222232333233322222222222222222 copp_23332222222323332333222222222222222222 ceqb_233322222223233323332222222222222222222 cdiv_2333222222232333233322222222222222222222222222 lH_233322222223233323332222222222222222222222222222222) (Lambda lmp_23332222222323332333222222222222222222222222222222222222222 (App list (App prod (App prod C_23332222222323332333222222222222 Mon) (App Pol C_23332222222323332333222222222222))) (App req_2333222222232333233322222222 (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 C_23332222222323332333222222222222 phi_2333222222232333233322222222222222222222 Cpow_233322222223233323332222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222 rpow_23332222222323332333222222222222222222222222 l_2333222222232333233322222222222222222222222222222222 pe_23332222222323332333222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_233322222223233323332 rO_2333222222232333233322 radd_233322222223233323332222 rmul_2333222222232333233322222 C_23332222222323332333222222222222 phi_2333222222232333233322222222222222222222 l_2333222222232333233322222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333222222222222 cO_233322222223233323332222222222222 cI_2333222222232333233322222222222222 cadd_23332222222323332333222222222222222 cmul_233322222223233323332222222222222222 csub_2333222222232333233322222222222222222 copp_23332222222323332333222222222222222222 ceqb_233322222223233323332222222222222222222 cdiv_2333222222232333233322222222222222222222222222 n_23332222222323332333222222222222222222222222222222 lmp_23332222222323332333222222222222222222222222222222222222222 pe_23332222222323332333222222222222222222222222222222222222)))) (App Coq.setoid_ring.Ring_polynom.norm_subst_ok R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rsth_23332222222323332333222222222 Reqe_233322222223233323332222222222 ARth_2333222222232333233322222222222 C_23332222222323332333222222222222 cO_233322222223233323332222222222222 cI_2333222222232333233322222222222222 cadd_23332222222323332333222222222222222 cmul_233322222223233323332222222222222222 csub_2333222222232333233322222222222222222 copp_23332222222323332333222222222222222222 ceqb_233322222223233323332222222222222222222 phi_2333222222232333233322222222222222222222 CRmorph_23332222222323332333222222222222222222222 Cpow_233322222223233323332222222222222222222222 Cp_phi_2333222222232333233322222222222222222222222 rpow_23332222222323332333222222222222222222222222 pow_th_233322222223233323332222222222222222222222222 cdiv_2333222222232333233322222222222222222222222222 div_th_23332222222323332333222222222222222222222222222 n_23332222222323332333222222222222222222222222222222 l_2333222222232333233322222222222222222222222222222222 lH_233322222223233323332222222222222222222222222222222 pe_23332222222323332333222222222222222222222222222222222222 H1_23332222222323332333222222222222222222222222222222222) lmp_233322222223233323332222222222222222222222222222222222 Heq1_2333222222232333233322222222222222222222222222222222222) npe_233322222223233323332222222222222222222222222222222222222 Heq2_2333222222232333233322222222222222222222222222222222222222))))))))))))))))))))))))))))))))))))))))) (Definition Coq.Classes.RelationClasses.eq_equivalence (Lambda A_2333222222232333233322 (Sort Type) (App Build_Equivalence A_2333222222232333233322 (App eq A_2333222222232333233322) (App Coq.Classes.RelationClasses.eq_Reflexive A_2333222222232333233322) (App Coq.Classes.RelationClasses.eq_Symmetric A_2333222222232333233322) (App Coq.Classes.RelationClasses.eq_Transitive A_2333222222232333233322)))) (Definition Coq.setoid_ring.Ring_theory.Eqsth (Lambda R_233322222223233323332 (Sort Type) (App Coq.Classes.RelationClasses.eq_equivalence R_233322222223233323332))) (Definition Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (LetIn U_2333222222232333233322222222223 (Sort Type) (Sort Type) (Lambda A_23332222222323332333222222222232 U_2333222222232333233322222222223 (Lambda R_233322222223233323332222222222322 (App Coq.Relations.Relation_Definitions.relation A_23332222222323332333222222222232) (Lambda H_2333222222232333233322222222223222 (App Coq.Classes.RelationClasses.Transitive A_23332222222323332333222222222232 R_233322222223233323332222222222322) (App (Lambda R_23332222222323332333222222222232222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323332333222222222232) (Lambda H_233322222223233323332222222222322222 (App Coq.Classes.RelationClasses.Transitive A_23332222222323332333222222222232 R_23332222222323332333222222222232222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism_obligation_1 A_23332222222323332333222222222232 R_23332222222323332333222222222232222 H_233322222223233323332222222222322222))) R_233322222223233323332222222222322 H_2333222222232333233322222222223222)))))) (Definition Coq.Classes.RelationClasses.eq_Transitive (Lambda A_2333222222232333233322222222222 (Sort Type) (App Coq.Init.Logic.eq_trans A_2333222222232333233322222222222))) (Definition Coq.Classes.Morphisms.reflexive_proper (LetIn U_2333222222232333233322222222223 (Sort Type) (Sort Type) (Lambda A_23332222222323332333222222222232 U_2333222222232333233322222222223 (Lambda R_233322222223233323332222222222322 (App Coq.Relations.Relation_Definitions.relation A_23332222222323332333222222222232) (Lambda H_2333222222232333233322222222223222 (App Coq.Classes.RelationClasses.Reflexive A_23332222222323332333222222222232 R_233322222223233323332222222222322) (Lambda x_23332222222323332333222222222232222 A_23332222222323332333222222222232 (App (Lambda H0_233322222223233323332222222222322222 (App R_233322222223233323332222222222322 x_23332222222323332333222222222232222 x_23332222222323332333222222222232222) H0_233322222223233323332222222222322222) (App H_2333222222232333233322222222223222 x_23332222222323332333222222222232222)))))))) (Definition Coq.Classes.Morphisms.reflexive_eq_dom_reflexive (LetIn U_2333222222232333233322222222223 (Sort Type) (Sort Type) (Lambda A_23332222222323332333222222222232 U_2333222222232333233322222222223 (Lambda B_233322222223233323332222222222322 U_2333222222232333233322222222223 (Lambda R'_2333222222232333233322222222223222 (App Coq.Relations.Relation_Definitions.relation B_233322222223233323332222222222322) (Lambda H_23332222222323332333222222222232222 (App Coq.Classes.RelationClasses.Reflexive B_233322222223233323332222222222322 R'_2333222222232333233322222222223222) (Cast (Cast (Lambda x_233322222223233323332222222222322222 (Prod out_233322222223233323332222222222322221 A_23332222222323332333222222222232 B_233322222223233323332222222222322) (Cast (Lambda x0_2333222222232333233322222222223222222 A_23332222222323332333222222222232 (Lambda y_23332222222323332333222222222232222222 A_23332222222323332333222222222232 (Lambda H0_233322222223233323332222222222322222222 (App eq A_23332222222323332333222222222232 x0_2333222222232333233322222222223222222 y_23332222222323332333222222222232222222) (Cast (Cast (App Coq.Init.Logic.eq_ind_r A_23332222222323332333222222222232 y_23332222222323332333222222222232222222 (Lambda x0_2333222222232333233322222222223222222222 A_23332222222323332333222222222232 (App R'_2333222222232333233322222222223222 (App x_233322222223233323332222222222322222 x0_2333222222232333233322222222223222222222) (App x_233322222223233323332222222222322222 y_23332222222323332333222222222232222222))) (App H_23332222222323332333222222222232222 (App x_233322222223233323332222222222322222 y_23332222222323332333222222222232222222)) x0_2333222222232333233322222222223222222 H0_233322222223233323332222222222322222222) REVERTcast (App R'_2333222222232333233322222222223222 (App x_233322222223233323332222222222322222 x0_2333222222232333233322222222223222222) (App x_233322222223233323332222222222322222 y_23332222222323332333222222222232222222))) REVERTcast (App R'_2333222222232333233322222222223222 (App x_233322222223233323332222222222322222 x0_2333222222232333233322222222223222222) (App x_233322222223233323332222222222322222 y_23332222222323332333222222222232222222)))))) REVERTcast (App Coq.Classes.Morphisms.respectful A_23332222222323332333222222222232 B_233322222223233323332222222222322 (App eq A_23332222222323332333222222222232) R'_2333222222232333233322222222223222 x_233322222223233323332222222222322222 x_233322222223233323332222222222322222))) REVERTcast (App Coq.Classes.RelationClasses.Reflexive (Prod out_233322222223233323332222222222322221 A_23332222222323332333222222222232 B_233322222223233323332222222222322) (App Coq.Classes.Morphisms.respectful A_23332222222323332333222222222232 B_233322222223233323332222222222322 (App eq A_23332222222323332333222222222232) R'_2333222222232333233322222222223222))) REVERTcast (App Coq.Classes.RelationClasses.Reflexive (Prod out_233322222223233323332222222222322221 A_23332222222323332333222222222232 B_233322222223233323332222222222322) (App Coq.Classes.Morphisms.respectful A_23332222222323332333222222222232 B_233322222223233323332222222222322 (App eq A_23332222222323332333222222222232) R'_2333222222232333233322222222223222))))))))) (Definition Coq.Classes.RelationClasses.eq_Reflexive (Lambda A_2333222222232333233322222222222 (Sort Type) (App eq_refl A_2333222222232333233322222222222))) (Definition Coq.setoid_ring.Ring_theory.Eq_ext (Lambda R_233322222223233323332 (Sort Type) (Lambda radd_2333222222232333233322 (Prod out_2333222222232333233321 R_233322222223233323332 (Prod out_23332222222323332333211 R_233322222223233323332 R_233322222223233323332)) (Lambda rmul_23332222222323332333222 (Prod out_23332222222323332333221 R_233322222223233323332 (Prod out_233322222223233323332211 R_233322222223233323332 R_233322222223233323332)) (Lambda ropp_233322222223233323332222 (Prod out_233322222223233323332221 R_233322222223233323332 R_233322222223233323332) (App mk_reqe R_233322222223233323332 radd_2333222222232333233322 rmul_23332222222323332333222 ropp_233322222223233323332222 (App eq R_233322222223233323332) (Cast (Cast (Lambda x_2333222222232333233322222 R_233322222223233323332 (Lambda y_23332222222323332333222222 R_233322222223233323332 (Lambda H_233322222223233323332222222 (App eq R_233322222223233323332 x_2333222222232333233322222 y_23332222222323332333222222) (Cast (Lambda x0_2333222222232333233322222222 R_233322222223233323332 (Lambda y0_23332222222323332333222222222 R_233322222223233323332 (Lambda H0_233322222223233323332222222222 (App eq R_233322222223233323332 x0_2333222222232333233322222222 y0_23332222222323332333222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_233322222223233323332 (App eq R_233322222223233323332) (App Coq.Classes.RelationClasses.eq_Transitive R_233322222223233323332) (App radd_2333222222232333233322 x_2333222222232333233322222 x0_2333222222232333233322222222) (App radd_2333222222232333233322 x_2333222222232333233322222 y0_23332222222323332333222222222) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_233322222223233323332 (Prod out_2333222222232333233322222222221 R_233322222223233323332 R_233322222223233323332) (App eq R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332)) radd_2333222222232333233322 (App Coq.Classes.Morphisms.reflexive_proper (Prod out_2333222222232333233322222222221 R_233322222223233323332 (Prod out_23332222222323332333222222222211 R_233322222223233323332 R_233322222223233323332)) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 (Prod out_2333222222232333233322222222221 R_233322222223233323332 R_233322222223233323332) (App eq R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332))) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive R_233322222223233323332 (Prod out_2333222222232333233322222222221 R_233322222223233323332 R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332)) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App Coq.Classes.RelationClasses.eq_Reflexive R_233322222223233323332))) radd_2333222222232333233322) x_2333222222232333233322222 (App Coq.Classes.Morphisms.eq_proper_proxy R_233322222223233323332 x_2333222222232333233322222) x0_2333222222232333233322222222 y0_23332222222323332333222222222 H0_233322222223233323332222222222) (App radd_2333222222232333233322 y_23332222222323332333222222 y0_23332222222323332333222222222) (App radd_2333222222232333233322 y_23332222222323332333222222 y0_23332222222323332333222222222) (App Coq.Classes.Morphisms.eq_proper_proxy R_233322222223233323332 (App radd_2333222222232333233322 y_23332222222323332333222222 y0_23332222222323332333222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_233322222223233323332 (App eq R_233322222223233323332) (App Coq.Classes.RelationClasses.eq_Transitive R_233322222223233323332) (App radd_2333222222232333233322 x_2333222222232333233322222 y0_23332222222323332333222222222) (App radd_2333222222232333233322 y_23332222222323332333222222 y0_23332222222323332333222222222) (App Coq.Classes.Morphisms.reflexive_proper (Prod out_2333222222232333233322222222221 R_233322222223233323332 (Prod out_23332222222323332333222222222211 R_233322222223233323332 R_233322222223233323332)) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 (Prod out_2333222222232333233322222222221 R_233322222223233323332 R_233322222223233323332) (App eq R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332))) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive R_233322222223233323332 (Prod out_2333222222232333233322222222221 R_233322222223233323332 R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332)) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App Coq.Classes.RelationClasses.eq_Reflexive R_233322222223233323332))) radd_2333222222232333233322 x_2333222222232333233322222 y_23332222222323332333222222 H_233322222223233323332222222 y0_23332222222323332333222222222 y0_23332222222323332333222222222 (App Coq.Classes.Morphisms.eq_proper_proxy R_233322222223233323332 y0_23332222222323332333222222222)) (App radd_2333222222232333233322 y_23332222222323332333222222 y0_23332222222323332333222222222) (App radd_2333222222232333233322 y_23332222222323332333222222 y0_23332222222323332333222222222) (App Coq.Classes.Morphisms.eq_proper_proxy R_233322222223233323332 (App radd_2333222222232333233322 y_23332222222323332333222222 y0_23332222222323332333222222222)) (App eq_refl R_233322222223233323332 (App radd_2333222222232333233322 y_23332222222323332333222222 y0_23332222222323332333222222222))))))) REVERTcast (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332) (App radd_2333222222232333233322 x_2333222222232333233322222) (App radd_2333222222232333233322 y_23332222222323332333222222)))))) REVERTcast (App Coq.Classes.Morphisms.respectful R_233322222223233323332 (Prod out_2333222222232333233322221 R_233322222223233323332 R_233322222223233323332) (App eq R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332)) radd_2333222222232333233322 radd_2333222222232333233322)) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_2333222222232333233322221 R_233322222223233323332 (Prod out_23332222222323332333222211 R_233322222223233323332 R_233322222223233323332)) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 (Prod out_2333222222232333233322221 R_233322222223233323332 R_233322222223233323332) (App eq R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332))) radd_2333222222232333233322)) (Cast (Cast (Lambda x_2333222222232333233322222 R_233322222223233323332 (Lambda y_23332222222323332333222222 R_233322222223233323332 (Lambda H_233322222223233323332222222 (App eq R_233322222223233323332 x_2333222222232333233322222 y_23332222222323332333222222) (Cast (Lambda x0_2333222222232333233322222222 R_233322222223233323332 (Lambda y0_23332222222323332333222222222 R_233322222223233323332 (Lambda H0_233322222223233323332222222222 (App eq R_233322222223233323332 x0_2333222222232333233322222222 y0_23332222222323332333222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_233322222223233323332 (App eq R_233322222223233323332) (App Coq.Classes.RelationClasses.eq_Transitive R_233322222223233323332) (App rmul_23332222222323332333222 x_2333222222232333233322222 x0_2333222222232333233322222222) (App rmul_23332222222323332333222 x_2333222222232333233322222 y0_23332222222323332333222222222) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_233322222223233323332 (Prod out_2333222222232333233322222222221 R_233322222223233323332 R_233322222223233323332) (App eq R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332)) rmul_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper (Prod out_2333222222232333233322222222221 R_233322222223233323332 (Prod out_23332222222323332333222222222211 R_233322222223233323332 R_233322222223233323332)) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 (Prod out_2333222222232333233322222222221 R_233322222223233323332 R_233322222223233323332) (App eq R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332))) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive R_233322222223233323332 (Prod out_2333222222232333233322222222221 R_233322222223233323332 R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332)) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App Coq.Classes.RelationClasses.eq_Reflexive R_233322222223233323332))) rmul_23332222222323332333222) x_2333222222232333233322222 (App Coq.Classes.Morphisms.eq_proper_proxy R_233322222223233323332 x_2333222222232333233322222) x0_2333222222232333233322222222 y0_23332222222323332333222222222 H0_233322222223233323332222222222) (App rmul_23332222222323332333222 y_23332222222323332333222222 y0_23332222222323332333222222222) (App rmul_23332222222323332333222 y_23332222222323332333222222 y0_23332222222323332333222222222) (App Coq.Classes.Morphisms.eq_proper_proxy R_233322222223233323332 (App rmul_23332222222323332333222 y_23332222222323332333222222 y0_23332222222323332333222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_233322222223233323332 (App eq R_233322222223233323332) (App Coq.Classes.RelationClasses.eq_Transitive R_233322222223233323332) (App rmul_23332222222323332333222 x_2333222222232333233322222 y0_23332222222323332333222222222) (App rmul_23332222222323332333222 y_23332222222323332333222222 y0_23332222222323332333222222222) (App Coq.Classes.Morphisms.reflexive_proper (Prod out_2333222222232333233322222222221 R_233322222223233323332 (Prod out_23332222222323332333222222222211 R_233322222223233323332 R_233322222223233323332)) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 (Prod out_2333222222232333233322222222221 R_233322222223233323332 R_233322222223233323332) (App eq R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332))) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive R_233322222223233323332 (Prod out_2333222222232333233322222222221 R_233322222223233323332 R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332)) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App Coq.Classes.RelationClasses.eq_Reflexive R_233322222223233323332))) rmul_23332222222323332333222 x_2333222222232333233322222 y_23332222222323332333222222 H_233322222223233323332222222 y0_23332222222323332333222222222 y0_23332222222323332333222222222 (App Coq.Classes.Morphisms.eq_proper_proxy R_233322222223233323332 y0_23332222222323332333222222222)) (App rmul_23332222222323332333222 y_23332222222323332333222222 y0_23332222222323332333222222222) (App rmul_23332222222323332333222 y_23332222222323332333222222 y0_23332222222323332333222222222) (App Coq.Classes.Morphisms.eq_proper_proxy R_233322222223233323332 (App rmul_23332222222323332333222 y_23332222222323332333222222 y0_23332222222323332333222222222)) (App eq_refl R_233322222223233323332 (App rmul_23332222222323332333222 y_23332222222323332333222222 y0_23332222222323332333222222222))))))) REVERTcast (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332) (App rmul_23332222222323332333222 x_2333222222232333233322222) (App rmul_23332222222323332333222 y_23332222222323332333222222)))))) REVERTcast (App Coq.Classes.Morphisms.respectful R_233322222223233323332 (Prod out_2333222222232333233322221 R_233322222223233323332 R_233322222223233323332) (App eq R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332)) rmul_23332222222323332333222 rmul_23332222222323332333222)) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_2333222222232333233322221 R_233322222223233323332 (Prod out_23332222222323332333222211 R_233322222223233323332 R_233322222223233323332)) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 (Prod out_2333222222232333233322221 R_233322222223233323332 R_233322222223233323332) (App eq R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332))) rmul_23332222222323332333222)) (Cast (Cast (Lambda x_2333222222232333233322222 R_233322222223233323332 (Lambda y_23332222222323332333222222 R_233322222223233323332 (Lambda H_233322222223233323332222222 (App eq R_233322222223233323332 x_2333222222232333233322222 y_23332222222323332333222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_233322222223233323332 (App eq R_233322222223233323332) (App Coq.Classes.RelationClasses.eq_Transitive R_233322222223233323332) (App ropp_233322222223233323332222 x_2333222222232333233322222) (App ropp_233322222223233323332222 y_23332222222323332333222222) (App Coq.Classes.Morphisms.reflexive_proper (Prod out_2333222222232333233322222221 R_233322222223233323332 R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332)) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App Coq.Classes.RelationClasses.eq_Reflexive R_233322222223233323332)) ropp_233322222223233323332222 x_2333222222232333233322222 y_23332222222323332333222222 H_233322222223233323332222222) (App ropp_233322222223233323332222 y_23332222222323332333222222) (App ropp_233322222223233323332222 y_23332222222323332333222222) (App Coq.Classes.Morphisms.eq_proper_proxy R_233322222223233323332 (App ropp_233322222223233323332222 y_23332222222323332333222222)) (App eq_refl R_233322222223233323332 (App ropp_233322222223233323332222 y_23332222222323332333222222)))))) REVERTcast (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332) ropp_233322222223233323332222 ropp_233322222223233323332222)) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_2333222222232333233322221 R_233322222223233323332 R_233322222223233323332) (App Coq.Classes.Morphisms.respectful R_233322222223233323332 R_233322222223233323332 (App eq R_233322222223233323332) (App eq R_233322222223233323332)) ropp_233322222223233323332222)))))))) (Definition Coq.setoid_ring.Ring_theory.Radd_0_l (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda r_2333222222232333233322222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Case 8 (Lambda r_23332222222323332333222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 x_233322222223233323332222222222222222222221) x_233322222223233323332222222222222222222221))) (CaseMatch r_2333222222232333233322222222222222222222) (CaseBranches (Lambda Radd_0_l_23332222222323332333222222222222222222222 (Prod x_23332222222323332333222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 x_23332222222323332333222222222222222222221) x_23332222222323332333222222222222222222221)) (Lambda Radd_comm_233322222223233323332222222222222222222222 (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App radd_23332222222323332333222222222222222 y_2333222222232333233322222222222222222222211 x_233322222223233323332222222222222222222221)))) (Lambda Radd_assoc_2333222222232333233322222222222222222222222 (Prod x_2333222222232333233322222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222211 z_233322222223233323332222222222222222222222111)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 y_23332222222323332333222222222222222222222211) z_233322222223233323332222222222222222222222111))))) (Lambda Rmul_1_l_23332222222323332333222222222222222222222222 (Prod x_23332222222323332333222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_23332222222323332333222222222222222222222221) x_23332222222323332333222222222222222222222221)) (Lambda Rmul_comm_233322222223233323332222222222222222222222222 (Prod x_233322222223233323332222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222222221 y_2333222222232333233322222222222222222222222211) (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222222211 x_233322222223233323332222222222222222222222221)))) (Lambda Rmul_assoc_2333222222232333233322222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 (App rmul_233322222223233323332222222222222222 y_23332222222323332333222222222222222222222222211 z_233322222223233323332222222222222222222222222111)) (App rmul_233322222223233323332222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 y_23332222222323332333222222222222222222222222211) z_233322222223233323332222222222222222222222222111))))) (Lambda Rdistr_l_23332222222323332333222222222222222222222222222 (Prod x_23332222222323332333222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_233322222223233323332222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_2333222222232333233322222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_23332222222323332333222222222222222222222222221 y_233322222223233323332222222222222222222222222211) z_2333222222232333233322222222222222222222222222111) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_23332222222323332333222222222222222222222222221 z_2333222222232333233322222222222222222222222222111) (App rmul_233322222223233323332222222222222222 y_233322222223233323332222222222222222222222222211 z_2333222222232333233322222222222222222222222222111)))))) (Lambda Rsub_def_233322222223233323332222222222222222222222222222 (Prod x_233322222223233323332222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rsub_2333222222232333233322222222222222222 x_233322222223233323332222222222222222222222222221 y_2333222222232333233322222222222222222222222222211) (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 y_2333222222232333233322222222222222222222222222211))))) (Lambda Ropp_def_2333222222232333233322222222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222222221)) rO_233322222223233323332222222222222)) Radd_0_l_23332222222323332333222222222222222222222))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Radd_comm (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda r_2333222222232333233322222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Case 8 (Lambda r_23332222222323332333222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App radd_23332222222323332333222222222222222 y_2333222222232333233322222222222222222222211 x_233322222223233323332222222222222222222221))))) (CaseMatch r_2333222222232333233322222222222222222222) (CaseBranches (Lambda Radd_0_l_23332222222323332333222222222222222222222 (Prod x_23332222222323332333222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 x_23332222222323332333222222222222222222221) x_23332222222323332333222222222222222222221)) (Lambda Radd_comm_233322222223233323332222222222222222222222 (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App radd_23332222222323332333222222222222222 y_2333222222232333233322222222222222222222211 x_233322222223233323332222222222222222222221)))) (Lambda Radd_assoc_2333222222232333233322222222222222222222222 (Prod x_2333222222232333233322222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222211 z_233322222223233323332222222222222222222222111)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 y_23332222222323332333222222222222222222222211) z_233322222223233323332222222222222222222222111))))) (Lambda Rmul_1_l_23332222222323332333222222222222222222222222 (Prod x_23332222222323332333222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_23332222222323332333222222222222222222222221) x_23332222222323332333222222222222222222222221)) (Lambda Rmul_comm_233322222223233323332222222222222222222222222 (Prod x_233322222223233323332222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222222221 y_2333222222232333233322222222222222222222222211) (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222222211 x_233322222223233323332222222222222222222222221)))) (Lambda Rmul_assoc_2333222222232333233322222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 (App rmul_233322222223233323332222222222222222 y_23332222222323332333222222222222222222222222211 z_233322222223233323332222222222222222222222222111)) (App rmul_233322222223233323332222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 y_23332222222323332333222222222222222222222222211) z_233322222223233323332222222222222222222222222111))))) (Lambda Rdistr_l_23332222222323332333222222222222222222222222222 (Prod x_23332222222323332333222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_233322222223233323332222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_2333222222232333233322222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_23332222222323332333222222222222222222222222221 y_233322222223233323332222222222222222222222222211) z_2333222222232333233322222222222222222222222222111) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_23332222222323332333222222222222222222222222221 z_2333222222232333233322222222222222222222222222111) (App rmul_233322222223233323332222222222222222 y_233322222223233323332222222222222222222222222211 z_2333222222232333233322222222222222222222222222111)))))) (Lambda Rsub_def_233322222223233323332222222222222222222222222222 (Prod x_233322222223233323332222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rsub_2333222222232333233322222222222222222 x_233322222223233323332222222222222222222222222221 y_2333222222232333233322222222222222222222222222211) (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 y_2333222222232333233322222222222222222222222222211))))) (Lambda Ropp_def_2333222222232333233322222222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222222221)) rO_233322222223233323332222222222222)) Radd_comm_233322222223233323332222222222222222222222))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Radd_assoc (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda r_2333222222232333233322222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Case 8 (Lambda r_23332222222323332333222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (Prod z_23332222222323332333222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 (App radd_23332222222323332333222222222222222 y_2333222222232333233322222222222222222222211 z_23332222222323332333222222222222222222222111)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) z_23332222222323332333222222222222222222222111)))))) (CaseMatch r_2333222222232333233322222222222222222222) (CaseBranches (Lambda Radd_0_l_23332222222323332333222222222222222222222 (Prod x_23332222222323332333222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 x_23332222222323332333222222222222222222221) x_23332222222323332333222222222222222222221)) (Lambda Radd_comm_233322222223233323332222222222222222222222 (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App radd_23332222222323332333222222222222222 y_2333222222232333233322222222222222222222211 x_233322222223233323332222222222222222222221)))) (Lambda Radd_assoc_2333222222232333233322222222222222222222222 (Prod x_2333222222232333233322222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222211 z_233322222223233323332222222222222222222222111)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 y_23332222222323332333222222222222222222222211) z_233322222223233323332222222222222222222222111))))) (Lambda Rmul_1_l_23332222222323332333222222222222222222222222 (Prod x_23332222222323332333222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_23332222222323332333222222222222222222222221) x_23332222222323332333222222222222222222222221)) (Lambda Rmul_comm_233322222223233323332222222222222222222222222 (Prod x_233322222223233323332222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222222221 y_2333222222232333233322222222222222222222222211) (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222222211 x_233322222223233323332222222222222222222222221)))) (Lambda Rmul_assoc_2333222222232333233322222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 (App rmul_233322222223233323332222222222222222 y_23332222222323332333222222222222222222222222211 z_233322222223233323332222222222222222222222222111)) (App rmul_233322222223233323332222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 y_23332222222323332333222222222222222222222222211) z_233322222223233323332222222222222222222222222111))))) (Lambda Rdistr_l_23332222222323332333222222222222222222222222222 (Prod x_23332222222323332333222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_233322222223233323332222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_2333222222232333233322222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_23332222222323332333222222222222222222222222221 y_233322222223233323332222222222222222222222222211) z_2333222222232333233322222222222222222222222222111) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_23332222222323332333222222222222222222222222221 z_2333222222232333233322222222222222222222222222111) (App rmul_233322222223233323332222222222222222 y_233322222223233323332222222222222222222222222211 z_2333222222232333233322222222222222222222222222111)))))) (Lambda Rsub_def_233322222223233323332222222222222222222222222222 (Prod x_233322222223233323332222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rsub_2333222222232333233322222222222222222 x_233322222223233323332222222222222222222222222221 y_2333222222232333233322222222222222222222222222211) (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 y_2333222222232333233322222222222222222222222222211))))) (Lambda Ropp_def_2333222222232333233322222222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222222221)) rO_233322222223233323332222222222222)) Radd_assoc_2333222222232333233322222222222222222222222))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Rmul_1_l (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda r_2333222222232333233322222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Case 8 (Lambda r_23332222222323332333222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_233322222223233323332222222222222222222221) x_233322222223233323332222222222222222222221))) (CaseMatch r_2333222222232333233322222222222222222222) (CaseBranches (Lambda Radd_0_l_23332222222323332333222222222222222222222 (Prod x_23332222222323332333222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 x_23332222222323332333222222222222222222221) x_23332222222323332333222222222222222222221)) (Lambda Radd_comm_233322222223233323332222222222222222222222 (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App radd_23332222222323332333222222222222222 y_2333222222232333233322222222222222222222211 x_233322222223233323332222222222222222222221)))) (Lambda Radd_assoc_2333222222232333233322222222222222222222222 (Prod x_2333222222232333233322222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222211 z_233322222223233323332222222222222222222222111)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 y_23332222222323332333222222222222222222222211) z_233322222223233323332222222222222222222222111))))) (Lambda Rmul_1_l_23332222222323332333222222222222222222222222 (Prod x_23332222222323332333222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_23332222222323332333222222222222222222222221) x_23332222222323332333222222222222222222222221)) (Lambda Rmul_comm_233322222223233323332222222222222222222222222 (Prod x_233322222223233323332222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222222221 y_2333222222232333233322222222222222222222222211) (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222222211 x_233322222223233323332222222222222222222222221)))) (Lambda Rmul_assoc_2333222222232333233322222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 (App rmul_233322222223233323332222222222222222 y_23332222222323332333222222222222222222222222211 z_233322222223233323332222222222222222222222222111)) (App rmul_233322222223233323332222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 y_23332222222323332333222222222222222222222222211) z_233322222223233323332222222222222222222222222111))))) (Lambda Rdistr_l_23332222222323332333222222222222222222222222222 (Prod x_23332222222323332333222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_233322222223233323332222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_2333222222232333233322222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_23332222222323332333222222222222222222222222221 y_233322222223233323332222222222222222222222222211) z_2333222222232333233322222222222222222222222222111) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_23332222222323332333222222222222222222222222221 z_2333222222232333233322222222222222222222222222111) (App rmul_233322222223233323332222222222222222 y_233322222223233323332222222222222222222222222211 z_2333222222232333233322222222222222222222222222111)))))) (Lambda Rsub_def_233322222223233323332222222222222222222222222222 (Prod x_233322222223233323332222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rsub_2333222222232333233322222222222222222 x_233322222223233323332222222222222222222222222221 y_2333222222232333233322222222222222222222222222211) (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 y_2333222222232333233322222222222222222222222222211))))) (Lambda Ropp_def_2333222222232333233322222222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222222221)) rO_233322222223233323332222222222222)) Rmul_1_l_23332222222323332333222222222222222222222222))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Rmul_0_l (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda Rsth_2333222222232333233322222222222222222222 (App Equivalence R_23332222222323332333222222222222 req_233322222223233323332222222222222222222) (Lambda Reqe_23332222222323332333222222222222222222222 (App ring_eq_ext R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Lambda Rth_233322222223233323332222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Lambda x_2333222222232333233322222222222222222222222 R_23332222222323332333222222222222 (LetIn H_23332222222323332333222222222222222222222223 (Cast (App (Lambda lemma_23332222222323332333222222222222222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222)) lemma_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Rdistr_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222) (App (Lambda lemma_23332222222323332333222222222222222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222)) (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222 lemma_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Rmul_1_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 x_2333222222232333233322222222222222222222222) (App (Lambda lemma_23332222222323332333222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) lemma_23332222222323332333222222222222222222222222))) (App Coq.setoid_ring.Ring_theory.Radd_assoc R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App (Lambda lemma_23332222222323332333222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) rO_233322222223233323332222222222222) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) rO_233322222223233323332222222222222 lemma_23332222222323332333222222222222222222222222))) (App Coq.setoid_ring.Ring_theory.Ropp_def R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 x_2333222222232333233322222222222222222222222) (App (Lambda lemma_23332222222323332333222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222)) lemma_23332222222323332333222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.Radd_comm R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222) (App (Lambda lemma_23332222222323332333222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222)) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222)) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) lemma_23332222222323332333222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.Radd_0_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222)) (App Coq.Classes.RelationClasses.reflexivity R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222)))))))) REVERTcast (App Coq.Classes.SetoidTactics.default_relation R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.SetoidTactics.equivalence_default R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)))) (App Coq.Classes.SetoidTactics.default_relation R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.SetoidTactics.equivalence_default R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App (Cast (Lambda Heq_233322222223233323332222222222222222222222232 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) Heq_233322222223233323332222222222222222222222232 rO_233322222223233323332222222222222 rO_233322222223233323332222222222222 (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 rO_233322222223233323332222222222222) (App (Lambda lemma_2333222222232333233322222222222222222222222322 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) rI_2333222222232333233322222222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) x_2333222222232333233322222222222222222222222) (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222) (App Coq.setoid_ring.Ring_theory.rmul_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) rI_2333222222232333233322222222222222 lemma_2333222222232333233322222222222222222222222322 x_2333222222232333233322222222222222222222222 x_2333222222232333233322222222222222222222222 (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) rO_233322222223233323332222222222222 rO_233322222223233323332222222222222 (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 rO_233322222223233323332222222222222))) (App Coq.setoid_ring.Ring_theory.Radd_0_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 rI_2333222222232333233322222222222222) (App (Lambda lemma_2333222222232333233322222222222222222222222322 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222 lemma_2333222222232333233322222222222222222222222322 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) rO_233322222223233323332222222222222 rO_233322222223233323332222222222222 (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 rO_233322222223233323332222222222222))) (App Coq.setoid_ring.Ring_theory.Rmul_1_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 x_2333222222232333233322222222222222222222222) (App (Lambda lemma_2333222222232333233322222222222222222222222322 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) rO_233322222223233323332222222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) rO_233322222223233323332222222222222 lemma_2333222222232333233322222222222222222222222322 rO_233322222223233323332222222222222 rO_233322222223233323332222222222222 (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 rO_233322222223233323332222222222222))) (App Coq.setoid_ring.Ring_theory.Ropp_def R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 x_2333222222232333233322222222222222222222222) (App Coq.Classes.RelationClasses.reflexivity R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) rO_233322222223233323332222222222222)))))) REVERTcast (Prod out_233322222223233323332222222222222222222222231 (App Coq.Classes.SetoidTactics.default_relation R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.SetoidTactics.equivalence_default R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222))) H_23332222222323332333222222222222222222222223))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Rmul_comm (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda r_2333222222232333233322222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Case 8 (Lambda r_23332222222323332333222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222211 x_233322222223233323332222222222222222222221))))) (CaseMatch r_2333222222232333233322222222222222222222) (CaseBranches (Lambda Radd_0_l_23332222222323332333222222222222222222222 (Prod x_23332222222323332333222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 x_23332222222323332333222222222222222222221) x_23332222222323332333222222222222222222221)) (Lambda Radd_comm_233322222223233323332222222222222222222222 (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App radd_23332222222323332333222222222222222 y_2333222222232333233322222222222222222222211 x_233322222223233323332222222222222222222221)))) (Lambda Radd_assoc_2333222222232333233322222222222222222222222 (Prod x_2333222222232333233322222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222211 z_233322222223233323332222222222222222222222111)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 y_23332222222323332333222222222222222222222211) z_233322222223233323332222222222222222222222111))))) (Lambda Rmul_1_l_23332222222323332333222222222222222222222222 (Prod x_23332222222323332333222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_23332222222323332333222222222222222222222221) x_23332222222323332333222222222222222222222221)) (Lambda Rmul_comm_233322222223233323332222222222222222222222222 (Prod x_233322222223233323332222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222222221 y_2333222222232333233322222222222222222222222211) (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222222211 x_233322222223233323332222222222222222222222221)))) (Lambda Rmul_assoc_2333222222232333233322222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 (App rmul_233322222223233323332222222222222222 y_23332222222323332333222222222222222222222222211 z_233322222223233323332222222222222222222222222111)) (App rmul_233322222223233323332222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 y_23332222222323332333222222222222222222222222211) z_233322222223233323332222222222222222222222222111))))) (Lambda Rdistr_l_23332222222323332333222222222222222222222222222 (Prod x_23332222222323332333222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_233322222223233323332222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_2333222222232333233322222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_23332222222323332333222222222222222222222222221 y_233322222223233323332222222222222222222222222211) z_2333222222232333233322222222222222222222222222111) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_23332222222323332333222222222222222222222222221 z_2333222222232333233322222222222222222222222222111) (App rmul_233322222223233323332222222222222222 y_233322222223233323332222222222222222222222222211 z_2333222222232333233322222222222222222222222222111)))))) (Lambda Rsub_def_233322222223233323332222222222222222222222222222 (Prod x_233322222223233323332222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rsub_2333222222232333233322222222222222222 x_233322222223233323332222222222222222222222222221 y_2333222222232333233322222222222222222222222222211) (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 y_2333222222232333233322222222222222222222222222211))))) (Lambda Ropp_def_2333222222232333233322222222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222222221)) rO_233322222223233323332222222222222)) Rmul_comm_233322222223233323332222222222222222222222222))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Rmul_assoc (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda r_2333222222232333233322222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Case 8 (Lambda r_23332222222323332333222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (Prod z_23332222222323332333222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222221 (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222211 z_23332222222323332333222222222222222222222111)) (App rmul_233322222223233323332222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) z_23332222222323332333222222222222222222222111)))))) (CaseMatch r_2333222222232333233322222222222222222222) (CaseBranches (Lambda Radd_0_l_23332222222323332333222222222222222222222 (Prod x_23332222222323332333222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 x_23332222222323332333222222222222222222221) x_23332222222323332333222222222222222222221)) (Lambda Radd_comm_233322222223233323332222222222222222222222 (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App radd_23332222222323332333222222222222222 y_2333222222232333233322222222222222222222211 x_233322222223233323332222222222222222222221)))) (Lambda Radd_assoc_2333222222232333233322222222222222222222222 (Prod x_2333222222232333233322222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222211 z_233322222223233323332222222222222222222222111)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 y_23332222222323332333222222222222222222222211) z_233322222223233323332222222222222222222222111))))) (Lambda Rmul_1_l_23332222222323332333222222222222222222222222 (Prod x_23332222222323332333222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_23332222222323332333222222222222222222222221) x_23332222222323332333222222222222222222222221)) (Lambda Rmul_comm_233322222223233323332222222222222222222222222 (Prod x_233322222223233323332222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222222221 y_2333222222232333233322222222222222222222222211) (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222222211 x_233322222223233323332222222222222222222222221)))) (Lambda Rmul_assoc_2333222222232333233322222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 (App rmul_233322222223233323332222222222222222 y_23332222222323332333222222222222222222222222211 z_233322222223233323332222222222222222222222222111)) (App rmul_233322222223233323332222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 y_23332222222323332333222222222222222222222222211) z_233322222223233323332222222222222222222222222111))))) (Lambda Rdistr_l_23332222222323332333222222222222222222222222222 (Prod x_23332222222323332333222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_233322222223233323332222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_2333222222232333233322222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_23332222222323332333222222222222222222222222221 y_233322222223233323332222222222222222222222222211) z_2333222222232333233322222222222222222222222222111) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_23332222222323332333222222222222222222222222221 z_2333222222232333233322222222222222222222222222111) (App rmul_233322222223233323332222222222222222 y_233322222223233323332222222222222222222222222211 z_2333222222232333233322222222222222222222222222111)))))) (Lambda Rsub_def_233322222223233323332222222222222222222222222222 (Prod x_233322222223233323332222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rsub_2333222222232333233322222222222222222 x_233322222223233323332222222222222222222222222221 y_2333222222232333233322222222222222222222222222211) (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 y_2333222222232333233322222222222222222222222222211))))) (Lambda Ropp_def_2333222222232333233322222222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222222221)) rO_233322222223233323332222222222222)) Rmul_assoc_2333222222232333233322222222222222222222222222))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Rdistr_l (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda r_2333222222232333233322222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Case 8 (Lambda r_23332222222323332333222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (Prod z_23332222222323332333222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) z_23332222222323332333222222222222222222222111) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222221 z_23332222222323332333222222222222222222222111) (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222211 z_23332222222323332333222222222222222222222111))))))) (CaseMatch r_2333222222232333233322222222222222222222) (CaseBranches (Lambda Radd_0_l_23332222222323332333222222222222222222222 (Prod x_23332222222323332333222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 x_23332222222323332333222222222222222222221) x_23332222222323332333222222222222222222221)) (Lambda Radd_comm_233322222223233323332222222222222222222222 (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App radd_23332222222323332333222222222222222 y_2333222222232333233322222222222222222222211 x_233322222223233323332222222222222222222221)))) (Lambda Radd_assoc_2333222222232333233322222222222222222222222 (Prod x_2333222222232333233322222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222211 z_233322222223233323332222222222222222222222111)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 y_23332222222323332333222222222222222222222211) z_233322222223233323332222222222222222222222111))))) (Lambda Rmul_1_l_23332222222323332333222222222222222222222222 (Prod x_23332222222323332333222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_23332222222323332333222222222222222222222221) x_23332222222323332333222222222222222222222221)) (Lambda Rmul_comm_233322222223233323332222222222222222222222222 (Prod x_233322222223233323332222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222222221 y_2333222222232333233322222222222222222222222211) (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222222211 x_233322222223233323332222222222222222222222221)))) (Lambda Rmul_assoc_2333222222232333233322222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 (App rmul_233322222223233323332222222222222222 y_23332222222323332333222222222222222222222222211 z_233322222223233323332222222222222222222222222111)) (App rmul_233322222223233323332222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 y_23332222222323332333222222222222222222222222211) z_233322222223233323332222222222222222222222222111))))) (Lambda Rdistr_l_23332222222323332333222222222222222222222222222 (Prod x_23332222222323332333222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_233322222223233323332222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_2333222222232333233322222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_23332222222323332333222222222222222222222222221 y_233322222223233323332222222222222222222222222211) z_2333222222232333233322222222222222222222222222111) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_23332222222323332333222222222222222222222222221 z_2333222222232333233322222222222222222222222222111) (App rmul_233322222223233323332222222222222222 y_233322222223233323332222222222222222222222222211 z_2333222222232333233322222222222222222222222222111)))))) (Lambda Rsub_def_233322222223233323332222222222222222222222222222 (Prod x_233322222223233323332222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rsub_2333222222232333233322222222222222222 x_233322222223233323332222222222222222222222222221 y_2333222222232333233322222222222222222222222222211) (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 y_2333222222232333233322222222222222222222222222211))))) (Lambda Ropp_def_2333222222232333233322222222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222222221)) rO_233322222223233323332222222222222)) Rdistr_l_23332222222323332333222222222222222222222222222))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Ropp_mul_l (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda Rsth_2333222222232333233322222222222222222222 (App Equivalence R_23332222222323332333222222222222 req_233322222223233323332222222222222222222) (Lambda Reqe_23332222222323332333222222222222222222222 (App ring_eq_ext R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Lambda Rth_233322222223233323332222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Lambda x_2333222222232333233322222222222222222222222 R_23332222222323332333222222222222 (Lambda y_23332222222323332333222222222222222222222222 R_23332222222323332333222222222222 (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222)) (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222)) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222)) (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) lemma_233322222223233323332222222222222222222222222))) (App Coq.setoid_ring.Ring_theory.Radd_0_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222)) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) rO_233322222223233323332222222222222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) rO_233322222223233323332222222222222) lemma_233322222223233323332222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.Radd_comm R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 rO_233322222223233323332222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222)) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) rO_233322222223233323332222222222222) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) rO_233322222223233323332222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222)) rO_233322222223233323332222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) rO_233322222223233323332222222222222 lemma_233322222223233323332222222222222222222222222)))) (App Coq.setoid_ring.Ring_theory.Ropp_def R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) lemma_233322222223233323332222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.Radd_assoc R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) lemma_233322222223233323332222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))) (App Coq.setoid_ring.Ring_theory.Rdistr_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) y_23332222222323332333222222222222222222222222) (App Coq.setoid_ring.Ring_theory.rmul_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) lemma_233322222223233323332222222222222222222222222 y_23332222222323332333222222222222222222222222 y_23332222222323332333222222222222222222222222 (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))) (App Coq.setoid_ring.Ring_theory.Radd_comm R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) rO_233322222223233323332222222222222) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) y_23332222222323332333222222222222222222222222) (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 y_23332222222323332333222222222222222222222222) (App Coq.setoid_ring.Ring_theory.rmul_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) rO_233322222223233323332222222222222 lemma_233322222223233323332222222222222222222222222 y_23332222222323332333222222222222222222222222 y_23332222222323332333222222222222222222222222 (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))) (App Coq.setoid_ring.Ring_theory.Ropp_def R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 x_2333222222232333233322222222222222222222222) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 y_23332222222323332333222222222222222222222222) rO_233322222223233323332222222222222) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App rmul_233322222223233323332222222222222222 rO_233322222223233323332222222222222 y_23332222222323332333222222222222222222222222) rO_233322222223233323332222222222222 lemma_233322222223233323332222222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))) (App Coq.setoid_ring.Ring_theory.Rmul_0_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222 Reqe_23332222222323332333222222222222222222222 Rth_233322222223233323332222222222222222222222 y_23332222222323332333222222222222222222222222) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) lemma_233322222223233323332222222222222222222222222)) (App Coq.setoid_ring.Ring_theory.Radd_0_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.Classes.RelationClasses.reflexivity R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Ropp_add (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda Rsth_2333222222232333233322222222222222222222 (App Equivalence R_23332222222323332333222222222222 req_233322222223233323332222222222222222222) (Lambda Reqe_23332222222323332333222222222222222222222 (App ring_eq_ext R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Lambda Rth_233322222223233323332222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Lambda x_2333222222232333233322222222222222222222222 R_23332222222323332333222222222222 (Lambda y_23332222222323332333222222222222222222222222 R_23332222222323332333222222222222 (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) lemma_233322222223233323332222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_0_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) rO_233322222223233323332222222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 rO_233322222223233323332222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) rO_233322222223233323332222222222222 lemma_233322222223233323332222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Ropp_def R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 x_2333222222232333233322222222222222222222222) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) lemma_233322222223233323332222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_0_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) rO_233322222223233323332222222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 rO_233322222223233323332222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) rO_233322222223233323332222222222222 lemma_233322222223233323332222222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Ropp_def R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 y_23332222222323332333222222222222222222222222) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) lemma_233322222223233323332222222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_comm R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) y_23332222222323332333222222222222222222222222) lemma_233322222223233323332222222222222222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_comm R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) lemma_233322222223233323332222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_assoc R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) y_23332222222323332333222222222222222222222222 (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) lemma_233322222223233323332222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_assoc R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) lemma_233322222223233323332222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_assoc R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) lemma_233322222223233323332222222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_comm R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 y_23332222222323332333222222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.Classes.RelationClasses.symmetry R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Symmetric R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) lemma_233322222223233323332222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_assoc R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) lemma_233322222223233323332222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_assoc R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) lemma_233322222223233323332222222222222222222222222 (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_comm R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 y_23332222222323332333222222222222222222222222 x_2333222222232333233322222222222222222222222) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) rO_233322222223233323332222222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222)) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222))) rO_233322222223233323332222222222222 lemma_233322222223233323332222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Ropp_def R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222 y_23332222222323332333222222222222222222222222)) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) lemma_233322222223233323332222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_comm R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) rO_233322222223233323332222222222222) (App (Lambda lemma_233322222223233323332222222222222222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222))) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) req_233322222223233323332222222222222222222 (App Coq.Classes.Morphisms.respectful R_23332222222323332333222222222222 R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 req_233322222223233323332222222222222222222) radd_23332222222323332333222222222222222 (App Coq.setoid_ring.Ring_theory.radd_ext2_Proper R_23332222222323332333222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Reqe_23332222222323332333222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_23332222222323332333222222222222 req_233322222223233323332222222222222222222 Rsth_2333222222232333233322222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) lemma_233322222223233323332222222222222222222222222) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_23332222222323332333222222222222 (App radd_23332222222323332333222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222) (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222))))) (App Coq.setoid_ring.Ring_theory.Radd_0_l R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)) (App Coq.setoid_ring.Ring_theory.Radd_comm R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222 Rth_233322222223233323332222222222222222222222 (App ropp_23332222222323332333222222222222222222 y_23332222222323332333222222222222222222222222) (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222)))))))))))))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Rsub_def (Lambda R_23332222222323332333222222222222 (Sort Type) (Lambda rO_233322222223233323332222222222222 R_23332222222323332333222222222222 (Lambda rI_2333222222232333233322222222222222 R_23332222222323332333222222222222 (Lambda radd_23332222222323332333222222222222222 (Prod out_23332222222323332333222222222222221 R_23332222222323332333222222222222 (Prod out_233322222223233323332222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rmul_233322222223233323332222222222222222 (Prod out_233322222223233323332222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda rsub_2333222222232333233322222222222222222 (Prod out_2333222222232333233322222222222222221 R_23332222222323332333222222222222 (Prod out_23332222222323332333222222222222222211 R_23332222222323332333222222222222 R_23332222222323332333222222222222)) (Lambda ropp_23332222222323332333222222222222222222 (Prod out_23332222222323332333222222222222222221 R_23332222222323332333222222222222 R_23332222222323332333222222222222) (Lambda req_233322222223233323332222222222222222222 (Prod out_233322222223233323332222222222222222221 R_23332222222323332333222222222222 (Prod out_2333222222232333233322222222222222222211 R_23332222222323332333222222222222 (Sort Prop))) (Lambda r_2333222222232333233322222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Case 8 (Lambda r_23332222222323332333222222222222222222222 (App ring_theory R_23332222222323332333222222222222 rO_233322222223233323332222222222222 rI_2333222222232333233322222222222222 radd_23332222222323332333222222222222222 rmul_233322222223233323332222222222222222 rsub_2333222222232333233322222222222222222 ropp_23332222222323332333222222222222222222 req_233322222223233323332222222222222222222) (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rsub_2333222222232333233322222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 (App ropp_23332222222323332333222222222222222222 y_2333222222232333233322222222222222222222211)))))) (CaseMatch r_2333222222232333233322222222222222222222) (CaseBranches (Lambda Radd_0_l_23332222222323332333222222222222222222222 (Prod x_23332222222323332333222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 rO_233322222223233323332222222222222 x_23332222222323332333222222222222222222221) x_23332222222323332333222222222222222222221)) (Lambda Radd_comm_233322222223233323332222222222222222222222 (Prod x_233322222223233323332222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222221 y_2333222222232333233322222222222222222222211) (App radd_23332222222323332333222222222222222 y_2333222222232333233322222222222222222222211 x_233322222223233323332222222222222222222221)))) (Lambda Radd_assoc_2333222222232333233322222222222222222222222 (Prod x_2333222222232333233322222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 (App radd_23332222222323332333222222222222222 y_23332222222323332333222222222222222222222211 z_233322222223233323332222222222222222222222111)) (App radd_23332222222323332333222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222221 y_23332222222323332333222222222222222222222211) z_233322222223233323332222222222222222222222111))))) (Lambda Rmul_1_l_23332222222323332333222222222222222222222222 (Prod x_23332222222323332333222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 rI_2333222222232333233322222222222222 x_23332222222323332333222222222222222222222221) x_23332222222323332333222222222222222222222221)) (Lambda Rmul_comm_233322222223233323332222222222222222222222222 (Prod x_233322222223233323332222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_233322222223233323332222222222222222222222221 y_2333222222232333233322222222222222222222222211) (App rmul_233322222223233323332222222222222222 y_2333222222232333233322222222222222222222222211 x_233322222223233323332222222222222222222222221)))) (Lambda Rmul_assoc_2333222222232333233322222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222221 R_23332222222323332333222222222222 (Prod y_23332222222323332333222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_233322222223233323332222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 (App rmul_233322222223233323332222222222222222 y_23332222222323332333222222222222222222222222211 z_233322222223233323332222222222222222222222222111)) (App rmul_233322222223233323332222222222222222 (App rmul_233322222223233323332222222222222222 x_2333222222232333233322222222222222222222222221 y_23332222222323332333222222222222222222222222211) z_233322222223233323332222222222222222222222222111))))) (Lambda Rdistr_l_23332222222323332333222222222222222222222222222 (Prod x_23332222222323332333222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_233322222223233323332222222222222222222222222211 R_23332222222323332333222222222222 (Prod z_2333222222232333233322222222222222222222222222111 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rmul_233322222223233323332222222222222222 (App radd_23332222222323332333222222222222222 x_23332222222323332333222222222222222222222222221 y_233322222223233323332222222222222222222222222211) z_2333222222232333233322222222222222222222222222111) (App radd_23332222222323332333222222222222222 (App rmul_233322222223233323332222222222222222 x_23332222222323332333222222222222222222222222221 z_2333222222232333233322222222222222222222222222111) (App rmul_233322222223233323332222222222222222 y_233322222223233323332222222222222222222222222211 z_2333222222232333233322222222222222222222222222111)))))) (Lambda Rsub_def_233322222223233323332222222222222222222222222222 (Prod x_233322222223233323332222222222222222222222222221 R_23332222222323332333222222222222 (Prod y_2333222222232333233322222222222222222222222222211 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App rsub_2333222222232333233322222222222222222 x_233322222223233323332222222222222222222222222221 y_2333222222232333233322222222222222222222222222211) (App radd_23332222222323332333222222222222222 x_233322222223233323332222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 y_2333222222232333233322222222222222222222222222211))))) (Lambda Ropp_def_2333222222232333233322222222222222222222222222222 (Prod x_2333222222232333233322222222222222222222222222221 R_23332222222323332333222222222222 (App req_233322222223233323332222222222222222222 (App radd_23332222222323332333222222222222222 x_2333222222232333233322222222222222222222222222221 (App ropp_23332222222323332333222222222222222222 x_2333222222232333233322222222222222222222222222221)) rO_233322222223233323332222222222222)) Rsub_def_233322222223233323332222222222222222222222222222))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_theory.Rth_ARth (Lambda R_233322222223233323332 (Sort Type) (Lambda rO_2333222222232333233322 R_233322222223233323332 (Lambda rI_23332222222323332333222 R_233322222223233323332 (Lambda radd_233322222223233323332222 (Prod out_233322222223233323332221 R_233322222223233323332 (Prod out_2333222222232333233322211 R_233322222223233323332 R_233322222223233323332)) (Lambda rmul_2333222222232333233322222 (Prod out_2333222222232333233322221 R_233322222223233323332 (Prod out_23332222222323332333222211 R_233322222223233323332 R_233322222223233323332)) (Lambda rsub_23332222222323332333222222 (Prod out_23332222222323332333222221 R_233322222223233323332 (Prod out_233322222223233323332222211 R_233322222223233323332 R_233322222223233323332)) (Lambda ropp_233322222223233323332222222 (Prod out_233322222223233323332222221 R_233322222223233323332 R_233322222223233323332) (Lambda req_2333222222232333233322222222 (Prod out_2333222222232333233322222221 R_233322222223233323332 (Prod out_23332222222323332333222222211 R_233322222223233323332 (Sort Prop))) (Lambda Rsth_23332222222323332333222222222 (App Equivalence R_233322222223233323332 req_2333222222232333233322222222) (Lambda Reqe_233322222223233323332222222222 (App ring_eq_ext R_233322222223233323332 radd_233322222223233323332222 rmul_2333222222232333233322222 ropp_233322222223233323332222222 req_2333222222232333233322222222) (Lambda Rth_2333222222232333233322222222222 (App ring_theory R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222) (App mk_art R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 (App Coq.setoid_ring.Ring_theory.Radd_0_l R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rth_2333222222232333233322222222222) (App Coq.setoid_ring.Ring_theory.Radd_comm R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rth_2333222222232333233322222222222) (App Coq.setoid_ring.Ring_theory.Radd_assoc R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rth_2333222222232333233322222222222) (App Coq.setoid_ring.Ring_theory.Rmul_1_l R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rth_2333222222232333233322222222222) (App Coq.setoid_ring.Ring_theory.Rmul_0_l R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rsth_23332222222323332333222222222 Reqe_233322222223233323332222222222 Rth_2333222222232333233322222222222) (App Coq.setoid_ring.Ring_theory.Rmul_comm R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rth_2333222222232333233322222222222) (App Coq.setoid_ring.Ring_theory.Rmul_assoc R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rth_2333222222232333233322222222222) (App Coq.setoid_ring.Ring_theory.Rdistr_l R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rth_2333222222232333233322222222222) (App Coq.setoid_ring.Ring_theory.Ropp_mul_l R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rsth_23332222222323332333222222222 Reqe_233322222223233323332222222222 Rth_2333222222232333233322222222222) (App Coq.setoid_ring.Ring_theory.Ropp_add R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rsth_23332222222323332333222222222 Reqe_233322222223233323332222222222 Rth_2333222222232333233322222222222) (App Coq.setoid_ring.Ring_theory.Rsub_def R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 Rth_2333222222232333233322222222222)))))))))))))) (Definition Coq.ZArith.BinInt.Z.add_0_l (Lambda n_233322222223233323332 Z (Case 0 (Lambda z_2333222222232333233322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 z_2333222222232333233322) z_2333222222232333233322)) (CaseMatch n_233322222223233323332) (CaseBranches (App eq_refl Z Z0) (Lambda p_2333222222232333233322 positive (App eq_refl Z (App Zpos p_2333222222232333233322))) (Lambda p_2333222222232333233322 positive (App eq_refl Z (App Zneg p_2333222222232333233322))))))) (Definition Coq.ZArith.BinInt.Z.add_comm (Lambda n_233322222223233323332 Z (Lambda m_2333222222232333233322 Z (Cast (App Coq.ZArith.BinInt.Z.bi_induction (Lambda t_23332222222323332333222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 t_23332222222323332333222))) (Cast (Cast (Lambda x_23332222222323332333222 Z (Lambda y_233322222223233323332222 Z (Lambda H_2333222222232333233322222 (App eq Z x_23332222222323332333222 y_233322222223233323332222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z (App Coq.ZArith.BinIntDef.Z.add x_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 x_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 y_233322222223233323332222)) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add x_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinInt.Z.add_wd x_23332222222323332333222 y_233322222223233323332222 H_2333222222232333233322222 m_2333222222232333233322 m_2333222222232333233322 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) m_2333222222232333233322)) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 x_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 y_233322222223233323332222) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism Z (Prod out_23332222222323332333222221 Z Z) (App eq Z) (App Coq.Classes.Morphisms.respectful Z Z (App eq Z) (App eq Z)) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinInt.Z.add_wd m_2333222222232333233322 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) m_2333222222232333233322) x_23332222222323332333222 y_233322222223233323332222 H_2333222222232333233322222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 y_233322222223233323332222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 y_233322222223233323332222)) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 y_233322222223233323332222))) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 y_233322222223233323332222))))))) REVERTcast (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff (Lambda t_23332222222323332333222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 t_23332222222323332333222))) (Lambda t_23332222222323332333222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 t_23332222222323332333222))))) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_23332222222323332333221 Z (Sort Prop)) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff) (Lambda t_23332222222323332333222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 t_23332222222323332333222))))) (App (Lambda lemma_23332222222323332333222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 Z0) m_2333222222232333233322) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 Z0) m_2333222222232333233322 lemma_23332222222323332333222)) (App Coq.ZArith.BinInt.Z.add_0_r m_2333222222232333233322) (App (Lambda lemma_23332222222323332333222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) m_2333222222232333233322) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) m_2333222222232333233322 lemma_23332222222323332333222 m_2333222222232333233322 m_2333222222232333233322 (App Coq.Classes.Morphisms.eq_proper_proxy Z m_2333222222232333233322))) (App Coq.ZArith.BinInt.Z.add_0_l m_2333222222232333233322) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) m_2333222222232333233322))) (Lambda n_23332222222323332333222 Z (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222))) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222)) lemma_233322222223233323332222))) (App Coq.ZArith.BinInt.Z.add_succ_r m_2333222222232333233322 n_23332222222323332333222) (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322)) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222))) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322)) lemma_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222)))))) (App Coq.ZArith.BinInt.Z.add_succ_l n_23332222222323332333222 m_2333222222232333233322) (App (Lambda lemma_233322222223233323332222 (App Coq.Init.Logic.iff (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322)) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322)) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222)) lemma_233322222223233323332222)) (App Coq.ZArith.BinInt.Z.succ_inj_wd (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222)) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_23332222222323332333222))))))) n_233322222223233323332) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 n_233322222223233323332)))))) (Definition Coq.ZArith.BinInt.Z.add_assoc (Lambda n_233322222223233323332 Z (Lambda m_2333222222232333233322 Z (Lambda p_23332222222323332333222 Z (Cast (App Coq.ZArith.BinInt.Z.bi_induction (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))) (Cast (Cast (Lambda x_233322222223233323332222 Z (Lambda y_2333222222232333233322222 Z (Lambda H_23332222222323332333222222 (App eq Z x_233322222223233323332222 y_2333222222232333233322222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z (App Coq.ZArith.BinIntDef.Z.add x_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add x_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222)) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add x_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinInt.Z.add_wd x_233322222223233323332222 y_2333222222232333233322222 H_23332222222323332333222222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add x_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.add x_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) (App Coq.ZArith.BinInt.Z.add_wd x_233322222223233323332222 y_2333222222232333233322222 H_23332222222323332333222222 m_2333222222232333233322 m_2333222222232333233322 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) m_2333222222232333233322)) p_23332222222323332333222 p_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222)) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222))) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222))))))) REVERTcast (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))) (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))))) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_233322222223233323332221 Z (Sort Prop)) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff) (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))))) (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222) lemma_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) p_23332222222323332333222) (App Coq.Classes.Morphisms.eq_proper_proxy Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) p_23332222222323332333222)))) (App Coq.ZArith.BinInt.Z.add_0_l (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) m_2333222222232333233322) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) m_2333222222232333233322 lemma_233322222223233323332222 p_23332222222323332333222 p_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) p_23332222222323332333222)))) (App Coq.ZArith.BinInt.Z.add_0_l m_2333222222232333233322) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)))) (Lambda n_233322222223233323332222 Z (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222)) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) lemma_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222))))) (App Coq.ZArith.BinInt.Z.add_succ_l n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) p_23332222222323332333222)) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) lemma_2333222222232333233322222 p_23332222222323332333222 p_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) p_23332222222323332333222))))) (App Coq.ZArith.BinInt.Z.add_succ_l n_233322222223233323332222 m_2333222222232333233322) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) lemma_2333222222232333233322222))) (App Coq.ZArith.BinInt.Z.add_succ_l (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App (Lambda lemma_2333222222232333233322222 (App Coq.Init.Logic.iff (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) lemma_2333222222232333233322222)) (App Coq.ZArith.BinInt.Z.succ_inj_wd (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)))))))) n_233322222223233323332) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332 m_2333222222232333233322) p_23332222222323332333222))))))) (Definition Coq.ZArith.BinInt.Z.mul_1_l (Lambda n_233322222223233323332 Z (App (Lambda lemma_2333222222232333233322 (App eq Z (App Zpos xH) (App Coq.ZArith.BinIntDef.Z.succ Z0)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Zpos xH) n_233322222223233323332) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ Z0) n_233322222223233323332) (App Coq.ZArith.BinInt.Z.mul_wd (App Zpos xH) (App Coq.ZArith.BinIntDef.Z.succ Z0) lemma_2333222222232333233322 n_233322222223233323332 n_233322222223233323332 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) n_233322222223233323332)) n_233322222223233323332 n_233322222223233323332 (App Coq.Classes.Morphisms.eq_proper_proxy Z n_233322222223233323332))) Coq.ZArith.BinInt.Z.one_succ (App (Lambda lemma_2333222222232333233322 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ Z0) n_233322222223233323332) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Z0 n_233322222223233323332) n_233322222223233323332)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ Z0) n_233322222223233323332) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Z0 n_233322222223233323332) n_233322222223233323332) lemma_2333222222232333233322 n_233322222223233323332 n_233322222223233323332 (App Coq.Classes.Morphisms.eq_proper_proxy Z n_233322222223233323332))) (App Coq.ZArith.BinInt.Z.mul_succ_l Z0 n_233322222223233323332) (App (Lambda lemma_2333222222232333233322 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul Z0 n_233322222223233323332) Z0) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Z0 n_233322222223233323332) n_233322222223233323332) (App Coq.ZArith.BinIntDef.Z.add Z0 n_233322222223233323332) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.mul Z0 n_233322222223233323332) Z0 lemma_2333222222232333233322 n_233322222223233323332 n_233322222223233323332 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) n_233322222223233323332)) n_233322222223233323332 n_233322222223233323332 (App Coq.Classes.Morphisms.eq_proper_proxy Z n_233322222223233323332))) (App Coq.ZArith.BinInt.Z.mul_0_l n_233322222223233323332) (App (Lambda lemma_2333222222232333233322 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 n_233322222223233323332) n_233322222223233323332) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add Z0 n_233322222223233323332) n_233322222223233323332 lemma_2333222222232333233322 n_233322222223233323332 n_233322222223233323332 (App Coq.Classes.Morphisms.eq_proper_proxy Z n_233322222223233323332))) (App Coq.ZArith.BinInt.Z.add_0_l n_233322222223233323332) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) n_233322222223233323332))))))) (Definition Coq.ZArith.BinInt.Z.mul_comm (Lambda n_233322222223233323332 Z (Lambda m_2333222222232333233322 Z (Cast (App Coq.ZArith.BinInt.Z.bi_induction (Lambda t_23332222222323332333222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul t_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 t_23332222222323332333222))) (Cast (Cast (Lambda x_23332222222323332333222 Z (Lambda y_233322222223233323332222 Z (Lambda H_2333222222232333233322222 (App eq Z x_23332222222323332333222 y_233322222223233323332222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z (App Coq.ZArith.BinIntDef.Z.mul x_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 x_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 y_233322222223233323332222)) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul x_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinInt.Z.mul_wd x_23332222222323332333222 y_233322222223233323332222 H_2333222222232333233322222 m_2333222222232333233322 m_2333222222232333233322 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) m_2333222222232333233322)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 x_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 y_233322222223233323332222) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism Z (Prod out_23332222222323332333222221 Z Z) (App eq Z) (App Coq.Classes.Morphisms.respectful Z Z (App eq Z) (App eq Z)) Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinInt.Z.mul_wd m_2333222222232333233322 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) m_2333222222232333233322) x_23332222222323332333222 y_233322222223233323332222 H_2333222222232333233322222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 y_233322222223233323332222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 y_233322222223233323332222)) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 y_233322222223233323332222))) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.mul y_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 y_233322222223233323332222))))))) REVERTcast (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff (Lambda t_23332222222323332333222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul t_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 t_23332222222323332333222))) (Lambda t_23332222222323332333222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul t_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 t_23332222222323332333222))))) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_23332222222323332333221 Z (Sort Prop)) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff) (Lambda t_23332222222323332333222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul t_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 t_23332222222323332333222))))) (App (Lambda lemma_23332222222323332333222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 Z0) Z0) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul Z0 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 Z0) Z0 lemma_23332222222323332333222)) (App Coq.ZArith.BinInt.Z.mul_0_r m_2333222222232333233322) (App (Lambda lemma_23332222222323332333222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul Z0 m_2333222222232333233322) Z0) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul Z0 m_2333222222232333233322) Z0 lemma_23332222222323332333222 Z0 Z0 (App Coq.Classes.Morphisms.eq_proper_proxy Z Z0))) (App Coq.ZArith.BinInt.Z.mul_0_l m_2333222222232333233322) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0))) (Lambda n_23332222222323332333222 Z (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322)) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322) lemma_233322222223233323332222))) (App Coq.ZArith.BinInt.Z.mul_succ_r m_2333222222232333233322 n_23332222222323332333222) (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) m_2333222222232333233322)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322)) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) m_2333222222232333233322) lemma_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322))))) (App Coq.ZArith.BinInt.Z.mul_succ_l n_23332222222323332333222 m_2333222222232333233322) (App (Lambda lemma_233322222223233323332222 (App Coq.Init.Logic.iff (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222)) lemma_233322222223233323332222)) (App Coq.ZArith.BinInt.Z.add_cancel_r (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222) m_2333222222232333233322) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_23332222222323332333222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_23332222222323332333222))))))) n_233322222223233323332) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 n_233322222223233323332)))))) (Definition Coq.ZArith.BinInt.Z.mul_assoc (Lambda n_233322222223233323332 Z (Lambda m_2333222222232333233322 Z (Lambda p_23332222222323332333222 Z (Cast (App Coq.ZArith.BinInt.Z.bi_induction (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))) (Cast (Cast (Lambda x_233322222223233323332222 Z (Lambda y_2333222222232333233322222 Z (Lambda H_23332222222323332333222222 (App eq Z x_233322222223233323332222 y_2333222222232333233322222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z (App Coq.ZArith.BinIntDef.Z.mul x_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul x_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222)) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul x_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinInt.Z.mul_wd x_233322222223233323332222 y_2333222222232333233322222 H_23332222222323332333222222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul x_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.mul_wd (App Coq.ZArith.BinIntDef.Z.mul x_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 m_2333222222232333233322) (App Coq.ZArith.BinInt.Z.mul_wd x_233322222223233323332222 y_2333222222232333233322222 H_23332222222323332333222222 m_2333222222232333233322 m_2333222222232333233322 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) m_2333222222232333233322)) p_23332222222323332333222 p_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222)) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222))) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222))))))) REVERTcast (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))) (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))))) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_233322222223233323332221 Z (Sort Prop)) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff) (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))))) (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul Z0 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) Z0) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul Z0 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) Z0 lemma_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul Z0 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul Z0 m_2333222222232333233322) p_23332222222323332333222) (App Coq.Classes.Morphisms.eq_proper_proxy Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul Z0 m_2333222222232333233322) p_23332222222323332333222)))) (App Coq.ZArith.BinInt.Z.mul_0_l (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul Z0 m_2333222222232333233322) Z0) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul Z0 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul Z0 p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.mul_wd (App Coq.ZArith.BinIntDef.Z.mul Z0 m_2333222222232333233322) Z0 lemma_233322222223233323332222 p_23332222222323332333222 p_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) p_23332222222323332333222)))) (App Coq.ZArith.BinInt.Z.mul_0_l m_2333222222232333233322) (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul Z0 p_23332222222323332333222) Z0) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0 (App Coq.ZArith.BinIntDef.Z.mul Z0 p_23332222222323332333222) Z0 lemma_233322222223233323332222)) (App Coq.ZArith.BinInt.Z.mul_0_l p_23332222222323332333222) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0)))) (Lambda n_233322222223233323332222 Z (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222)) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) lemma_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222))))) (App Coq.ZArith.BinInt.Z.mul_succ_l n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) m_2333222222232333233322)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) m_2333222222232333233322) p_23332222222323332333222)) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.mul_wd (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) m_2333222222232333233322) lemma_2333222222232333233322222 p_23332222222323332333222 p_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) p_23332222222323332333222))))) (App Coq.ZArith.BinInt.Z.mul_succ_l n_233322222223233323332222 m_2333222222232333233322) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) lemma_2333222222232333233322222))) (App Coq.ZArith.BinInt.Z.mul_add_distr_r (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) m_2333222222232333233322 p_23332222222323332333222) (App (Lambda lemma_2333222222232333233322222 (App Coq.Init.Logic.iff (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)) lemma_2333222222232333233322222)) (App Coq.ZArith.BinInt.Z.add_cancel_r (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222)))))))) n_233322222223233323332) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332 m_2333222222232333233322) p_23332222222323332333222))))))) (Definition Coq.ZArith.BinInt.Z.mul_add_distr_r (Lambda n_233322222223233323332 Z (Lambda m_2333222222232333233322 Z (Lambda p_23332222222323332333222 Z (Cast (App Coq.ZArith.BinInt.Z.bi_induction (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))) (Cast (Cast (Lambda x_233322222223233323332222 Z (Lambda y_2333222222232333233322222 Z (Lambda H_23332222222323332333222222 (App eq Z x_233322222223233323332222 y_2333222222232333233322222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add x_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul x_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add x_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.mul_wd (App Coq.ZArith.BinIntDef.Z.add x_233322222223233323332222 m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) (App Coq.ZArith.BinInt.Z.add_wd x_233322222223233323332222 y_2333222222232333233322222 H_23332222222323332333222222 m_2333222222232333233322 m_2333222222232333233322 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) m_2333222222232333233322)) p_23332222222323332333222 p_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul x_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.mul x_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.mul_wd x_233322222223233323332222 y_2333222222232333233322222 H_23332222222323332333222222 p_23332222222323332333222 p_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add y_2333222222232333233322222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul y_2333222222232333233322222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))))))) REVERTcast (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))) (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))))) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_233322222223233323332221 Z (Sort Prop)) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff) (Lambda t_233322222223233323332222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add t_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul t_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))))) (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul Z0 p_23332222222323332333222) Z0) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Z0 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.mul Z0 p_23332222222323332333222) Z0 lemma_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))))) (App Coq.ZArith.BinInt.Z.mul_0_l p_23332222222323332333222) (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) m_2333222222232333233322) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.mul_wd (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232333233322) m_2333222222232333233322 lemma_233322222223233323332222 p_23332222222323332333222 p_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.Classes.Morphisms.eq_proper_proxy Z (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))))) (App Coq.ZArith.BinInt.Z.add_0_l m_2333222222232333233322) (App (Lambda lemma_233322222223233323332222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) lemma_233322222223233323332222)) (App Coq.ZArith.BinInt.Z.add_0_l (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))))) (Lambda n_233322222223233323332222 Z (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) lemma_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))))) (App Coq.ZArith.BinInt.Z.mul_succ_l n_233322222223233323332222 p_23332222222323332333222) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.mul_wd (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_233322222223233323332222) m_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) lemma_2333222222232333233322222 p_23332222222323332333222 p_23332222222323332333222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))))) (App Coq.ZArith.BinInt.Z.add_succ_l n_233322222223233323332222 m_2333222222232333233322) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322)) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) lemma_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))))) (App Coq.ZArith.BinInt.Z.mul_succ_l (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add p_23332222222323332333222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add p_23332222222323332333222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add p_23332222222323332333222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.Classes.RelationClasses.symmetry Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Symmetric Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add p_23332222222323332333222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) lemma_2333222222232333233322222)))) (App Coq.ZArith.BinInt.Z.add_assoc (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) p_23332222222323332333222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add p_23332222222323332333222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) p_23332222222323332333222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add p_23332222222323332333222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) p_23332222222323332333222))) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add p_23332222222323332333222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) p_23332222222323332333222)) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism Z (Prod out_23332222222323332333222221 Z Z) (App eq Z) (App Coq.Classes.Morphisms.respectful Z Z (App eq Z) (App eq Z)) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add p_23332222222323332333222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) p_23332222222323332333222) lemma_2333222222232333233322222)))) (App Coq.ZArith.BinInt.Z.add_comm p_23332222222323332333222 (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) p_23332222222323332333222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) p_23332222222323332333222)) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) p_23332222222323332333222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) p_23332222222323332333222) lemma_2333222222232333233322222))) (App Coq.ZArith.BinInt.Z.add_assoc (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222) p_23332222222323332333222) (App (Lambda lemma_2333222222232333233322222 (App Coq.Init.Logic.iff (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) p_23332222222323332333222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222))) lemma_2333222222232333233322222)) (App Coq.ZArith.BinInt.Z.add_cancel_r (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)) p_23332222222323332333222) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332222 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))))))))))) n_233322222223233323332) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add n_233322222223233323332 m_2333222222232333233322) p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332 p_23332222222323332333222) (App Coq.ZArith.BinIntDef.Z.mul m_2333222222232333233322 p_23332222222323332333222)))))))) (Definition Coq.ZArith.BinInt.Z.sub_diag (Lambda n_233322222223233323332 Z (Cast (App Coq.ZArith.BinInt.Z.bi_induction (Lambda t_2333222222232333233322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub t_2333222222232333233322 t_2333222222232333233322) Z0)) (Cast (Cast (Lambda x_2333222222232333233322 Z (Lambda y_23332222222323332333222 Z (Lambda H_233322222223233323332222 (App eq Z x_2333222222232333233322 y_23332222222323332333222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z (App Coq.ZArith.BinIntDef.Z.sub x_2333222222232333233322 x_2333222222232333233322) Z0) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub y_23332222222323332333222 y_23332222222323332333222) Z0) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.sub x_2333222222232333233322 x_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.sub y_23332222222323332333222 y_23332222222323332333222) (App Coq.ZArith.BinInt.Z.sub_wd x_2333222222232333233322 y_23332222222323332333222 H_233322222223233323332222 x_2333222222232333233322 y_23332222222323332333222 H_233322222223233323332222) Z0 Z0 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0)) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub y_23332222222323332333222 y_23332222222323332333222) Z0) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub y_23332222222323332333222 y_23332222222323332333222) Z0) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub y_23332222222323332333222 y_23332222222323332333222) Z0)) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.sub y_23332222222323332333222 y_23332222222323332333222) Z0)))))) REVERTcast (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff (Lambda t_2333222222232333233322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub t_2333222222232333233322 t_2333222222232333233322) Z0)) (Lambda t_2333222222232333233322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub t_2333222222232333233322 t_2333222222232333233322) Z0)))) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_2333222222232333233321 Z (Sort Prop)) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff) (Lambda t_2333222222232333233322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub t_2333222222232333233322 t_2333222222232333233322) Z0)))) (App (Lambda lemma_2333222222232333233322 (App eq Z (App Coq.ZArith.BinIntDef.Z.sub Z0 Z0) Z0) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.sub Z0 Z0) Z0 lemma_2333222222232333233322 Z0 Z0 (App Coq.Classes.Morphisms.eq_proper_proxy Z Z0))) (App Coq.ZArith.BinInt.Z.sub_0_r Z0) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0)) (Lambda n_2333222222232333233322 Z (App (Lambda lemma_23332222222323332333222 (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322)) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) n_2333222222232333233322))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322) Z0) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322)) Z0) (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) n_2333222222232333233322)) Z0) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322)) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) n_2333222222232333233322)) lemma_23332222222323332333222 Z0 Z0 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0)))) (App Coq.ZArith.BinInt.Z.sub_succ_r (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) n_2333222222232333233322) (App (Lambda lemma_23332222222323332333222 (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) n_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322) Z0) (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) n_2333222222232333233322)) Z0) (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322))) Z0) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) n_2333222222232333233322)) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322))) (App Coq.ZArith.BinInt.Z.pred_wd (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232333233322) n_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322)) lemma_23332222222323332333222) Z0 Z0 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0)))) (App Coq.ZArith.BinInt.Z.sub_succ_l n_2333222222232333233322 n_2333222222232333233322) (App (Lambda lemma_23332222222323332333222 (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322))) (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322) Z0) (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322))) Z0) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322) Z0) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322))) (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322) lemma_23332222222323332333222 Z0 Z0 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0)))) (App Coq.ZArith.BinInt.Z.pred_succ (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322)) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232333233322 n_2333222222232333233322) Z0)))))) n_233322222223233323332) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_233322222223233323332 n_233322222223233323332) Z0)))) (Definition Coq.setoid_ring.InitialRing.Zth (App mk_rt Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp (App eq Z) Coq.ZArith.BinInt.Z.add_0_l Coq.ZArith.BinInt.Z.add_comm Coq.ZArith.BinInt.Z.add_assoc Coq.ZArith.BinInt.Z.mul_1_l Coq.ZArith.BinInt.Z.mul_comm Coq.ZArith.BinInt.Z.mul_assoc Coq.ZArith.BinInt.Z.mul_add_distr_r (Lambda x_233322222223233323332 Z (Lambda y_2333222222232333233322 Z (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add x_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.opp y_2333222222232333233322))))) Coq.ZArith.BinInt.Z.sub_diag)) (Definition Coq.setoid_ring.Ring_theory.IDphi (Lambda R_233322222223233323332 (Sort Type) (Lambda x_2333222222232333233322 R_233322222223233323332 x_2333222222232333233322))) (Definition Coq.Classes.RelationClasses.reflexivity (Lambda A_23332222222323332333222222222222 (Sort Type) (Lambda R_233322222223233323332222222222222 (App Coq.Relations.Relation_Definitions.relation A_23332222222323332333222222222222) (Lambda Reflexive_2333222222232333233322222222222222 (App Coq.Classes.RelationClasses.Reflexive A_23332222222323332333222222222222 R_233322222223233323332222222222222) Reflexive_2333222222232333233322222222222222)))) (Definition Coq.setoid_ring.Ring_theory.IDmorph (Lambda R_233322222223233323332 (Sort Type) (Lambda rO_2333222222232333233322 R_233322222223233323332 (Lambda rI_23332222222323332333222 R_233322222223233323332 (Lambda radd_233322222223233323332222 (Prod out_233322222223233323332221 R_233322222223233323332 (Prod out_2333222222232333233322211 R_233322222223233323332 R_233322222223233323332)) (Lambda rmul_2333222222232333233322222 (Prod out_2333222222232333233322221 R_233322222223233323332 (Prod out_23332222222323332333222211 R_233322222223233323332 R_233322222223233323332)) (Lambda rsub_23332222222323332333222222 (Prod out_23332222222323332333222221 R_233322222223233323332 (Prod out_233322222223233323332222211 R_233322222223233323332 R_233322222223233323332)) (Lambda ropp_233322222223233323332222222 (Prod out_233322222223233323332222221 R_233322222223233323332 R_233322222223233323332) (Lambda req_2333222222232333233322222222 (Prod out_2333222222232333233322222221 R_233322222223233323332 (Prod out_23332222222323332333222222211 R_233322222223233323332 (Sort Prop))) (Lambda Rsth_23332222222323332333222222222 (App Equivalence R_233322222223233323332 req_2333222222232333233322222222) (Lambda reqb_233322222223233323332222222222 (Prod out_233322222223233323332222222221 R_233322222223233323332 (Prod out_2333222222232333233322222222211 R_233322222223233323332 bool)) (Lambda morph_req_2333222222232333233322222222222 (Prod x_2333222222232333233322222222221 R_233322222223233323332 (Prod y_23332222222323332333222222222211 R_233322222223233323332 (Prod out_233322222223233323332222222222111 (App eq bool (App reqb_233322222223233323332222222222 x_2333222222232333233322222222221 y_23332222222323332333222222222211) true) (App req_2333222222232333233322222222 x_2333222222232333233322222222221 y_23332222222323332333222222222211)))) (App mkmorph R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 req_2333222222232333233322222222 R_233322222223233323332 rO_2333222222232333233322 rI_23332222222323332333222 radd_233322222223233323332222 rmul_2333222222232333233322222 rsub_23332222222323332333222222 ropp_233322222223233323332222222 reqb_233322222223233323332222222222 (App Coq.setoid_ring.Ring_theory.IDphi R_233322222223233323332) (App Coq.Classes.RelationClasses.reflexivity R_233322222223233323332 req_2333222222232333233322222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_233322222223233323332 req_2333222222232333233322222222 Rsth_23332222222323332333222222222) rO_2333222222232333233322) (App Coq.Classes.RelationClasses.reflexivity R_233322222223233323332 req_2333222222232333233322222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_233322222223233323332 req_2333222222232333233322222222 Rsth_23332222222323332333222222222) rI_23332222222323332333222) (Lambda x_23332222222323332333222222222222 R_233322222223233323332 (Lambda y_233322222223233323332222222222222 R_233322222223233323332 (App Coq.Classes.RelationClasses.reflexivity R_233322222223233323332 req_2333222222232333233322222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_233322222223233323332 req_2333222222232333233322222222 Rsth_23332222222323332333222222222) (App radd_233322222223233323332222 (App Coq.setoid_ring.Ring_theory.IDphi R_233322222223233323332 x_23332222222323332333222222222222) (App Coq.setoid_ring.Ring_theory.IDphi R_233322222223233323332 y_233322222223233323332222222222222))))) (Lambda x_23332222222323332333222222222222 R_233322222223233323332 (Lambda y_233322222223233323332222222222222 R_233322222223233323332 (App Coq.Classes.RelationClasses.reflexivity R_233322222223233323332 req_2333222222232333233322222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_233322222223233323332 req_2333222222232333233322222222 Rsth_23332222222323332333222222222) (App rsub_23332222222323332333222222 (App Coq.setoid_ring.Ring_theory.IDphi R_233322222223233323332 x_23332222222323332333222222222222) (App Coq.setoid_ring.Ring_theory.IDphi R_233322222223233323332 y_233322222223233323332222222222222))))) (Lambda x_23332222222323332333222222222222 R_233322222223233323332 (Lambda y_233322222223233323332222222222222 R_233322222223233323332 (App Coq.Classes.RelationClasses.reflexivity R_233322222223233323332 req_2333222222232333233322222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_233322222223233323332 req_2333222222232333233322222222 Rsth_23332222222323332333222222222) (App rmul_2333222222232333233322222 (App Coq.setoid_ring.Ring_theory.IDphi R_233322222223233323332 x_23332222222323332333222222222222) (App Coq.setoid_ring.Ring_theory.IDphi R_233322222223233323332 y_233322222223233323332222222222222))))) (Lambda x_23332222222323332333222222222222 R_233322222223233323332 (App Coq.Classes.RelationClasses.reflexivity R_233322222223233323332 req_2333222222232333233322222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_233322222223233323332 req_2333222222232333233322222222 Rsth_23332222222323332333222222222) (App ropp_233322222223233323332222222 (App Coq.setoid_ring.Ring_theory.IDphi R_233322222223233323332 x_23332222222323332333222222222222)))) morph_req_2333222222232333233322222222222))))))))))))) (Definition Coq.ZArith.Zbool.Zeq_is_eq_bool (Lambda x_2333222222232333233322222 Z (Lambda y_23332222222323332333222222 Z (Cast (App (Lambda lemma_233322222223233323332222222 (App Coq.Init.Logic.iff (App eq comparison (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322222 y_23332222222323332333222222) Eq) (App eq Z x_2333222222232333233322222 y_23332222222323332333222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z x_2333222222232333233322222 y_23332222222323332333222222) (App eq comparison (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322222 y_23332222222323332333222222) Eq) (App Coq.Classes.RelationClasses.symmetry (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Symmetric (App eq comparison (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322222 y_23332222222323332333222222) Eq) (App eq Z x_2333222222232333233322222 y_23332222222323332333222222) lemma_233322222223233323332222222) (App eq bool (Case 0 (Lambda x_2333222222232333233322222222 comparison bool) (CaseMatch (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322222 y_23332222222323332333222222)) (CaseBranches true false false)) true) (App eq bool (Case 0 (Lambda x_2333222222232333233322222222 comparison bool) (CaseMatch (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322222 y_23332222222323332333222222)) (CaseBranches true false false)) true) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq bool (Case 0 (Lambda x_2333222222232333233322222222 comparison bool) (CaseMatch (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322222 y_23332222222323332333222222)) (CaseBranches true false false)) true)))) (App Coq.ZArith.BinInt.Z.compare_eq_iff x_2333222222232333233322222 y_23332222222323332333222222) (LetIn c_233322222223233323332222223 (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322222 y_23332222222323332333222222) comparison (Case 0 (Lambda c_2333222222232333233322222232 comparison (App Coq.Init.Logic.iff (App eq comparison c_2333222222232333233322222232 Eq) (App eq bool (Case 0 (Lambda x_23332222222323332333222222322 comparison bool) (CaseMatch c_2333222222232333233322222232) (CaseBranches true false false)) true))) (CaseMatch c_233322222223233323332222223) (CaseBranches (App conj (Prod out_2333222222232333233322222231 (App eq comparison Eq Eq) (App eq bool true true)) (Prod out_2333222222232333233322222231 (App eq bool true true) (App eq comparison Eq Eq)) (Lambda H_2333222222232333233322222232 (App eq comparison Eq Eq) (App eq_refl bool true)) (Lambda H_2333222222232333233322222232 (App eq bool true true) (App eq_refl comparison Eq))) (App conj (Prod out_2333222222232333233322222231 (App eq comparison Lt Eq) (App eq bool false true)) (Prod out_2333222222232333233322222231 (App eq bool false true) (App eq comparison Lt Eq)) (Lambda H_2333222222232333233322222232 (App eq comparison Lt Eq) (LetIn H0_23332222222323332333222222323 (Case 2 (Lambda y_23332222222323332333222222322 comparison (Lambda out_233322222223233323332222223222 (App eq comparison Lt y_23332222222323332333222222322) (Prod out_2333222222232333233322222232221 (App eq comparison y_23332222222323332333222222322 Eq) (App eq bool false true)))) (CaseMatch H_2333222222232333233322222232) (CaseBranches (Lambda H0_23332222222323332333222222322 (App eq comparison Lt Eq) (App (Lambda H0_233322222223233323332222223222 (App eq comparison Lt Eq) (LetIn H1_2333222222232333233322222232223 (App Coq.Init.Logic.eq_ind comparison Lt (Lambda e_2333222222232333233322222232222 comparison (Case 0 (Lambda c_23332222222323332333222222322222 comparison (Sort Prop)) (CaseMatch e_2333222222232333233322222232222) (CaseBranches False True False))) I Eq H0_233322222223233323332222223222) False (App Coq.Init.Logic.False_ind (App eq bool false true) H1_2333222222232333233322222232223))) H0_23332222222323332333222222322)))) (Prod out_23332222222323332333222222321 (App eq comparison Eq Eq) (App eq bool false true)) (App H0_23332222222323332333222222323 (App eq_refl comparison Eq)))) (Lambda H_2333222222232333233322222232 (App eq bool false true) (LetIn H0_23332222222323332333222222323 (Case 2 (Lambda y_23332222222323332333222222322 bool (Lambda out_233322222223233323332222223222 (App eq bool false y_23332222222323332333222222322) (Prod out_2333222222232333233322222232221 (App eq bool y_23332222222323332333222222322 true) (App eq comparison Lt Eq)))) (CaseMatch H_2333222222232333233322222232) (CaseBranches (Lambda H0_23332222222323332333222222322 (App eq bool false true) (App (Lambda H0_233322222223233323332222223222 (App eq bool false true) (LetIn H1_2333222222232333233322222232223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_2333222222232333233322222232222 bool (Case 0 (Lambda b_23332222222323332333222222322222 bool (Sort Prop)) (CaseMatch e_2333222222232333233322222232222) (CaseBranches False True))) I true H0_233322222223233323332222223222) False (App Coq.Init.Logic.False_ind (App eq comparison Lt Eq) H1_2333222222232333233322222232223))) H0_23332222222323332333222222322)))) (Prod out_23332222222323332333222222321 (App eq bool true true) (App eq comparison Lt Eq)) (App H0_23332222222323332333222222323 (App eq_refl bool true))))) (App conj (Prod out_2333222222232333233322222231 (App eq comparison Gt Eq) (App eq bool false true)) (Prod out_2333222222232333233322222231 (App eq bool false true) (App eq comparison Gt Eq)) (Lambda H_2333222222232333233322222232 (App eq comparison Gt Eq) (LetIn H0_23332222222323332333222222323 (Case 2 (Lambda y_23332222222323332333222222322 comparison (Lambda out_233322222223233323332222223222 (App eq comparison Gt y_23332222222323332333222222322) (Prod out_2333222222232333233322222232221 (App eq comparison y_23332222222323332333222222322 Eq) (App eq bool false true)))) (CaseMatch H_2333222222232333233322222232) (CaseBranches (Lambda H0_23332222222323332333222222322 (App eq comparison Gt Eq) (App (Lambda H0_233322222223233323332222223222 (App eq comparison Gt Eq) (LetIn H1_2333222222232333233322222232223 (App Coq.Init.Logic.eq_ind comparison Gt (Lambda e_2333222222232333233322222232222 comparison (Case 0 (Lambda c_23332222222323332333222222322222 comparison (Sort Prop)) (CaseMatch e_2333222222232333233322222232222) (CaseBranches False False True))) I Eq H0_233322222223233323332222223222) False (App Coq.Init.Logic.False_ind (App eq bool false true) H1_2333222222232333233322222232223))) H0_23332222222323332333222222322)))) (Prod out_23332222222323332333222222321 (App eq comparison Eq Eq) (App eq bool false true)) (App H0_23332222222323332333222222323 (App eq_refl comparison Eq)))) (Lambda H_2333222222232333233322222232 (App eq bool false true) (LetIn H0_23332222222323332333222222323 (Case 2 (Lambda y_23332222222323332333222222322 bool (Lambda out_233322222223233323332222223222 (App eq bool false y_23332222222323332333222222322) (Prod out_2333222222232333233322222232221 (App eq bool y_23332222222323332333222222322 true) (App eq comparison Gt Eq)))) (CaseMatch H_2333222222232333233322222232) (CaseBranches (Lambda H0_23332222222323332333222222322 (App eq bool false true) (App (Lambda H0_233322222223233323332222223222 (App eq bool false true) (LetIn H1_2333222222232333233322222232223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_2333222222232333233322222232222 bool (Case 0 (Lambda b_23332222222323332333222222322222 bool (Sort Prop)) (CaseMatch e_2333222222232333233322222232222) (CaseBranches False True))) I true H0_233322222223233323332222223222) False (App Coq.Init.Logic.False_ind (App eq comparison Gt Eq) H1_2333222222232333233322222232223))) H0_23332222222323332333222222322)))) (Prod out_23332222222323332333222222321 (App eq bool true true) (App eq comparison Gt Eq)) (App H0_23332222222323332333222222323 (App eq_refl bool true))))))))) REVERTcast (App Coq.Init.Logic.iff (App eq Z x_2333222222232333233322222 y_23332222222323332333222222) (App eq bool (App Coq.ZArith.Zbool.Zeq_bool x_2333222222232333233322222 y_23332222222323332333222222) true)))))) (Definition Coq.ZArith.Zbool.Zeq_bool_eq (Lambda x_233322222223233323332 Z (Lambda y_2333222222232333233322 Z (LetIn H_23332222222323332333223 (Lambda x_23332222222323332333222 Z (Lambda y_233322222223233323332222 Z (Case 2 (Lambda out_2333222222232333233322222 (App and (Prod out_2333222222232333233322221 (App eq Z x_23332222222323332333222 y_233322222223233323332222) (App eq bool (App Coq.ZArith.Zbool.Zeq_bool x_23332222222323332333222 y_233322222223233323332222) true)) (Prod out_2333222222232333233322221 (App eq bool (App Coq.ZArith.Zbool.Zeq_bool x_23332222222323332333222 y_233322222223233323332222) true) (App eq Z x_23332222222323332333222 y_233322222223233323332222))) (Prod out_23332222222323332333222221 (App eq bool (App Coq.ZArith.Zbool.Zeq_bool x_23332222222323332333222 y_233322222223233323332222) true) (App eq Z x_23332222222323332333222 y_233322222223233323332222))) (CaseMatch (App Coq.ZArith.Zbool.Zeq_is_eq_bool x_23332222222323332333222 y_233322222223233323332222)) (CaseBranches (Lambda out_2333222222232333233322222 (Prod out_2333222222232333233322221 (App eq Z x_23332222222323332333222 y_233322222223233323332222) (App eq bool (App Coq.ZArith.Zbool.Zeq_bool x_23332222222323332333222 y_233322222223233323332222) true)) (Lambda out_23332222222323332333222222 (Prod out_23332222222323332333222221 (App eq bool (App Coq.ZArith.Zbool.Zeq_bool x_23332222222323332333222 y_233322222223233323332222) true) (App eq Z x_23332222222323332333222 y_233322222223233323332222)) out_23332222222323332333222222)))))) (Prod x_23332222222323332333221 Z (Prod y_233322222223233323332211 Z (Prod out_2333222222232333233322111 (App eq bool (App Coq.ZArith.Zbool.Zeq_bool x_23332222222323332333221 y_233322222223233323332211) true) (App eq Z x_23332222222323332333221 y_233322222223233323332211)))) (App H_23332222222323332333223 x_233322222223233323332 y_2333222222232333233322))))) (Definition Coq.ZArith.BinIntDef.Z.pow_pos (Lambda z_233322222223233323332222 Z (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul z_233322222223233323332222) (App Zpos xH)))) (Definition Coq.ZArith.BinIntDef.Z.pow (Lambda x_233322222223233323332 Z (Lambda y_2333222222232333233322 Z (Case 0 (Lambda y_23332222222323332333222 Z Z) (CaseMatch y_2333222222232333233322) (CaseBranches (App Zpos xH) (Lambda p_23332222222323332333222 positive (App Coq.ZArith.BinIntDef.Z.pow_pos x_233322222223233323332 p_23332222222323332333222)) (Lambda p_23332222222323332333222 positive Z0)))))) (Definition Coq.setoid_ring.Ring_theory.pow_N (Lambda R_233322222223233323332222 (Sort Type) (Lambda rI_2333222222232333233322222 R_233322222223233323332222 (Lambda rmul_23332222222323332333222222 (Prod out_23332222222323332333222221 R_233322222223233323332222 (Prod out_233322222223233323332222211 R_233322222223233323332222 R_233322222223233323332222)) (Lambda x_233322222223233323332222222 R_233322222223233323332222 (Lambda p_2333222222232333233322222222 N (Case 0 (Lambda p_23332222222323332333222222222 N R_233322222223233323332222) (CaseMatch p_2333222222232333233322222222) (CaseBranches rI_2333222222232333233322222 (Lambda p_23332222222323332333222222222 positive (App Coq.setoid_ring.Ring_theory.pow_pos R_233322222223233323332222 rmul_23332222222323332333222222 x_233322222223233323332222222 p_23332222222323332333222222222)))))))))) (Definition Coq.setoid_ring.Ring_theory.pow_pos (Lambda R_233322222223233323332222 (Sort Type) (Lambda rmul_2333222222232333233322222 (Prod out_2333222222232333233322221 R_233322222223233323332222 (Prod out_23332222222323332333222211 R_233322222223233323332222 R_233322222223233323332222)) (Fix (Functions (App pow_pos 0 (Prod x_23332222222323332333222221 R_233322222223233323332222 (Prod i_233322222223233323332222211 positive R_233322222223233323332222)) (Lambda x_23332222222323332333222222 R_233322222223233323332222 (Lambda i_233322222223233323332222222 positive (Case 0 (Lambda i_2333222222232333233322222222 positive R_233322222223233323332222) (CaseMatch i_233322222223233323332222222) (CaseBranches (Lambda i_2333222222232333233322222222 positive (LetIn p_23332222222323332333222222223 (App pow_pos x_23332222222323332333222222 i_2333222222232333233322222222) R_233322222223233323332222 (App rmul_2333222222232333233322222 x_23332222222323332333222222 (App rmul_2333222222232333233322222 p_23332222222323332333222222223 p_23332222222323332333222222223)))) (Lambda i_2333222222232333233322222222 positive (LetIn p_23332222222323332333222222223 (App pow_pos x_23332222222323332333222222 i_2333222222232333233322222222) R_233322222223233323332222 (App rmul_2333222222232333233322222 p_23332222222323332333222222223 p_23332222222323332333222222223))) x_23332222222323332333222222)))))) 0)))) (Definition Coq.PArith.BinPosDef.Pos.iter (Lambda A_2333222222232333233322222 (Sort Type) (Lambda f_23332222222323332333222222 (Prod out_23332222222323332333222221 A_2333222222232333233322222 A_2333222222232333233322222) (Fix (Functions (App iter_fix 0 (Prod x_233322222223233323332222221 A_2333222222232333233322222 (Prod n_2333222222232333233322222211 positive A_2333222222232333233322222)) (Lambda x_233322222223233323332222222 A_2333222222232333233322222 (Lambda n_2333222222232333233322222222 positive (Case 0 (Lambda n_23332222222323332333222222222 positive A_2333222222232333233322222) (CaseMatch n_2333222222232333233322222222) (CaseBranches (Lambda n'_23332222222323332333222222222 positive (App f_23332222222323332333222222 (App iter_fix (App iter_fix x_233322222223233323332222222 n'_23332222222323332333222222222) n'_23332222222323332333222222222))) (Lambda n'_23332222222323332333222222222 positive (App iter_fix (App iter_fix x_233322222223233323332222222 n'_23332222222323332333222222222) n'_23332222222323332333222222222)) (App f_23332222222323332333222222 x_233322222223233323332222222))))))) 0)))) (Definition Coq.Numbers.BinNums.positive_ind (Lambda P_233322222223233323332222 (Prod p_233322222223233323332221 positive (Sort Prop)) (Lambda f_2333222222232333233322222 (Prod p_2333222222232333233322221 positive (Prod out_23332222222323332333222211 (App P_233322222223233323332222 p_2333222222232333233322221) (App P_233322222223233323332222 (App xI p_2333222222232333233322221)))) (Lambda f_23332222222323332333222222 (Prod p_23332222222323332333222221 positive (Prod out_233322222223233323332222211 (App P_233322222223233323332222 p_23332222222323332333222221) (App P_233322222223233323332222 (App xO p_23332222222323332333222221)))) (Lambda f_233322222223233323332222222 (App P_233322222223233323332222 xH) (Fix (Functions (App F 0 (Prod p_2333222222232333233322222221 positive (App P_233322222223233323332222 p_2333222222232333233322222221)) (Lambda p_2333222222232333233322222222 positive (Case 0 (Lambda p_23332222222323332333222222222 positive (App P_233322222223233323332222 p_23332222222323332333222222222)) (CaseMatch p_2333222222232333233322222222) (CaseBranches (Lambda p_23332222222323332333222222222 positive (App f_2333222222232333233322222 p_23332222222323332333222222222 (App F p_23332222222323332333222222222))) (Lambda p_23332222222323332333222222222 positive (App f_23332222222323332333222222 p_23332222222323332333222222222 (App F p_23332222222323332333222222222))) f_233322222223233323332222222))))) 0)))))) (Definition Coq.ZArith.BinInt.Z.mul_1_r (Lambda n_233322222223233323332222 Z (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Zpos xH) (App Coq.ZArith.BinIntDef.Z.succ Z0)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.succ Z0)) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism Z (Prod out_23332222222323332333222221 Z Z) (App eq Z) (App Coq.Classes.Morphisms.respectful Z Z (App eq Z) (App eq Z)) Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinInt.Z.mul_wd n_233322222223233323332222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) n_233322222223233323332222) (App Zpos xH) (App Coq.ZArith.BinIntDef.Z.succ Z0) lemma_2333222222232333233322222) n_233322222223233323332222 n_233322222223233323332222 (App Coq.Classes.Morphisms.eq_proper_proxy Z n_233322222223233323332222))) Coq.ZArith.BinInt.Z.one_succ (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.succ Z0)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 Z0) n_233322222223233323332222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.succ Z0)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 Z0) n_233322222223233323332222) lemma_2333222222232333233322222 n_233322222223233323332222 n_233322222223233323332222 (App Coq.Classes.Morphisms.eq_proper_proxy Z n_233322222223233323332222))) (App Coq.ZArith.BinInt.Z.mul_succ_r n_233322222223233323332222 Z0) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 Z0) Z0) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 Z0) n_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.add Z0 n_233322222223233323332222) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.mul n_233322222223233323332222 Z0) Z0 lemma_2333222222232333233322222 n_233322222223233323332222 n_233322222223233323332222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) n_233322222223233323332222)) n_233322222223233323332222 n_233322222223233323332222 (App Coq.Classes.Morphisms.eq_proper_proxy Z n_233322222223233323332222))) (App Coq.ZArith.BinInt.Z.mul_0_r n_233322222223233323332222) (App (Lambda lemma_2333222222232333233322222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 n_233322222223233323332222) n_233322222223233323332222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add Z0 n_233322222223233323332222) n_233322222223233323332222 lemma_2333222222232333233322222 n_233322222223233323332222 n_233322222223233323332222 (App Coq.Classes.Morphisms.eq_proper_proxy Z n_233322222223233323332222))) (App Coq.ZArith.BinInt.Z.add_0_l n_233322222223233323332222) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) n_233322222223233323332222))))))) (Definition Coq.ZArith.Zpow_def.Zpower_theory (App mkpow_th Z (App Zpos xH) Coq.ZArith.BinIntDef.Z.mul (App eq Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (Lambda r_233322222223233323332 Z (Lambda n_2333222222232333233322 N (Case 0 (Lambda n_23332222222323332333222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.pow r_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.of_N n_23332222222323332333222)) (App Coq.setoid_ring.Ring_theory.pow_N Z (App Zpos xH) Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 n_23332222222323332333222))) (CaseMatch n_2333222222232333233322) (CaseBranches (Cast (App eq_refl Z (App Zpos xH)) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.pow r_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.of_N N0)) (App Coq.setoid_ring.Ring_theory.pow_N Z (App Zpos xH) Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 N0))) (Lambda p_23332222222323332333222 positive (Cast (Cast (App Coq.Init.Logic.eq_ind Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_23332222222323332333222) (App Zpos xH)) (Lambda z_233322222223233323332222 Z (App eq Z (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) (App Zpos xH) p_23332222222323332333222) z_233322222223233323332222)) (App Coq.Numbers.BinNums.positive_ind (Lambda p_233322222223233323332222 positive (Prod z_2333222222232333233322221 Z (App eq Z (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_2333222222232333233322221 p_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_2333222222232333233322221)))) (Lambda p_233322222223233323332222 positive (Lambda IHp_2333222222232333233322222 (Prod z_2333222222232333233322221 Z (App eq Z (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_2333222222232333233322221 p_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_2333222222232333233322221))) (Cast (Lambda z_23332222222323332333222222 Z (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_23332222222323332333222222 p_233322222223233323332222)) (Lambda z_233322222223233323332222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 z_233322222223233323332222222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222))) z_23332222222323332333222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_23332222222323332333222222) (Lambda z_233322222223233323332222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_233322222223233323332222222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222))) z_23332222222323332333222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_23332222222323332333222222)) (Lambda z_233322222223233323332222222 Z (App eq Z z_233322222223233323332222222 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222))) z_23332222222323332333222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) z_23332222222323332333222222) (Lambda z_233322222223233323332222222 Z (App eq Z z_233322222223233323332222222 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222))) z_23332222222323332333222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) (Lambda z_233322222223233323332222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) z_23332222222323332333222222) (App Coq.ZArith.BinIntDef.Z.mul z_233322222223233323332222222 z_23332222222323332333222222))) (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) z_23332222222323332333222222)) (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222))) (App Coq.ZArith.BinInt.Z.mul_assoc r_233322222223233323332 (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222))) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_23332222222323332333222222)) (App Coq.ZArith.BinInt.Z.mul_assoc (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_23332222222323332333222222)) (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_23332222222323332333222222))) (App Coq.ZArith.BinInt.Z.mul_assoc r_233322222223233323332 (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_23332222222323332333222222))) (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_23332222222323332333222222 p_233322222223233323332222) (App IHp_2333222222232333233322222 z_23332222222323332333222222)) (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_23332222222323332333222222 p_233322222223233323332222) p_233322222223233323332222) (App IHp_2333222222232333233322222 (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_23332222222323332333222222 p_233322222223233323332222)))) REVERTcast (Prod z_23332222222323332333222221 Z (App eq Z (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_23332222222323332333222221 (App xI p_233322222223233323332222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App xI p_233322222223233323332222)) z_23332222222323332333222221)))))) (Lambda p_233322222223233323332222 positive (Lambda IHp_2333222222232333233322222 (Prod z_2333222222232333233322221 Z (App eq Z (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_2333222222232333233322221 p_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_2333222222232333233322221))) (Cast (Lambda z_23332222222323332333222222 Z (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_23332222222323332333222222 p_233322222223233323332222)) (Lambda z_233322222223233323332222222 Z (App eq Z z_233322222223233323332222222 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) z_23332222222323332333222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_23332222222323332333222222) (Lambda z_233322222223233323332222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_233322222223233323332222222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) z_23332222222323332333222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) z_23332222222323332333222222) (Lambda z_233322222223233323332222222 Z (App eq Z z_233322222223233323332222222 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) z_23332222222323332333222222))) (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222)) z_23332222222323332333222222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_23332222222323332333222222)) (App Coq.ZArith.BinInt.Z.mul_assoc (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_233322222223233323332222) z_23332222222323332333222222)) (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_23332222222323332333222222 p_233322222223233323332222) (App IHp_2333222222232333233322222 z_23332222222323332333222222)) (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_23332222222323332333222222 p_233322222223233323332222) p_233322222223233323332222) (App IHp_2333222222232333233322222 (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_23332222222323332333222222 p_233322222223233323332222)))) REVERTcast (Prod z_23332222222323332333222221 Z (App eq Z (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_23332222222323332333222221 (App xO p_233322222223233323332222)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App xO p_233322222223233323332222)) z_23332222222323332333222221)))))) (Cast (Lambda z_233322222223233323332222 Z (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 z_233322222223233323332222))) REVERTcast (Prod z_233322222223233323332221 Z (App eq Z (App Coq.PArith.BinPosDef.Pos.iter Z (App Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332) z_233322222223233323332221 xH) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 xH) z_233322222223233323332221)))) p_23332222222323332333222 (App Zpos xH)) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_23332222222323332333222) (App Coq.ZArith.BinInt.Z.mul_1_r (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_23332222222323332333222))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.pow_pos r_233322222223233323332 p_23332222222323332333222) (App Coq.setoid_ring.Ring_theory.pow_pos Z Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 p_23332222222323332333222))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.pow r_233322222223233323332 (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_23332222222323332333222))) (App Coq.setoid_ring.Ring_theory.pow_N Z (App Zpos xH) Coq.ZArith.BinIntDef.Z.mul r_233322222223233323332 (App Npos p_23332222222323332333222))))))))))) (Definition Coq.Setoids.Setoid.Setoid_Theory Equivalence) (Definition Coq.Setoids.Setoid.Seq_refl (Lambda A_233322222223233323332222222222 (Sort Type) (Lambda Aeq_2333222222232333233322222222222 (App Coq.Relations.Relation_Definitions.relation A_233322222223233323332222222222) (Lambda s_23332222222323332333222222222222 (App Coq.Setoids.Setoid.Setoid_Theory A_233322222223233323332222222222 Aeq_2333222222232333233322222222222) (Lambda x_233322222223233323332222222222222 A_233322222223233323332222222222 (App Coq.Classes.RelationClasses.reflexivity A_233322222223233323332222222222 Aeq_2333222222232333233322222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive A_233322222223233323332222222222 Aeq_2333222222232333233322222222222 s_23332222222323332333222222222222) x_233322222223233323332222222222222)))))) (Definition Coq.ZArith.BinInt.Z.quotrem_eq (Lambda a_233322222223233323332222222 Z (Lambda b_2333222222232333233322222222 Z (Case 0 (Lambda z_23332222222323332333222222222 Z (Case 2 (Lambda p_233322222223233323332222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem z_23332222222323332333222222222 b_2333222222232333233322222222)) (CaseBranches (Lambda q_233322222223233323332222222222 Z (Lambda r_2333222222232333233322222222222 Z (App eq Z z_23332222222323332333222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_233322222223233323332222222222 b_2333222222232333233322222222) r_2333222222232333233322222222222))))))) (CaseMatch a_233322222223233323332222222) (CaseBranches (Case 0 (Lambda z_23332222222323332333222222222 Z (Case 2 (Lambda p_233322222223233323332222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem Z0 z_23332222222323332333222222222)) (CaseBranches (Lambda q_233322222223233323332222222222 Z (Lambda r_2333222222232333233322222222222 Z (App eq Z Z0 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_233322222223233323332222222222 z_23332222222323332333222222222) r_2333222222232333233322222222222))))))) (CaseMatch b_2333222222232333233322222222) (CaseBranches (Cast (App eq_refl Z Z0) REVERTcast (Case 2 (Lambda p_23332222222323332333222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem Z0 Z0)) (CaseBranches (Lambda q_23332222222323332333222222222 Z (Lambda r_233322222223233323332222222222 Z (App eq Z Z0 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_23332222222323332333222222222 Z0) r_233322222223233323332222222222))))))) (Lambda b_23332222222323332333222222222 positive (Cast (App eq_refl Z Z0) REVERTcast (Case 2 (Lambda p_233322222223233323332222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem Z0 (App Zpos b_23332222222323332333222222222))) (CaseBranches (Lambda q_233322222223233323332222222222 Z (Lambda r_2333222222232333233322222222222 Z (App eq Z Z0 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_233322222223233323332222222222 (App Zpos b_23332222222323332333222222222)) r_2333222222232333233322222222222)))))))) (Lambda b_23332222222323332333222222222 positive (Cast (App eq_refl Z Z0) REVERTcast (Case 2 (Lambda p_233322222223233323332222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem Z0 (App Zneg b_23332222222323332333222222222))) (CaseBranches (Lambda q_233322222223233323332222222222 Z (Lambda r_2333222222232333233322222222222 Z (App eq Z Z0 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_233322222223233323332222222222 (App Zneg b_23332222222323332333222222222)) r_2333222222232333233322222222222)))))))))) (Lambda a_23332222222323332333222222222 positive (Case 0 (Lambda z_233322222223233323332222222222 Z (Case 2 (Lambda p_2333222222232333233322222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem (App Zpos a_23332222222323332333222222222) z_233322222223233323332222222222)) (CaseBranches (Lambda q_2333222222232333233322222222222 Z (Lambda r_23332222222323332333222222222222 Z (App eq Z (App Zpos a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_2333222222232333233322222222222 z_233322222223233323332222222222) r_23332222222323332333222222222222))))))) (CaseMatch b_2333222222232333233322222222) (CaseBranches (Cast (App eq_refl Z (App Zpos a_23332222222323332333222222222)) REVERTcast (Case 2 (Lambda p_233322222223233323332222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem (App Zpos a_23332222222323332333222222222) Z0)) (CaseBranches (Lambda q_233322222223233323332222222222 Z (Lambda r_2333222222232333233322222222222 Z (App eq Z (App Zpos a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_233322222223233323332222222222 Z0) r_2333222222232333233322222222222))))))) (Lambda b_233322222223233323332222222222 positive (Cast (App (Case 2 (Lambda p_2333222222232333233322222222222 (App prod N N) (Prod out_23332222222323332333222222222221 (Case 2 (Lambda p_23332222222323332333222222222222 (App prod N N) (Sort Prop)) (CaseMatch p_2333222222232333233322222222222) (CaseBranches (Lambda q_23332222222323332333222222222222 N (Lambda r_233322222223233323332222222222222 N (App eq N (App Npos a_23332222222323332333222222222) (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_23332222222323332333222222222222 (App Npos b_233322222223233323332222222222)) r_233322222223233323332222222222222)))))) (Case 2 (Lambda p_233322222223233323332222222222212 (App prod Z Z) (Sort Prop)) (CaseMatch (Case 2 (Lambda p_233322222223233323332222222222212 (App prod N N) (App prod Z Z)) (CaseMatch p_2333222222232333233322222222222) (CaseBranches (Lambda q_233322222223233323332222222222212 N (Lambda r_2333222222232333233322222222222122 N (App pair Z Z (App Coq.ZArith.BinIntDef.Z.of_N q_233322222223233323332222222222212) (App Coq.ZArith.BinIntDef.Z.of_N r_2333222222232333233322222222222122))))))) (CaseBranches (Lambda q_233322222223233323332222222222212 Z (Lambda r_2333222222232333233322222222222122 Z (App eq Z (App Zpos a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_233322222223233323332222222222212 (App Zpos b_233322222223233323332222222222)) r_2333222222232333233322222222222122)))))))) (CaseMatch (App Coq.NArith.BinNatDef.N.pos_div_eucl a_23332222222323332333222222222 (App Npos b_233322222223233323332222222222))) (CaseBranches (Lambda q_2333222222232333233322222222222 N (Lambda r_23332222222323332333222222222222 N (Lambda H_233322222223233323332222222222222 (App eq N (App Npos a_23332222222323332333222222222) (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_2333222222232333233322222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222)) (App Coq.Init.Logic.eq_ind_r N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_2333222222232333233322222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222) (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N q_2333222222232333233322222222222) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N r_23332222222323332333222222222222)))) (Case 0 (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul n_2333222222232333233322222222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N r_23332222222323332333222222222222)))) (CaseMatch q_2333222222232333233322222222222) (CaseBranches (Case 0 (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul N0 (App Npos b_233322222223233323332222222222)) n_2333222222232333233322222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N N0) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222)))) (CaseMatch r_23332222222323332333222222222222) (CaseBranches (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N N0) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N N0))) (Lambda p_2333222222232333233322222222222222 positive (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N N0) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222))))))) (Lambda p_2333222222232333233322222222222222 positive (Case 0 (Lambda n_23332222222323332333222222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul (App Npos p_2333222222232333233322222222222222) (App Npos b_233322222223233323332222222222)) n_23332222222323332333222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222)) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N n_23332222222323332333222222222222222)))) (CaseMatch r_23332222222323332333222222222222) (CaseBranches (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222)) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N N0))) (Lambda p0_23332222222323332333222222222222222 positive (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222)) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p0_23332222222323332333222222222222222)))))))))) (App Npos a_23332222222323332333222222222) H_233322222223233323332222222222222)))))) (App Coq.NArith.BinNat.N.pos_div_eucl_spec a_23332222222323332333222222222 (App Npos b_233322222223233323332222222222))) REVERTcast (Case 2 (Lambda p_2333222222232333233322222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem (App Zpos a_23332222222323332333222222222) (App Zpos b_233322222223233323332222222222))) (CaseBranches (Lambda q_2333222222232333233322222222222 Z (Lambda r_23332222222323332333222222222222 Z (App eq Z (App Zpos a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_2333222222232333233322222222222 (App Zpos b_233322222223233323332222222222)) r_23332222222323332333222222222222)))))))) (Lambda b_233322222223233323332222222222 positive (Cast (App (Case 2 (Lambda p_2333222222232333233322222222222 (App prod N N) (Prod out_23332222222323332333222222222221 (Case 2 (Lambda p_23332222222323332333222222222222 (App prod N N) (Sort Prop)) (CaseMatch p_2333222222232333233322222222222) (CaseBranches (Lambda q_23332222222323332333222222222222 N (Lambda r_233322222223233323332222222222222 N (App eq N (App Npos a_23332222222323332333222222222) (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_23332222222323332333222222222222 (App Npos b_233322222223233323332222222222)) r_233322222223233323332222222222222)))))) (Case 2 (Lambda p_233322222223233323332222222222212 (App prod Z Z) (Sort Prop)) (CaseMatch (Case 2 (Lambda p_233322222223233323332222222222212 (App prod N N) (App prod Z Z)) (CaseMatch p_2333222222232333233322222222222) (CaseBranches (Lambda q_233322222223233323332222222222212 N (Lambda r_2333222222232333233322222222222122 N (App pair Z Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N q_233322222223233323332222222222212)) (App Coq.ZArith.BinIntDef.Z.of_N r_2333222222232333233322222222222122))))))) (CaseBranches (Lambda q_233322222223233323332222222222212 Z (Lambda r_2333222222232333233322222222222122 Z (App eq Z (App Zpos a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_233322222223233323332222222222212 (App Zneg b_233322222223233323332222222222)) r_2333222222232333233322222222222122)))))))) (CaseMatch (App Coq.NArith.BinNatDef.N.pos_div_eucl a_23332222222323332333222222222 (App Npos b_233322222223233323332222222222))) (CaseBranches (Lambda q_2333222222232333233322222222222 N (Lambda r_23332222222323332333222222222222 N (Lambda H_233322222223233323332222222222222 (App eq N (App Npos a_23332222222323332333222222222) (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_2333222222232333233322222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222)) (App Coq.Init.Logic.eq_ind_r N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_2333222222232333233322222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222) (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N q_2333222222232333233322222222222)) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N r_23332222222323332333222222222222)))) (Case 0 (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul n_2333222222232333233322222222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222)) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N r_23332222222323332333222222222222)))) (CaseMatch q_2333222222232333233322222222222) (CaseBranches (Case 0 (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul N0 (App Npos b_233322222223233323332222222222)) n_2333222222232333233322222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N N0)) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222)))) (CaseMatch r_23332222222323332333222222222222) (CaseBranches (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N N0)) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N N0))) (Lambda p_2333222222232333233322222222222222 positive (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N N0)) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222))))))) (Lambda p_2333222222232333233322222222222222 positive (Case 0 (Lambda n_23332222222323332333222222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul (App Npos p_2333222222232333233322222222222222) (App Npos b_233322222223233323332222222222)) n_23332222222323332333222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222))) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N n_23332222222323332333222222222222222)))) (CaseMatch r_23332222222323332333222222222222) (CaseBranches (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222))) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N N0))) (Lambda p0_23332222222323332333222222222222222 positive (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222))) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p0_23332222222323332333222222222222222)))))))))) (App Npos a_23332222222323332333222222222) H_233322222223233323332222222222222)))))) (App Coq.NArith.BinNat.N.pos_div_eucl_spec a_23332222222323332333222222222 (App Npos b_233322222223233323332222222222))) REVERTcast (Case 2 (Lambda p_2333222222232333233322222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem (App Zpos a_23332222222323332333222222222) (App Zneg b_233322222223233323332222222222))) (CaseBranches (Lambda q_2333222222232333233322222222222 Z (Lambda r_23332222222323332333222222222222 Z (App eq Z (App Zpos a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_2333222222232333233322222222222 (App Zneg b_233322222223233323332222222222)) r_23332222222323332333222222222222))))))))))) (Lambda a_23332222222323332333222222222 positive (Case 0 (Lambda z_233322222223233323332222222222 Z (Case 2 (Lambda p_2333222222232333233322222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem (App Zneg a_23332222222323332333222222222) z_233322222223233323332222222222)) (CaseBranches (Lambda q_2333222222232333233322222222222 Z (Lambda r_23332222222323332333222222222222 Z (App eq Z (App Zneg a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_2333222222232333233322222222222 z_233322222223233323332222222222) r_23332222222323332333222222222222))))))) (CaseMatch b_2333222222232333233322222222) (CaseBranches (Cast (App eq_refl Z (App Zneg a_23332222222323332333222222222)) REVERTcast (Case 2 (Lambda p_233322222223233323332222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem (App Zneg a_23332222222323332333222222222) Z0)) (CaseBranches (Lambda q_233322222223233323332222222222 Z (Lambda r_2333222222232333233322222222222 Z (App eq Z (App Zneg a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_233322222223233323332222222222 Z0) r_2333222222232333233322222222222))))))) (Lambda b_233322222223233323332222222222 positive (Cast (App (Case 2 (Lambda p_2333222222232333233322222222222 (App prod N N) (Prod out_23332222222323332333222222222221 (Case 2 (Lambda p_23332222222323332333222222222222 (App prod N N) (Sort Prop)) (CaseMatch p_2333222222232333233322222222222) (CaseBranches (Lambda q_23332222222323332333222222222222 N (Lambda r_233322222223233323332222222222222 N (App eq N (App Npos a_23332222222323332333222222222) (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_23332222222323332333222222222222 (App Npos b_233322222223233323332222222222)) r_233322222223233323332222222222222)))))) (Case 2 (Lambda p_233322222223233323332222222222212 (App prod Z Z) (Sort Prop)) (CaseMatch (Case 2 (Lambda p_233322222223233323332222222222212 (App prod N N) (App prod Z Z)) (CaseMatch p_2333222222232333233322222222222) (CaseBranches (Lambda q_233322222223233323332222222222212 N (Lambda r_2333222222232333233322222222222122 N (App pair Z Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N q_233322222223233323332222222222212)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N r_2333222222232333233322222222222122)))))))) (CaseBranches (Lambda q_233322222223233323332222222222212 Z (Lambda r_2333222222232333233322222222222122 Z (App eq Z (App Zneg a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_233322222223233323332222222222212 (App Zpos b_233322222223233323332222222222)) r_2333222222232333233322222222222122)))))))) (CaseMatch (App Coq.NArith.BinNatDef.N.pos_div_eucl a_23332222222323332333222222222 (App Npos b_233322222223233323332222222222))) (CaseBranches (Lambda q_2333222222232333233322222222222 N (Lambda r_23332222222323332333222222222222 N (Lambda H_233322222223233323332222222222222 (App eq N (App Npos a_23332222222323332333222222222) (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_2333222222232333233322222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222)) (App Coq.Init.Logic.eq_ind_r N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_2333222222232333233322222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222) (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N q_2333222222232333233322222222222)) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N r_23332222222323332333222222222222))))) (Case 0 (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul n_2333222222232333233322222222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222)) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N r_23332222222323332333222222222222))))) (CaseMatch q_2333222222232333233322222222222) (CaseBranches (Case 0 (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul N0 (App Npos b_233322222223233323332222222222)) n_2333222222232333233322222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N N0)) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222))))) (CaseMatch r_23332222222323332333222222222222) (CaseBranches (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N N0)) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N N0)))) (Lambda p_2333222222232333233322222222222222 positive (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N N0)) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222)))))))) (Lambda p_2333222222232333233322222222222222 positive (Case 0 (Lambda n_23332222222323332333222222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul (App Npos p_2333222222232333233322222222222222) (App Npos b_233322222223233323332222222222)) n_23332222222323332333222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222))) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N n_23332222222323332333222222222222222))))) (CaseMatch r_23332222222323332333222222222222) (CaseBranches (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222))) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N N0)))) (Lambda p0_23332222222323332333222222222222222 positive (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222))) (App Zpos b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p0_23332222222323332333222222222222222))))))))))) (App Npos a_23332222222323332333222222222) H_233322222223233323332222222222222)))))) (App Coq.NArith.BinNat.N.pos_div_eucl_spec a_23332222222323332333222222222 (App Npos b_233322222223233323332222222222))) REVERTcast (Case 2 (Lambda p_2333222222232333233322222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem (App Zneg a_23332222222323332333222222222) (App Zpos b_233322222223233323332222222222))) (CaseBranches (Lambda q_2333222222232333233322222222222 Z (Lambda r_23332222222323332333222222222222 Z (App eq Z (App Zneg a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_2333222222232333233322222222222 (App Zpos b_233322222223233323332222222222)) r_23332222222323332333222222222222)))))))) (Lambda b_233322222223233323332222222222 positive (Cast (App (Case 2 (Lambda p_2333222222232333233322222222222 (App prod N N) (Prod out_23332222222323332333222222222221 (Case 2 (Lambda p_23332222222323332333222222222222 (App prod N N) (Sort Prop)) (CaseMatch p_2333222222232333233322222222222) (CaseBranches (Lambda q_23332222222323332333222222222222 N (Lambda r_233322222223233323332222222222222 N (App eq N (App Npos a_23332222222323332333222222222) (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_23332222222323332333222222222222 (App Npos b_233322222223233323332222222222)) r_233322222223233323332222222222222)))))) (Case 2 (Lambda p_233322222223233323332222222222212 (App prod Z Z) (Sort Prop)) (CaseMatch (Case 2 (Lambda p_233322222223233323332222222222212 (App prod N N) (App prod Z Z)) (CaseMatch p_2333222222232333233322222222222) (CaseBranches (Lambda q_233322222223233323332222222222212 N (Lambda r_2333222222232333233322222222222122 N (App pair Z Z (App Coq.ZArith.BinIntDef.Z.of_N q_233322222223233323332222222222212) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N r_2333222222232333233322222222222122)))))))) (CaseBranches (Lambda q_233322222223233323332222222222212 Z (Lambda r_2333222222232333233322222222222122 Z (App eq Z (App Zneg a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_233322222223233323332222222222212 (App Zneg b_233322222223233323332222222222)) r_2333222222232333233322222222222122)))))))) (CaseMatch (App Coq.NArith.BinNatDef.N.pos_div_eucl a_23332222222323332333222222222 (App Npos b_233322222223233323332222222222))) (CaseBranches (Lambda q_2333222222232333233322222222222 N (Lambda r_23332222222323332333222222222222 N (Lambda H_233322222223233323332222222222222 (App eq N (App Npos a_23332222222323332333222222222) (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_2333222222232333233322222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222)) (App Coq.Init.Logic.eq_ind_r N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul q_2333222222232333233322222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222) (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N q_2333222222232333233322222222222) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N r_23332222222323332333222222222222))))) (Case 0 (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul n_2333222222232333233322222222222222 (App Npos b_233322222223233323332222222222)) r_23332222222323332333222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N r_23332222222323332333222222222222))))) (CaseMatch q_2333222222232333233322222222222) (CaseBranches (Case 0 (Lambda n_2333222222232333233322222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul N0 (App Npos b_233322222223233323332222222222)) n_2333222222232333233322222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N N0) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N n_2333222222232333233322222222222222))))) (CaseMatch r_23332222222323332333222222222222) (CaseBranches (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N N0) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N N0)))) (Lambda p_2333222222232333233322222222222222 positive (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N N0) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222)))))))) (Lambda p_2333222222232333233322222222222222 positive (Case 0 (Lambda n_23332222222323332333222222222222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.mul (App Npos p_2333222222232333233322222222222222) (App Npos b_233322222223233323332222222222)) n_23332222222323332333222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222)) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N n_23332222222323332333222222222222222))))) (CaseMatch r_23332222222323332333222222222222) (CaseBranches (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222)) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N N0)))) (Lambda p0_23332222222323332333222222222222222 positive (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p_2333222222232333233322222222222222)) (App Zneg b_233322222223233323332222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.of_N (App Npos p0_23332222222323332333222222222222222))))))))))) (App Npos a_23332222222323332333222222222) H_233322222223233323332222222222222)))))) (App Coq.NArith.BinNat.N.pos_div_eucl_spec a_23332222222323332333222222222 (App Npos b_233322222223233323332222222222))) REVERTcast (Case 2 (Lambda p_2333222222232333233322222222222 (App prod Z Z) (Sort Prop)) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem (App Zneg a_23332222222323332333222222222) (App Zneg b_233322222223233323332222222222))) (CaseBranches (Lambda q_2333222222232333233322222222222 Z (Lambda r_23332222222323332333222222222222 Z (App eq Z (App Zneg a_23332222222323332333222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_2333222222232333233322222222222 (App Zneg b_233322222223233323332222222222)) r_23332222222323332333222222222222)))))))))))))))) (Definition Coq.setoid_ring.InitialRing.Ztriv_div_th (Lambda R_233322222223233323332 (Sort Type) (Lambda req_2333222222232333233322 (Prod out_2333222222232333233321 R_233322222223233323332 (Prod out_23332222222323332333211 R_233322222223233323332 (Sort Prop))) (Lambda Rsth_23332222222323332333222 (App Coq.Setoids.Setoid.Setoid_Theory R_233322222223233323332 req_2333222222232333233322) (Lambda zphi_233322222223233323332222 (Prod out_233322222223233323332221 Z R_233322222223233323332) (App mkdiv_th R_233322222223233323332 req_2333222222232333233322 Z Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul zphi_233322222223233323332222 Coq.ZArith.BinIntDef.Z.quotrem (Lambda a_2333222222232333233322222 Z (Lambda b_23332222222323332333222222 Z (App (Case 2 (Lambda p_233322222223233323332222222 (App prod Z Z) (Prod out_2333222222232333233322222221 (Case 2 (Lambda p_2333222222232333233322222222 (App prod Z Z) (Sort Prop)) (CaseMatch p_233322222223233323332222222) (CaseBranches (Lambda q_2333222222232333233322222222 Z (Lambda r_23332222222323332333222222222 Z (App eq Z a_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul q_2333222222232333233322222222 b_23332222222323332333222222) r_23332222222323332333222222222)))))) (Case 2 (Lambda p_23332222222323332333222222212 (App prod Z Z) (Sort Prop)) (CaseMatch p_233322222223233323332222222) (CaseBranches (Lambda q_23332222222323332333222222212 Z (Lambda r_233322222223233323332222222122 Z (App req_2333222222232333233322 (App zphi_233322222223233323332222 a_2333222222232333233322222) (App zphi_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul b_23332222222323332333222222 q_23332222222323332333222222212) r_233322222223233323332222222122))))))))) (CaseMatch (App Coq.ZArith.BinIntDef.Z.quotrem a_2333222222232333233322222 b_23332222222323332333222222)) (CaseBranches (Lambda z_233322222223233323332222222 Z (Lambda z0_2333222222232333233322222222 Z (Lambda H_23332222222323332333222222222 (App eq Z a_2333222222232333233322222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul z_233322222223233323332222222 b_23332222222323332333222222) z0_2333222222232333233322222222)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul z_233322222223233323332222222 b_23332222222323332333222222) z0_2333222222232333233322222222) (Lambda a_233322222223233323332222222222 Z (App req_2333222222232333233322 (App zphi_233322222223233323332222 a_233322222223233323332222222222) (App zphi_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul b_23332222222323332333222222 z_233322222223233323332222222) z0_2333222222232333233322222222)))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul b_23332222222323332333222222 z_233322222223233323332222222) (Lambda z_233322222223233323332222222222 Z (App req_2333222222232333233322 (App zphi_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add z_233322222223233323332222222222 z0_2333222222232333233322222222)) (App zphi_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul b_23332222222323332333222222 z_233322222223233323332222222) z0_2333222222232333233322222222)))) (App Coq.Setoids.Setoid.Seq_refl R_233322222223233323332 req_2333222222232333233322 Rsth_23332222222323332333222 (App zphi_233322222223233323332222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul b_23332222222323332333222222 z_233322222223233323332222222) z0_2333222222232333233322222222))) (App Coq.ZArith.BinIntDef.Z.mul z_233322222223233323332222222 b_23332222222323332333222222) (App Coq.ZArith.BinInt.Z.mul_comm z_233322222223233323332222222 b_23332222222323332333222222)) a_2333222222232333233322222 H_23332222222323332333222222222)))))) (App Coq.ZArith.BinInt.Z.quotrem_eq a_2333222222232333233322222 b_23332222222323332333222222)))))))))) (Definition Coq.setoid_ring.InitialRing.get_signZ (Lambda z_233322222223233323332 Z (Case 0 (Lambda z_2333222222232333233322 Z (App option Z)) (CaseMatch z_233322222223233323332) (CaseBranches (App None Z) (Lambda p_2333222222232333233322 positive (App None Z)) (Lambda p_2333222222232333233322 positive (App Some Z (App Zpos p_2333222222232333233322))))))) (Definition Coq.ZArith.BinInt.Z.compare_refl (Lambda x_233322222223233323332222322 Z (LetIn H_2333222222232333233322223223 (Lambda x_2333222222232333233322223222 Z (Lambda y_23332222222323332333222232222 Z (Case 2 (Lambda out_233322222223233323332222322222 (App and (Prod out_233322222223233323332222322221 (App eq comparison (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322223222 y_23332222222323332333222232222) Eq) (App eq Z x_2333222222232333233322223222 y_23332222222323332333222232222)) (Prod out_233322222223233323332222322221 (App eq Z x_2333222222232333233322223222 y_23332222222323332333222232222) (App eq comparison (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322223222 y_23332222222323332333222232222) Eq))) (Prod out_2333222222232333233322223222221 (App eq Z x_2333222222232333233322223222 y_23332222222323332333222232222) (App eq comparison (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322223222 y_23332222222323332333222232222) Eq))) (CaseMatch (App Coq.ZArith.BinInt.Z.compare_eq_iff x_2333222222232333233322223222 y_23332222222323332333222232222)) (CaseBranches (Lambda out_233322222223233323332222322222 (Prod out_233322222223233323332222322221 (App eq comparison (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322223222 y_23332222222323332333222232222) Eq) (App eq Z x_2333222222232333233322223222 y_23332222222323332333222232222)) (Lambda out_2333222222232333233322223222222 (Prod out_2333222222232333233322223222221 (App eq Z x_2333222222232333233322223222 y_23332222222323332333222232222) (App eq comparison (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322223222 y_23332222222323332333222232222) Eq)) out_2333222222232333233322223222222)))))) (Prod x_2333222222232333233322223221 Z (Prod y_23332222222323332333222232211 Z (Prod out_233322222223233323332222322111 (App eq Z x_2333222222232333233322223221 y_23332222222323332333222232211) (App eq comparison (App Coq.ZArith.BinIntDef.Z.compare x_2333222222232333233322223221 y_23332222222323332333222232211) Eq)))) (App H_2333222222232333233322223223 x_233322222223233323332222322 x_233322222223233323332222322 (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) x_233322222223233323332222322))))) (Definition Coq.setoid_ring.InitialRing.get_signZ_th (App mksign_th Z Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.setoid_ring.InitialRing.get_signZ (Lambda c_233322222223233323332 Z (Case 0 (Lambda z_2333222222232333233322 Z (Prod c'_23332222222323332333221 Z (Prod out_233322222223233323332211 (App eq (App option Z) (App Coq.setoid_ring.InitialRing.get_signZ z_2333222222232333233322) (App Some Z c'_23332222222323332333221)) (App eq bool (App Coq.ZArith.Zbool.Zeq_bool z_2333222222232333233322 (App Coq.ZArith.BinIntDef.Z.opp c'_23332222222323332333221)) true)))) (CaseMatch c_233322222223233323332) (CaseBranches (Lambda c'_2333222222232333233322 Z (Lambda H_23332222222323332333222 (App eq (App option Z) (App Coq.setoid_ring.InitialRing.get_signZ Z0) (App Some Z c'_2333222222232333233322)) (LetIn H0_233322222223233323332223 (App Coq.Init.Logic.eq_ind (App option Z) (App Coq.setoid_ring.InitialRing.get_signZ Z0) (Lambda e_233322222223233323332222 (App option Z) (Case 1 (Lambda o_2333222222232333233322222 (App option Z) (Sort Prop)) (CaseMatch e_233322222223233323332222) (CaseBranches (Lambda out_2333222222232333233322222 Z False) True))) I (App Some Z c'_2333222222232333233322) H_23332222222323332333222) False (App Coq.Init.Logic.False_ind (App eq bool (App Coq.ZArith.Zbool.Zeq_bool Z0 (App Coq.ZArith.BinIntDef.Z.opp c'_2333222222232333233322)) true) H0_233322222223233323332223)))) (Lambda p_2333222222232333233322 positive (Lambda c'_23332222222323332333222 Z (Lambda H_233322222223233323332222 (App eq (App option Z) (App Coq.setoid_ring.InitialRing.get_signZ (App Zpos p_2333222222232333233322)) (App Some Z c'_23332222222323332333222)) (LetIn H0_2333222222232333233322223 (App Coq.Init.Logic.eq_ind (App option Z) (App Coq.setoid_ring.InitialRing.get_signZ (App Zpos p_2333222222232333233322)) (Lambda e_2333222222232333233322222 (App option Z) (Case 1 (Lambda o_23332222222323332333222222 (App option Z) (Sort Prop)) (CaseMatch e_2333222222232333233322222) (CaseBranches (Lambda out_23332222222323332333222222 Z False) True))) I (App Some Z c'_23332222222323332333222) H_233322222223233323332222) False (App Coq.Init.Logic.False_ind (App eq bool (App Coq.ZArith.Zbool.Zeq_bool (App Zpos p_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.opp c'_23332222222323332333222)) true) H0_2333222222232333233322223))))) (Lambda p_2333222222232333233322 positive (Lambda c'_23332222222323332333222 Z (Lambda H_233322222223233323332222 (App eq (App option Z) (App Coq.setoid_ring.InitialRing.get_signZ (App Zneg p_2333222222232333233322)) (App Some Z c'_23332222222323332333222)) (LetIn H0_2333222222232333233322223 (App Coq.Init.Logic.f_equal (App option Z) Z (Lambda e_2333222222232333233322222 (App option Z) (Case 1 (Lambda o_23332222222323332333222222 (App option Z) Z) (CaseMatch e_2333222222232333233322222) (CaseBranches (Lambda z_23332222222323332333222222 Z z_23332222222323332333222222) (App Zpos p_2333222222232333233322)))) (App Coq.setoid_ring.InitialRing.get_signZ (App Zneg p_2333222222232333233322)) (App Some Z c'_23332222222323332333222) H_233322222223233323332222) (App eq Z (App Zpos p_2333222222232333233322) c'_23332222222323332333222) (App (Lambda H_23332222222323332333222232 (App eq Z (App Zpos p_2333222222232333233322) c'_23332222222323332333222) (App Coq.Init.Logic.eq_ind Z (App Zpos p_2333222222232333233322) (Lambda c'_233322222223233323332222322 Z (App eq bool (App Coq.ZArith.Zbool.Zeq_bool (App Zneg p_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.opp c'_233322222223233323332222322)) true)) (Cast (Cast (App Coq.Init.Logic.eq_ind_r comparison Eq (Lambda c_233322222223233323332222322 comparison (App eq bool (Case 0 (Lambda x_2333222222232333233322223222 comparison bool) (CaseMatch c_233322222223233323332222322) (CaseBranches true false false)) true)) (App eq_refl bool true) (App Coq.ZArith.BinIntDef.Z.compare (App Zneg p_2333222222232333233322) (App Zneg p_2333222222232333233322)) (App Coq.ZArith.BinInt.Z.compare_refl (App Zneg p_2333222222232333233322))) REVERTcast (App eq bool (App Coq.ZArith.Zbool.Zeq_bool (App Zneg p_2333222222232333233322) (App Zneg p_2333222222232333233322)) true)) REVERTcast (App eq bool (App Coq.ZArith.Zbool.Zeq_bool (App Zneg p_2333222222232333233322) (App Coq.ZArith.BinIntDef.Z.opp (App Zpos p_2333222222232333233322))) true)) c'_23332222222323332333222 H_23332222222323332333222232)) H0_2333222222232333233322223)))))))))) (Definition Coq.setoid_ring.ZArithRing.Zr_ring_lemma2 (App Coq.setoid_ring.Ring_polynom.ring_rw_pow_correct Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp (App eq Z) (App Coq.setoid_ring.Ring_theory.Eqsth Z) (App Coq.setoid_ring.Ring_theory.Eq_ext Z Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.opp) (App Coq.setoid_ring.Ring_theory.Rth_ARth Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp (App eq Z) (App Coq.setoid_ring.Ring_theory.Eqsth Z) (App Coq.setoid_ring.Ring_theory.Eq_ext Z Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.opp) Coq.setoid_ring.InitialRing.Zth) Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) (App Coq.setoid_ring.Ring_theory.IDmorph Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp (App eq Z) (App Coq.setoid_ring.Ring_theory.Eqsth Z) Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.Zbool.Zeq_bool_eq) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.ZArith.Zpow_def.Zpower_theory Coq.ZArith.BinIntDef.Z.quotrem (App Coq.setoid_ring.InitialRing.Ztriv_div_th Z (App eq Z) (App Coq.setoid_ring.Ring_theory.Eqsth Z) (App Coq.setoid_ring.Ring_theory.IDphi Z)) Coq.setoid_ring.InitialRing.get_signZ Coq.setoid_ring.InitialRing.get_signZ_th)) (Definition Coq.Init.Nat.mul (Fix (Functions (App mul 0 (Prod n_233322222223233323331 nat (Prod m_2333222222232333233311 nat nat)) (Lambda n_233322222223233323332 nat (Lambda m_2333222222232333233322 nat (Case 0 (Lambda n_23332222222323332333222 nat nat) (CaseMatch n_233322222223233323332) (CaseBranches O (Lambda p_23332222222323332333222 nat (App Coq.Init.Nat.add m_2333222222232333233322 (App mul p_23332222222323332333222 m_2333222222232333233322))))))))) 0)) (Definition Coq.setoid_ring.Ring_tac.ring_subst_niter (App Coq.Init.Nat.mul (App Coq.Init.Nat.mul (App S (App S (App S (App S (App S (App S (App S (App S (App S (App S O)))))))))) (App S (App S (App S (App S (App S (App S (App S (App S (App S (App S O))))))))))) (App S (App S (App S (App S (App S (App S (App S (App S (App S (App S O)))))))))))) (Definition ExportProof.intersection_morphism (Cast (Lambda A_233322222223233323333333333232222232333333333332333333333322222 ExportProof.set (Lambda B_2333222222232333233333333332322222323333333333323333333333222222 ExportProof.set (Lambda E_23332222222323332333333333323222223233333333333233333333332222222 (App ExportProof.set_eq A_233322222223233323333333333232222232333333333332333333333322222 B_2333222222232333233333333332322222323333333333323333333333222222) (Cast (Lambda C_233322222223233323333333333232222232333333333332333333333322222222 ExportProof.set (Lambda D_2333222222232333233333333332322222323333333333323333333333222222222 ExportProof.set (Lambda F_23332222222323332333333333323222223233333333333233333333332222222222 (App ExportProof.set_eq C_233322222223233323333333333232222232333333333332333333333322222222 D_2333222222232333233333333332322222323333333333323333333333222222222) (Cast (Lambda x_233322222223233323333333333232222232333333333332333333333322222222222 (Axiom ExportProof.X) (Cast (App Coq.Init.Logic.eq_ind_r bool (App B_2333222222232333233333333332322222323333333333323333333333222222 x_233322222223233323333333333232222232333333333332333333333322222222222) (Lambda b_2333222222232333233333333332322222323333333333323333333333222222222222 bool (App eq bool (App Coq.Init.Datatypes.andb b_2333222222232333233333333332322222323333333333323333333333222222222222 (App C_233322222223233323333333333232222232333333333332333333333322222222 x_233322222223233323333333333232222232333333333332333333333322222222222)) (App Coq.Init.Datatypes.andb (App B_2333222222232333233333333332322222323333333333323333333333222222 x_233322222223233323333333333232222232333333333332333333333322222222222) (App D_2333222222232333233333333332322222323333333333323333333333222222222 x_233322222223233323333333333232222232333333333332333333333322222222222)))) (App Coq.Init.Logic.eq_ind_r bool (App D_2333222222232333233333333332322222323333333333323333333333222222222 x_233322222223233323333333333232222232333333333332333333333322222222222) (Lambda b_2333222222232333233333333332322222323333333333323333333333222222222222 bool (App eq bool (App Coq.Init.Datatypes.andb (App B_2333222222232333233333333332322222323333333333323333333333222222 x_233322222223233323333333333232222232333333333332333333333322222222222) b_2333222222232333233333333332322222323333333333323333333333222222222222) (App Coq.Init.Datatypes.andb (App B_2333222222232333233333333332322222323333333333323333333333222222 x_233322222223233323333333333232222232333333333332333333333322222222222) (App D_2333222222232333233333333332322222323333333333323333333333222222222 x_233322222223233323333333333232222232333333333332333333333322222222222)))) (App eq_refl bool (App Coq.Init.Datatypes.andb (App B_2333222222232333233333333332322222323333333333323333333333222222 x_233322222223233323333333333232222232333333333332333333333322222222222) (App D_2333222222232333233333333332322222323333333333323333333333222222222 x_233322222223233323333333333232222232333333333332333333333322222222222))) (App C_233322222223233323333333333232222232333333333332333333333322222222 x_233322222223233323333333333232222232333333333332333333333322222222222) (App F_23332222222323332333333333323222223233333333333233333333332222222222 x_233322222223233323333333333232222232333333333332333333333322222222222)) (App A_233322222223233323333333333232222232333333333332333333333322222 x_233322222223233323333333333232222232333333333332333333333322222222222) (App E_23332222222323332333333333323222223233333333333233333333332222222 x_233322222223233323333333333232222232333333333332333333333322222222222)) REVERTcast (App eq bool (App ExportProof.binary_intersection A_233322222223233323333333333232222232333333333332333333333322222 C_233322222223233323333333333232222232333333333332333333333322222222 x_233322222223233323333333333232222232333333333332333333333322222222222) (App ExportProof.binary_intersection B_2333222222232333233333333332322222323333333333323333333333222222 D_2333222222232333233333333332322222323333333333323333333333222222222 x_233322222223233323333333333232222232333333333332333333333322222222222)))) REVERTcast (App ExportProof.set_eq (App ExportProof.binary_intersection A_233322222223233323333333333232222232333333333332333333333322222 C_233322222223233323333333333232222232333333333332333333333322222222) (App ExportProof.binary_intersection B_2333222222232333233333333332322222323333333333323333333333222222 D_2333222222232333233333333332322222323333333333323333333333222222222)))))) REVERTcast (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq (App ExportProof.binary_intersection A_233322222223233323333333333232222232333333333332333333333322222) (App ExportProof.binary_intersection B_2333222222232333233333333332322222323333333333323333333333222222)))))) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod out_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set ExportProof.set)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection))) (Definition Coq.setoid_ring.Ring_polynom.Peq_ok (Lambda R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (Sort Type) (Lambda rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (Lambda rI_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (Lambda radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222221 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222211 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222)) (Lambda rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222221 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222211 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222)) (Lambda rsub_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222221 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222211 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222)) (Lambda ropp_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222221 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (Lambda req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222221 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222211 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (Sort Prop))) (Lambda Rsth_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222 (App Equivalence R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222) (Lambda Reqe_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222 (App ring_eq_ext R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 ropp_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222) (Lambda C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Sort Type) (Lambda cO_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Lambda cI_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Lambda cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222211 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222)) (Lambda cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222211 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222)) (Lambda csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222211 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222)) (Lambda copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Lambda ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222211 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 bool)) (Lambda phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (Lambda CRmorph_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222 (App ring_morph R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 rI_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 rsub_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222 ropp_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222) (Lambda P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Lambda P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Cast (App Coq.setoid_ring.Ring_polynom.Pol_ind C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Lambda P_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Prod P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222221 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222211 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222221) true) (Prod l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222111 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222111 P_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222111 P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222221)))))) (Lambda c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Lambda P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Case 1 (Lambda p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222) true) (Prod l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222211 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222211 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222))))) (CaseMatch P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda c0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Cast (Lambda H_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 (App eq bool (App ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 c0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222) true) (Lambda l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.morph_eq R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 rI_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 rsub_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222 ropp_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 CRmorph_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 c0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 H_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222))) REVERTcast (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) true) (Prod l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222211 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222211 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222))))))) (Lambda p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 positive (Lambda P'_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Cast (Lambda H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (Lambda l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (LetIn H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222223 (Case 2 (Lambda y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 bool (Lambda out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 (App eq bool false y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222221 (App eq bool y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) P'_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222))))) (CaseMatch H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (App (Lambda H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (LetIn H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 bool (Sort Prop)) (CaseMatch e_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) (CaseBranches False True))) I true H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 lrod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) P'_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222))) (App H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222223 (App eq_refl bool true))))) REVERTcast (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P'_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) true) (Prod l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222211 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222211 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P'_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)))))))) (Lambda P'1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Lambda p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 positive (Lambda P'2_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Cast (Lambda H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (Lambda l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (LetIn H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222223 (Case 2 (Lambda y_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 bool (Lambda out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 (App eq bool false y_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222221 (App eq bool y_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 P'1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) P'2_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222)))))) (CaseMatch H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (App (Lambda H0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (LetIn H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 bool (Case 0 (Lambda b_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 bool (Sort Prop)) (CaseMatch e_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches False True))) I true H0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 P'1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) P'2_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222))) H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222223))) H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)))) (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 P'1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) P'2_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222)))) (App H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222223 (App eq_refl bool true))))) REVERTcast (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P'1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 P'2_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222)) true) (Prod l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222211 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222211 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P'1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 P'2_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222))))))))))))) (Lambda p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 positive (Lambda P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Lambda IHP_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 (Prod P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222221 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222211 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222 P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222221) true) (Prod l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222111 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222111 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222111 P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222221))))) (Lambda P'_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Case 1 (Lambda p_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) p_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) true) (Prod l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222211 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222211 p_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222))))) (CaseMatch P'_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Cast (Lambda H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (Lambda l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (LetIn H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222223 (Case 2 (Lambda y_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 bool (Lambda out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 (App eq bool false y_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222221 (App eq bool y_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222))))) (CaseMatch H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (App (Lambda H0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (LetIn H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 bool (Case 0 (Lambda b_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 bool (Sort Prop)) (CaseMatch e_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches False True))) I true H0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222)) H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222223))) H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)))) (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222))) (App H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222223 (App eq_refl bool true))))) REVERTcast (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222)) true) (Prod l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222211 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222211 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222))))))) (Lambda p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 positive (Lambda P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Cast (Lambda H_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 (App eq bool (Case 0 (Lambda x_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 comparison bool) (CaseMatch (App Coq.PArith.BinPosDef.Pos.compare p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222)) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222 P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) false false)) true) (Lambda l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (LetIn c_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223 (App Coq.PArith.BinPos.Pos.compare_spec p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (App CompareSpec (App eq positive p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (App Coq.PArith.BinPos.Pos.lt p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (App Coq.PArith.BinPos.Pos.lt p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.PArith.BinPosDef.Pos.compare p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222)) (LetIn c0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233 (App Coq.PArith.BinPosDef.Pos.compare p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) comparison (App (Case 3 (Lambda c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332 comparison (Lambda out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322 (App CompareSpec (App eq positive p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (App Coq.PArith.BinPos.Pos.lt p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (App Coq.PArith.BinPos.Pos.lt p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332) (Prod H_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233221 (App eq bool (Case 0 (Lambda x_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 comparison bool) (CaseMatch c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222 P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) false false)) true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222))))) (CaseMatch c_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223) (CaseBranches (Lambda H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332 (App eq positive p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (Lambda H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222 P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) true) (App Coq.Init.Logic.eq_ind_r positive p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 (Lambda p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 positive (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222))) (App (Lambda lemma_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Rsth_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) lemma_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) (App Coq.Classes.Morphisms.eq_proper_proxy R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222)))) (App IHP_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222 H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.RelationClasses.reflexivity R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Rsth_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222))) p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332))) (Lambda H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332 (App Coq.PArith.BinPos.Pos.lt p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (Lambda H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322 (App eq bool false true) (LetIn H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233223 (Case 2 (Lambda y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 bool (Lambda out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332222 (App eq bool false y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322221 (App eq bool y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222))))) (CaseMatch H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322) (CaseBranches (Lambda H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 (App eq bool false true) (App (Lambda H1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332222 (App eq bool false true) (LetIn H2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322222 bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222222 bool (Sort Prop)) (CaseMatch e_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322222) (CaseBranches False True))) I true H1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 lrod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222))) (App H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233223 (App eq_refl bool true))))) (Lambda H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332 (App Coq.PArith.BinPos.Pos.lt p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (Lambda H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322 (App eq bool false true) (LetIn H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233223 (Case 2 (Lambda y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 bool (Lambda out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332222 (App eq bool false y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322221 (App eq bool y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222))))) (CaseMatch H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322) (CaseBranches (Lambda H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222 (App eq bool false true) (App (Lambda H1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332222 (App eq bool false true) (LetIn H2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322222 bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233222222 bool (Sort Prop)) (CaseMatch e_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222223322222) (CaseBranches False True))) I true H1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222332222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 lrod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222))) (App H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222233223 (App eq_refl bool true))))))) H_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222))))) REVERTcast (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222)) true) (Prod l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222211 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222211 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222)))))))) (Lambda P'1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Lambda p0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222 positive (Lambda P'2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Cast (Lambda H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (Lambda l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (LetIn H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222223 (Case 2 (Lambda y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 bool (Lambda out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 (App eq bool false y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222221 (App eq bool y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 P'1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) p0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) P'2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)))))) (CaseMatch H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (App (Lambda H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (LetIn H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222222 bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222222 bool (Sort Prop)) (CaseMatch e_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches False True))) I true H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 P'1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) p0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) P'2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222))) H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223))) H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222)))) (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 P'1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) p0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) P'2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)))) (App H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222223 (App eq_refl bool true))))) REVERTcast (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222) (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P'1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 p0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222 P'2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)) true) (Prod l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222211 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222211 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P'1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 p0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222 P'2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222))))))))))))))) (Lambda P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Lambda IHP1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222 (Prod P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222221 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222211 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222221) true) (Prod l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222111 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222111 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222111 P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222221))))) (Lambda p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 positive (Lambda P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Lambda IHP2_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 (Prod P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222221 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222211 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222221) true) (Prod l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222111 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222111 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222111 P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222221))))) (Lambda P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Case 1 (Lambda p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) true) (Prod l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222211 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222211 p_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222))))) (CaseMatch P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 (Cast (Lambda H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (Lambda l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (LetIn H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222223 (Case 2 (Lambda y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 bool (Lambda out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 (App eq bool false y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222221 (App eq bool y_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222))))) (CaseMatch H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (App (Lambda H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (LetIn H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222222 bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222222 bool (Sort Prop)) (CaseMatch e_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches False True))) I true H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)) H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223))) H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222)))) (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222))) (App H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222223 (App eq_refl bool true))))) REVERTcast (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)) true) (Prod l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222211 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222211 (App Pc C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222))))))) (Lambda p0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 positive (Lambda P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Cast (Lambda H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (Lambda l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (LetIn H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222223 (Case 2 (Lambda y_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 bool (Lambda out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222222 (App eq bool false y_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222221 (App eq bool y_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222))))) (CaseMatch H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) (CaseBranches (Lambda H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (App (Lambda H0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222222 (App eq bool false true) (LetIn H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222222 bool (Case 0 (Lambda b_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222222 bool (Sort Prop)) (CaseMatch e_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222222) (CaseBranches False True))) I true H0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 lrod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.setoid_ring.BinList.jump R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 p0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222) P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222))) (App H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222223 (App eq_refl bool true))))) REVERTcast (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) true) (Prod l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222211 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222211 (App Pinj C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 p0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 P'_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)))))))) (Lambda P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Lambda p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 positive (Lambda P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222 (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222) (Cast (Lambda H_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 (App eq bool (Case 0 (Lambda x_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 comparison bool) (CaseMatch (App Coq.PArith.BinPosDef.Pos.compare p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (CaseBranches (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222 bool bool) (CaseMatch (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) false)) false false)) true) (Lambda l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (LetIn IHP1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223 (App IHP1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) true) (Prod l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222211 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222211 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)))) (LetIn IHP2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233 (App IHP2_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222231 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) true) (Prod l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222311 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222311 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222311 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))) (LetIn c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333 (App Coq.PArith.BinPos.Pos.compare_spec p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (App CompareSpec (App eq positive p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (App Coq.PArith.BinPos.Pos.lt p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (App Coq.PArith.BinPos.Pos.lt p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222) (App Coq.PArith.BinPosDef.Pos.compare p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (LetIn c0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333 (App Coq.PArith.BinPosDef.Pos.compare p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) comparison (App (Case 3 (Lambda c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332 comparison (Lambda out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322 (App CompareSpec (App eq positive p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (App Coq.PArith.BinPos.Pos.lt p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (App Coq.PArith.BinPos.Pos.lt p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222) c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332) (Prod H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333221 (App eq bool (Case 0 (Lambda x_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222 comparison bool) (CaseMatch c_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332) (CaseBranches (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222 bool bool) (CaseMatch (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) false)) false false)) true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))))) (CaseMatch c_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333) (CaseBranches (Lambda H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332 (App eq positive p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (Lambda H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322 (App eq bool (Case 0 (Lambda b_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322 bool bool) (CaseMatch (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) false)) true) (App Coq.Init.Logic.eq_ind_r positive p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 (Lambda p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222 positive (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))) (LetIn b_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223 (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) bool (App (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232 bool (Prod IHP1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322321 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322321 (App eq bool b_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232 true) (Prod l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223211 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223211 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)))) (Prod H_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223211 (App eq bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223212 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232) (CaseBranches (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) false)) true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))))) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223) (CaseBranches (Lambda IHP1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332231 (App eq bool true true) (Prod l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322311 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322311 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322311 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)))) (Lambda H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) true) (LetIn IHP2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223223 (App Coq.Init.Logic.eq_ind bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) (Lambda b_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223222 bool (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232221 (App eq bool b_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223222 true) (Prod l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322211 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322211 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222))))) IHP2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233 true H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322) (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223221 (App eq bool true true) (Prod l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232211 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232211 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))) (App (Lambda lemma_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232232 (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Rsth_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.radd_ext_Proper R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 ropp_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Reqe_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.rmul_ext_Proper R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 ropp_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Reqe_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) lemma_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232232 (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Rsth_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222))) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Rsth_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222))) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222))))) (App IHP1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232 (App eq_refl bool true) l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) (App (Lambda lemma_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232232 (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Rsth_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322321 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.Classes.Morphisms.respectful R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222) radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.radd_ext_Proper R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 ropp_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Reqe_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222) (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Rsth_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222) (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222))) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222) lemma_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232232) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222))))) (App IHP2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223223 (App eq_refl bool true) (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222)) (App Coq.Classes.RelationClasses.reflexivity R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.Classes.RelationClasses.Equivalence_Reflexive R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 Rsth_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))))))) (Lambda IHP1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332231 (App eq bool false true) (Prod l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322311 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322311 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322311 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222)))) (Lambda H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322 (App eq bool false true) (LetIn H0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223223 (Case 2 (Lambda y_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223222 bool (Lambda out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232222 (App eq bool false y_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223222) (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322221 (App eq bool y_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))))) (CaseMatch H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322) (CaseBranches (Lambda H0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223222 (App eq bool false true) (App (Lambda H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232222 (App eq bool false true) (LetIn H1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322222 bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223222222 bool (Sort Prop)) (CaseMatch e_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322322222) (CaseBranches False True))) I true H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332232222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 lrod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))) (App H0_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223223 (App eq_refl bool true))))))) IHP1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223 H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322)) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332))) (Lambda H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332 (App Coq.PArith.BinPos.Pos.lt p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222) (Lambda H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322 (App eq bool false true) (LetIn H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223 (Case 2 (Lambda y_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222 bool (Lambda out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332222 (App eq bool false y_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222) (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322221 (App eq bool y_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))))) (CaseMatch H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322) (CaseBranches (Lambda H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222 (App eq bool false true) (App (Lambda H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332222 (App eq bool false true) (LetIn H2_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322222 bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222222 bool (Sort Prop)) (CaseMatch e_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322222) (CaseBranches False True))) I true H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 lrod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))) (App H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223 (App eq_refl bool true))))) (Lambda H0_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332 (App Coq.PArith.BinPos.Pos.lt p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222) (Lambda H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322 (App eq bool false true) (LetIn H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223 (Case 2 (Lambda y_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222 bool (Lambda out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332222 (App eq bool false y_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222) (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322221 (App eq bool y_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222 true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))))) (CaseMatch H_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322) (CaseBranches (Lambda H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222 (App eq bool false true) (App (Lambda H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332222 (App eq bool false true) (LetIn H2_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322223 (App Coq.Init.Logic.eq_ind bool false (Lambda e_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322222 bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333222222 bool (Sort Prop)) (CaseMatch e_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222333322222) (CaseBranches False True))) I true H1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222233332222) False (App Coq.Init.Logic.False_ind (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 lrod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333221 (App eq bool true true) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 (App rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222) (App Coq.setoid_ring.Ring_theory.pow_pos R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 (App Coq.Lists.List.hd R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 (App Coq.Lists.List.tl R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222222) P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)))) (App H1_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222223333223 (App eq_refl bool true))))))) H_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222222))))))) REVERTcast (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222) (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 p0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222 P'2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222222222)) true) (Prod l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222211 (App list R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222) (App req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222211 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P2_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222 p_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222222 P3_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.Pphi R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 l_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222222222222211 (App PX C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 P'1_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222222222222 pcast (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222222222222221 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222 P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222) true) (App Coq.setoid_ring.Ring_polynom.Pequiv R_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 rO_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222 radd_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222 rmul_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222 req_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222 P_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222222222222222222222222 P'_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222222222222222222222222)))))))))))))))))))))))))) (Definition Coq.setoid_ring.Ring_polynom.ring_correct (Lambda R_233322222223233323333333333232222232333333333332333333333332332 (Sort Type) (Lambda rO_2333222222232333233333333332322222323333333333323333333333323322 R_233322222223233323333333333232222232333333333332333333333332332 (Lambda rI_23332222222323332333333333323222223233333333333233333333333233222 R_233322222223233323333333333232222232333333333332333333333332332 (Lambda radd_233322222223233323333333333232222232333333333332333333333332332222 (Prod out_233322222223233323333333333232222232333333333332333333333332332221 R_233322222223233323333333333232222232333333333332333333333332332 (Prod out_2333222222232333233333333332322222323333333333323333333333323322211 R_233322222223233323333333333232222232333333333332333333333332332 R_233322222223233323333333333232222232333333333332333333333332332)) (Lambda rmul_2333222222232333233333333332322222323333333333323333333333323322222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322221 R_233322222223233323333333333232222232333333333332333333333332332 (Prod out_23332222222323332333333333323222223233333333333233333333333233222211 R_233322222223233323333333333232222232333333333332333333333332332 R_233322222223233323333333333232222232333333333332333333333332332)) (Lambda rsub_23332222222323332333333333323222223233333333333233333333333233222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222221 R_233322222223233323333333333232222232333333333332333333333332332 (Prod out_233322222223233323333333333232222232333333333332333333333332332222211 R_233322222223233323333333333232222232333333333332333333333332332 R_233322222223233323333333333232222232333333333332333333333332332)) (Lambda ropp_233322222223233323333333333232222232333333333332333333333332332222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222221 R_233322222223233323333333333232222232333333333332333333333332332 R_233322222223233323333333333232222232333333333332333333333332332) (Lambda req_2333222222232333233333333332322222323333333333323333333333323322222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222221 R_233322222223233323333333333232222232333333333332333333333332332 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222211 R_233322222223233323333333333232222232333333333332333333333332332 (Sort Prop))) (Lambda Rsth_23332222222323332333333333323222223233333333333233333333333233222222222 (App Equivalence R_233322222223233323333333333232222232333333333332333333333332332 req_2333222222232333233333333332322222323333333333323333333333323322222222) (Lambda Reqe_233322222223233323333333333232222232333333333332333333333332332222222222 (App ring_eq_ext R_233322222223233323333333333232222232333333333332333333333332332 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 req_2333222222232333233333333332322222323333333333323333333333323322222222) (Lambda ARth_2333222222232333233333333332322222323333333333323333333333323322222222222 (App almost_ring_theory R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 req_2333222222232333233333333332322222323333333333323333333333323322222222) (Lambda C_23332222222323332333333333323222223233333333333233333333333233222222222222 (Sort Type) (Lambda cO_233322222223233323333333333232222232333333333332333333333332332222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 (Lambda cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 (Lambda cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222211 C_23332222222323332333333333323222223233333333333233333333333233222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222)) (Lambda cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222211 C_23332222222323332333333333323222223233333333333233333333333233222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222)) (Lambda csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222211 C_23332222222323332333333333323222223233333333333233333333333233222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222)) (Lambda copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222) (Lambda ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222211 C_23332222222323332333333333323222223233333333333233333333333233222222222222 bool)) (Lambda phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222 R_233322222223233323333333333232222232333333333332333333333332332) (Lambda CRmorph_23332222222323332333333333323222223233333333333233333333333233222222222222222222222 (App ring_morph R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 req_2333222222232333233333333332322222323333333333323333333333323322222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222) (Lambda Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 (Sort Type) (Lambda Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222221 N Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222) (Lambda rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222221 R_233322222223233323333333333232222232333333333332333333333332332 (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222211 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 R_233322222223233323333333333232222232333333333332333333333332332)) (Lambda pow_th_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222 (App power_theory R_233322222223233323333333333232222232333333333332333333333332332 rI_23332222222323332333333333323222223233333333333233333333333233222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 req_2333222222232333233333333332322222323333333333323333333333323322222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222) (Lambda cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 (Prod out_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222221 C_23332222222323332333333333323222223233333333333233333333333233222222222222 (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222211 C_23332222222323332333333333323222223233333333333233333333333233222222222222 (App prod C_23332222222323332333333333323222223233333333333233333333333233222222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222))) (Lambda div_th_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222 (App div_theory R_233322222223233323333333333232222232333333333332333333333332332 req_2333222222232333233333333332322222323333333333323333333333323322222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222) (Cast (Lambda n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 nat (Lambda l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 (App list R_233322222223233323333333333232222232333333333332333333333332332) (Lambda lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222 (App list (App prod (App PExpr C_23332222222323332333333333323222223233333333333233333333333233222222222222) (App PExpr C_23332222222323332333333333323222223233333333333233333333333233222222222222))) (Lambda pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222 (App PExpr C_23332222222323332333333333323222223233333333333233333333333233222222222222) (Lambda pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222 (App PExpr C_23332222222323332333333333323222223233333333333233333333333233222222222222) (Lambda H_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.interp_PElist R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 req_2333222222232333233333333332322222323333333333323333333333323322222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222) (Lambda H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222 (App eq bool (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222) pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222) pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222)) true) (App (Lambda lemma_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (App req_2333222222232333233333333332322222323333333333323333333333323322222222 (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222) pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism R_233322222223233323333333333232222232333333333332333333333332332 req_2333222222232333233333333332322222323333333333323333333333323322222222 (App Coq.Classes.RelationClasses.Equivalence_Transitive R_233322222223233323333333333232222232333333333332333333333332332 req_2333222222232333233333333332322222323333333333323333333333323322222222 Rsth_23332222222323332333333333323222223233333333333233333333333233222222222) (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222) pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222)) lemma_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222) (App Coq.Classes.Morphisms.eq_proper_proxy R_233322222223233323333333333232222232333333333332333333333332332 (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222)))) (App Coq.setoid_ring.Ring_polynom.norm_subst_ok R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 req_2333222222232333233333333332322222323333333333323333333333323322222222 Rsth_23332222222323332333333333323222223233333333333233333333333233222222222 Reqe_233322222223233323333333333232222232333333333332333333333332332222222222 ARth_2333222222232333233333333332322222323333333333323333333333323322222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 CRmorph_23332222222323332333333333323222223233333333333233333333333233222222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 pow_th_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 div_th_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222 pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222 H_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222) (App (Lambda lemma_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222 (App req_2333222222232333233333333332322222323333333333323333333333323322222222 (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222) pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism R_233322222223233323333333333232222232333333333332333333333332332 req_2333222222232333233333333332322222323333333333323333333333323322222222 (App Coq.Classes.RelationClasses.Equivalence_PER R_233322222223233323333333333232222232333333333332333333333332332 req_2333222222232333233333333332322222323333333333323333333333323322222222 Rsth_23332222222323332333333333323222223233333333333233333333333233222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222) pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Pphi R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222) pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222)) lemma_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222222)) (App Coq.setoid_ring.Ring_polynom.norm_subst_ok R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 req_2333222222232333233333333332322222323333333333323333333333323322222222 Rsth_23332222222323332333333333323222223233333333333233333333333233222222222 Reqe_233322222223233323333333333232222232333333333332333333333332332222222222 ARth_2333222222232333233333333332322222323333333333323333333333323322222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 CRmorph_23332222222323332333333333323222223233333333333233333333333233222222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 pow_th_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 div_th_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222 pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222 H_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.Peq_ok R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 req_2333222222232333233333333332322222323333333333323333333333323322222222 Rsth_23332222222323332333333333323222223233333333333233333333333233222222222 Reqe_233322222223233323333333333232222232333333333332333333333332332222222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 CRmorph_23332222222323332333333333323222223233333333333233333333333233222222222222222222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222) pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222) (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222222) pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222222) H0_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222222)))))))))) REVERTcast (Prod n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222221 nat (Prod l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222211 (App list R_233322222223233323333333333232222232333333333332333333333332332) (Prod lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222111 (App list (App prod (App PExpr C_23332222222323332333333333323222223233333333333233333333333233222222222222) (App PExpr C_23332222222323332333333333323222223233333333333233333333333233222222222222))) (Prod pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222221111 (App PExpr C_23332222222323332333333333323222223233333333333233333333333233222222222222) (Prod pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222211111 (App PExpr C_23332222222323332333333333323222223233333333333233333333333233222222222222) (Prod out_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222111111 (App Coq.setoid_ring.Ring_polynom.interp_PElist R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 req_2333222222232333233333333332322222323333333333323333333333323322222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222211 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222111) (Prod out_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222221111111 (App eq bool (LetIn lmp_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222221111113 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 lpe_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222222111) (App list (App prod (App prod C_23332222222323332333333333323222223233333333333233333333333233222222222222 Mon) (App Pol C_23332222222323332333333333323222223233333333333233333333333233222222222222))) (App Coq.setoid_ring.Ring_polynom.Peq C_23332222222323332333333333323222223233333333333233333333333233222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222221 lmp_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222221111113 pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222221111) (App Coq.setoid_ring.Ring_polynom.norm_subst C_23332222222323332333333333323222223233333333333233333333333233222222222222 cO_233322222223233323333333333232222232333333333332333333333332332222222222222 cI_2333222222232333233333333332322222323333333333323333333333323322222222222222 cadd_23332222222323332333333333323222223233333333333233333333333233222222222222222 cmul_233322222223233323333333333232222232333333333332333333333332332222222222222222 csub_2333222222232333233333333332322222323333333333323333333333323322222222222222222 copp_23332222222323332333333333323222223233333333333233333333333233222222222222222222 ceqb_233322222223233323333333333232222232333333333332333333333332332222222222222222222 cdiv_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222 n_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222221 lmp_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222221111113 pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222211111))) true) (App req_2333222222232333233333333332322222323333333333323333333333323322222222 (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222211 pe1_233322222223233323333333333232222232333333333332333333333332332222222222222222222222222221111) (App Coq.setoid_ring.Ring_polynom.PEeval R_233322222223233323333333333232222232333333333332333333333332332 rO_2333222222232333233333333332322222323333333333323333333333323322 rI_23332222222323332333333333323222223233333333333233333333333233222 radd_233322222223233323333333333232222232333333333332333333333332332222 rmul_2333222222232333233333333332322222323333333333323333333333323322222 rsub_23332222222323332333333333323222223233333333333233333333333233222222 ropp_233322222223233323333333333232222232333333333332333333333332332222222 C_23332222222323332333333333323222223233333333333233333333333233222222222222 phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222 Cpow_233322222223233323333333333232222232333333333332333333333332332222222222222222222222 Cp_phi_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222 rpow_23332222222323332333333333323222223233333333333233333333333233222222222222222222222222 l_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222211 pe2_2333222222232333233333333332322222323333333333323333333333323322222222222222222222222222211111)))))))))))))))))))))))))))))))))))))) (Definition Coq.setoid_ring.ZArithRing.Zr_ring_lemma1 (App Coq.setoid_ring.Ring_polynom.ring_correct Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp (App eq Z) (App Coq.setoid_ring.Ring_theory.Eqsth Z) (App Coq.setoid_ring.Ring_theory.Eq_ext Z Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.opp) (App Coq.setoid_ring.Ring_theory.Rth_ARth Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp (App eq Z) (App Coq.setoid_ring.Ring_theory.Eqsth Z) (App Coq.setoid_ring.Ring_theory.Eq_ext Z Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.opp) Coq.setoid_ring.InitialRing.Zth) Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) (App Coq.setoid_ring.Ring_theory.IDmorph Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp (App eq Z) (App Coq.setoid_ring.Ring_theory.Eqsth Z) Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.Zbool.Zeq_bool_eq) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.ZArith.Zpow_def.Zpower_theory Coq.ZArith.BinIntDef.Z.quotrem (App Coq.setoid_ring.InitialRing.Ztriv_div_th Z (App eq Z) (App Coq.setoid_ring.Ring_theory.Eqsth Z) (App Coq.setoid_ring.Ring_theory.IDphi Z)))) (Definition Coq.Init.Peano.f_equal_nat (App Coq.Init.Logic.f_equal nat)) (Definition Coq.Lists.List.map_length (Lambda A_23332222222323332333333333323222223233333333332 (Sort Type) (Lambda B_233322222223233323333333333232222232333333333322 (Sort Type) (Lambda f_2333222222232333233333333332322222323333333333222 (Prod out_2333222222232333233333333332322222323333333333221 A_23332222222323332333333333323222223233333333332 B_233322222223233323333333333232222232333333333322) (Lambda l_23332222222323332333333333323222223233333333332222 (App list A_23332222222323332333333333323222223233333333332) (App Coq.Init.Datatypes.list_ind A_23332222222323332333333333323222223233333333332 (Lambda l_233322222223233323333333333232222232333333333322222 (App list A_23332222222323332333333333323222223233333333332) (App eq nat (App Coq.Init.Datatypes.length B_233322222223233323333333333232222232333333333322 (App Coq.Lists.List.map A_23332222222323332333333333323222223233333333332 B_233322222223233323333333333232222232333333333322 f_2333222222232333233333333332322222323333333333222 l_233322222223233323333333333232222232333333333322222)) (App Coq.Init.Datatypes.length A_23332222222323332333333333323222223233333333332 l_233322222223233323333333333232222232333333333322222))) (Cast (App eq_refl nat O) REVERTcast (App eq nat (App Coq.Init.Datatypes.length B_233322222223233323333333333232222232333333333322 (App Coq.Lists.List.map A_23332222222323332333333333323222223233333333332 B_233322222223233323333333333232222232333333333322 f_2333222222232333233333333332322222323333333333222 (App nil A_23332222222323332333333333323222223233333333332))) (App Coq.Init.Datatypes.length A_23332222222323332333333333323222223233333333332 (App nil A_23332222222323332333333333323222223233333333332)))) (Lambda a_233322222223233323333333333232222232333333333322222 A_23332222222323332333333333323222223233333333332 (Lambda l_2333222222232333233333333332322222323333333333222222 (App list A_23332222222323332333333333323222223233333333332) (Lambda IHl_23332222222323332333333333323222223233333333332222222 (App eq nat (App Coq.Init.Datatypes.length B_233322222223233323333333333232222232333333333322 (App Coq.Lists.List.map A_23332222222323332333333333323222223233333333332 B_233322222223233323333333333232222232333333333322 f_2333222222232333233333333332322222323333333333222 l_2333222222232333233333333332322222323333333333222222)) (App Coq.Init.Datatypes.length A_23332222222323332333333333323222223233333333332 l_2333222222232333233333333332322222323333333333222222)) (Cast (App Coq.Init.Peano.f_equal_nat nat S (App Coq.Init.Datatypes.length B_233322222223233323333333333232222232333333333322 (App Coq.Lists.List.map A_23332222222323332333333333323222223233333333332 B_233322222223233323333333333232222232333333333322 f_2333222222232333233333333332322222323333333333222 l_2333222222232333233333333332322222323333333333222222)) (App Coq.Init.Datatypes.length A_23332222222323332333333333323222223233333333332 l_2333222222232333233333333332322222323333333333222222) IHl_23332222222323332333333333323222223233333333332222222) REVERTcast (App eq nat (App Coq.Init.Datatypes.length B_233322222223233323333333333232222232333333333322 (App Coq.Lists.List.map A_23332222222323332333333333323222223233333333332 B_233322222223233323333333333232222232333333333322 f_2333222222232333233333333332322222323333333333222 (App cons A_23332222222323332333333333323222223233333333332 a_233322222223233323333333333232222232333333333322222 l_2333222222232333233333333332322222323333333333222222))) (App Coq.Init.Datatypes.length A_23332222222323332333333333323222223233333333332 (App cons A_23332222222323332333333333323222223233333333332 a_233322222223233323333333333232222232333333333322222 l_2333222222232333233333333332322222323333333333222222))))))) l_23332222222323332333333333323222223233333333332222)))))) (Definition Coq.Lists.List.map_app (Lambda A_23332222222323332333333333322222222 (Sort Type) (Lambda B_233322222223233323333333333222222222 (Sort Type) (Lambda f_2333222222232333233333333332222222222 (Prod out_2333222222232333233333333332222222221 A_23332222222323332333333333322222222 B_233322222223233323333333333222222222) (Lambda l_23332222222323332333333333322222222222 (App list A_23332222222323332333333333322222222) (App Coq.Init.Datatypes.list_ind A_23332222222323332333333333322222222 (Lambda l_233322222223233323333333333222222222222 (App list A_23332222222323332333333333322222222) (Prod l'_2333222222232333233333333332222222222221 (App list A_23332222222323332333333333322222222) (App eq (App list B_233322222223233323333333333222222222) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 (App Coq.Init.Datatypes.app A_23332222222323332333333333322222222 l_233322222223233323333333333222222222222 l'_2333222222232333233333333332222222222221)) (App Coq.Init.Datatypes.app B_233322222223233323333333333222222222 (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l_233322222223233323333333333222222222222) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l'_2333222222232333233333333332222222222221))))) (Cast (Lambda l'_233322222223233323333333333222222222222 (App list A_23332222222323332333333333322222222) (App eq_refl (App list B_233322222223233323333333333222222222) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l'_233322222223233323333333333222222222222))) REVERTcast (Prod l'_233322222223233323333333333222222222221 (App list A_23332222222323332333333333322222222) (App eq (App list B_233322222223233323333333333222222222) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 (App Coq.Init.Datatypes.app A_23332222222323332333333333322222222 (App nil A_23332222222323332333333333322222222) l'_233322222223233323333333333222222222221)) (App Coq.Init.Datatypes.app B_233322222223233323333333333222222222 (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 (App nil A_23332222222323332333333333322222222)) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l'_233322222223233323333333333222222222221))))) (Lambda a_233322222223233323333333333222222222222 A_23332222222323332333333333322222222 (Lambda l_2333222222232333233333333332222222222222 (App list A_23332222222323332333333333322222222) (Lambda IHl_23332222222323332333333333322222222222222 (Prod l'_23332222222323332333333333322222222222221 (App list A_23332222222323332333333333322222222) (App eq (App list B_233322222223233323333333333222222222) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 (App Coq.Init.Datatypes.app A_23332222222323332333333333322222222 l_2333222222232333233333333332222222222222 l'_23332222222323332333333333322222222222221)) (App Coq.Init.Datatypes.app B_233322222223233323333333333222222222 (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l_2333222222232333233333333332222222222222) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l'_23332222222323332333333333322222222222221)))) (Cast (Lambda l'_233322222223233323333333333222222222222222 (App list A_23332222222323332333333333322222222) (App Coq.Init.Logic.eq_ind_r (App list B_233322222223233323333333333222222222) (App Coq.Init.Datatypes.app B_233322222223233323333333333222222222 (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l_2333222222232333233333333332222222222222) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l'_233322222223233323333333333222222222222222)) (Lambda l_2333222222232333233333333332222222222222222 (App list B_233322222223233323333333333222222222) (App eq (App list B_233322222223233323333333333222222222) (App cons B_233322222223233323333333333222222222 (App f_2333222222232333233333333332222222222 a_233322222223233323333333333222222222222) l_2333222222232333233333333332222222222222222) (App cons B_233322222223233323333333333222222222 (App f_2333222222232333233333333332222222222 a_233322222223233323333333333222222222222) (App Coq.Init.Datatypes.app B_233322222223233323333333333222222222 (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l_2333222222232333233333333332222222222222) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l'_233322222223233323333333333222222222222222))))) (App eq_refl (App list B_233322222223233323333333333222222222) (App cons B_233322222223233323333333333222222222 (App f_2333222222232333233333333332222222222 a_233322222223233323333333333222222222222) (App Coq.Init.Datatypes.app B_233322222223233323333333333222222222 (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l_2333222222232333233333333332222222222222) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l'_233322222223233323333333333222222222222222)))) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 (App Coq.Init.Datatypes.app A_23332222222323332333333333322222222 l_2333222222232333233333333332222222222222 l'_233322222223233323333333333222222222222222)) (App IHl_23332222222323332333333333322222222222222 l'_233322222223233323333333333222222222222222))) REVERTcast (Prod l'_233322222223233323333333333222222222222221 (App list A_23332222222323332333333333322222222) (App eq (App list B_233322222223233323333333333222222222) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 (App Coq.Init.Datatypes.app A_23332222222323332333333333322222222 (App cons A_23332222222323332333333333322222222 a_233322222223233323333333333222222222222 l_2333222222232333233333333332222222222222) l'_233322222223233323333333333222222222222221)) (App Coq.Init.Datatypes.app B_233322222223233323333333333222222222 (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 (App cons A_23332222222323332333333333322222222 a_233322222223233323333333333222222222222 l_2333222222232333233333333332222222222222)) (App Coq.Lists.List.map A_23332222222323332333333333322222222 B_233322222223233323333333333222222222 f_2333222222232333233333333332222222222 l'_233322222223233323333333333222222222222221)))))))) l_23332222222323332333333333322222222222)))))) (Definition ExportProof.sublists_map (Lambda A_2333222222232333233333333332 (Sort Type) (Lambda B_23332222222323332333333333322 (Sort Type) (Lambda f_233322222223233323333333333222 (Prod out_233322222223233323333333333221 A_2333222222232333233333333332 B_23332222222323332333333333322) (Lambda l_2333222222232333233333333332222 (App list A_2333222222232333233333333332) (App Coq.Init.Datatypes.list_ind A_2333222222232333233333333332 (Lambda l_23332222222323332333333333322222 (App list A_2333222222232333233333333332) (App eq (App list (App list B_23332222222323332333333333322)) (App ExportProof.sublists B_23332222222323332333333333322 (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 l_23332222222323332333333333322222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_23332222222323332333333333322222)))) (App eq_refl (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 (App nil A_2333222222232333233333333332)))) (Lambda a_23332222222323332333333333322222 A_2333222222232333233333333332 (Lambda l_233322222223233323333333333222222 (App list A_2333222222232333233333333332) (Lambda IHl_2333222222232333233333333332222222 (App eq (App list (App list B_23332222222323332333333333322)) (App ExportProof.sublists B_23332222222323332333333333322 (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 l_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) (Cast (App Coq.Init.Logic.eq_ind_r (App list (App list B_23332222222323332333333333322)) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_23332222222323332333333333322222222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_23332222222323332333333333322222222)) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)))) (Lambda l_23332222222323332333333333322222222 (App list (App list B_23332222222323332333333333322)) (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) (App ExportProof.sublists B_23332222222323332333333333322 (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 l_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_233322222223233323333333333222222222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_233322222223233323333333333222222222)) (App ExportProof.sublists B_23332222222323332333333333322 (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 l_233322222223233323333333333222222)))) l_23332222222323332333333333322222222)) (App Coq.Init.Logic.eq_ind_r (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)) (Lambda l_23332222222323332333333333322222222 (App list (App list B_23332222222323332333333333322)) (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) l_23332222222323332333333333322222222 (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_233322222223233323333333333222222222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_233322222223233323333333333222222222)) l_23332222222323332333333333322222222)) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_233322222223233323333333333222222222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_233322222223233323333333333222222222)) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)))))) (LetIn H_23332222222323332333333333322222223 (LetIn l0_23332222222323332333333333322222223 (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222) (App list (App list A_2333222222232333233333333332)) (App Coq.Init.Datatypes.list_ind (App list A_2333222222232333233333333332) (Lambda l0_233322222223233323333333333222222232 (App list (App list A_2333222222232333233333333332)) (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_2333222222232333233333333332222222322 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_2333222222232333233333333332222222322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) l0_233322222223233323333333333222222232)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_2333222222232333233333333332222222322 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_2333222222232333233333333332222222322)) l0_233322222223233323333333333222222232)))) (App eq_refl (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_233322222223233323333333333222222232 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_233322222223233323333333333222222232)) (App nil (App list A_2333222222232333233333333332))))) (Lambda x_233322222223233323333333333222222232 (App list A_2333222222232333233333333332) (Lambda xs_2333222222232333233333333332222222322 (App list (App list A_2333222222232333233333333332)) (Lambda IHxs_23332222222323332333333333322222223222 (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_23332222222323332333333333322222223222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_23332222222323332333333333322222223222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) xs_2333222222232333233333333332222222322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_23332222222323332333333333322222223222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_23332222222323332333333333322222223222)) xs_2333222222232333233333333332222222322))) (Cast (LetIn H_233322222223233323333333333222222232223 IHxs_23332222222323332333333333322222223222 (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_233322222223233323333333333222222232222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_233322222223233323333333333222222232222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) xs_2333222222232333233333333332222222322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_233322222223233323333333333222222232222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_233322222223233323333333333222222232222)) xs_2333222222232333233333333332222222322))) (App (LetIn H_2333222222232333233333333332222222322233 (App eq_refl (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232))) (App eq (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232)) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232))) (App (LetIn H_23332222222323332333333333322222223222333 (App eq_refl (Sort Type) (App list B_23332222222323332333333333322)) (App eq (Sort Type) (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322)) (App (Lambda H_233322222223233323333333333222222232223332 (App eq (Sort Type) (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322)) (Lambda H0_2333222222232333233333333332222222322233322 (App eq (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232)) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232))) (Lambda H1_23332222222323332333333333322222223222333222 (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_23332222222323332333333333322222223222333222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_23332222222323332333333333322222223222333222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) xs_2333222222232333233333333332222222322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_23332222222323332333333333322222223222333222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_23332222222323332333333333322222223222333222)) xs_2333222222232333233333333332222222322))) (App Coq.Init.Logic.eq_trans (App list (App list B_23332222222323332333333333322)) (App cons (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_233322222223233323333333333222222232223332222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_233322222223233323333333333222222232223332222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) xs_2333222222232333233333333332222222322))) (App cons (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_233322222223233323333333333222222232223332222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_233322222223233323333333333222222232223332222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) xs_2333222222232333233333333332222222322))) (App cons (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_233322222223233323333333333222222232223332222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_233322222223233323333333333222222232223332222)) xs_2333222222232333233333333332222222322))) (App Coq.Init.Logic.f_equal (Prod l_233322222223233323333333333222222232223332221 (App list (App list B_23332222222323332333333333322)) (App list (App list B_23332222222323332333333333322))) (App list (App list B_23332222222323332333333333322)) (Lambda f0_233322222223233323333333333222222232223332222 (Prod l_233322222223233323333333333222222232223332221 (App list (App list B_23332222222323332333333333322)) (App list (App list B_23332222222323332333333333322))) (App f0_233322222223233323333333333222222232223332222 (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_2333222222232333233333333332222222322233322222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_2333222222232333233333333332222222322233322222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) xs_2333222222232333233333333332222222322)))) (App cons (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232))) (App cons (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232))) (App eq_refl (Prod l_233322222223233323333333333222222232223332221 (App list (App list B_23332222222323332333333333322)) (App list (App list B_23332222222323332333333333322))) (App cons (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232))))) (App Coq.Init.Logic.f_equal (App list (App list B_23332222222323332333333333322)) (App list (App list B_23332222222323332333333333322)) (App cons (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 x_233322222223233323333333333222222232))) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_233322222223233323333333333222222232223332222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_233322222223233323333333333222222232223332222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) xs_2333222222232333233333333332222222322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_233322222223233323333333333222222232223332222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_233322222223233323333333333222222232223332222)) xs_2333222222232333233333333332222222322)) H1_23332222222323332333333333322222223222333222))))) H_23332222222323332333333333322222223222333)) H_2333222222232333233333333332222222322233)) H_233322222223233323333333333222222232223)) REVERTcast (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_233322222223233323333333333222222232222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_233322222223233323333333333222222232222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App cons (App list A_2333222222232333233333333332) x_233322222223233323333333333222222232 xs_2333222222232333233333333332222222322))) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_233322222223233323333333333222222232222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_233322222223233323333333333222222232222)) (App cons (App list A_2333222222232333233333333332) x_233322222223233323333333333222222232 xs_2333222222232333233333333332222222322)))))))) l0_23332222222323332333333333322222223)) (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_23332222222323332333333333322222222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_23332222222323332333333333322222222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_23332222222323332333333333322222222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_23332222222323332333333333322222222)) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)))) (App (LetIn H_233322222223233323333333333222222233 (App eq_refl (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) (App (LetIn H_2333222222232333233333333332222222333 (App eq_refl (Sort Type) (App list B_23332222222323332333333333322)) (App eq (Sort Type) (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322)) (App (Lambda H_23332222222323332333333333322222223332 (App eq (Sort Type) (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322)) (Lambda H0_233322222223233323333333333222222233322 (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) (Lambda H1_2333222222232333233333333332222222333222 (App eq (App list (App list B_23332222222323332333333333322)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_2333222222232333233333333332222222333222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_2333222222232333233333333332222222333222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_2333222222232333233333333332222222333222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_2333222222232333233333333332222222333222)) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)))) (App Coq.Init.Logic.eq_trans (App list (App list B_23332222222323332333333333322)) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_23332222222323332333333333322222223332222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_23332222222323332333333333322222223332222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)))) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_23332222222323332333333333322222223332222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_23332222222323332333333333322222223332222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)))) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_23332222222323332333333333322222223332222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_23332222222323332333333333322222223332222)) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)))) (App Coq.Init.Logic.f_equal (Prod out_23332222222323332333333333322222223332221 (App list (App list B_23332222222323332333333333322)) (App list (App list B_23332222222323332333333333322))) (App list (App list B_23332222222323332333333333322)) (Lambda f0_23332222222323332333333333322222223332222 (Prod out_23332222222323332333333333322222223332221 (App list (App list B_23332222222323332333333333322)) (App list (App list B_23332222222323332333333333322))) (App f0_23332222222323332333333333322222223332222 (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_233322222223233323333333333222222233322222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_233322222223233323333333333222222233322222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))))) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) (App eq_refl (Prod out_23332222222323332333333333322222223332221 (App list (App list B_23332222222323332333333333322)) (App list (App list B_23332222222323332333333333322))) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))))) (App Coq.Init.Logic.f_equal (App list (App list B_23332222222323332333333333322)) (App list (App list B_23332222222323332333333333322)) (App Coq.Init.Datatypes.app (App list B_23332222222323332333333333322) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) (App Coq.Lists.List.map (App list B_23332222222323332333333333322) (App list B_23332222222323332333333333322) (Lambda l_23332222222323332333333333322222223332222 (App list B_23332222222323332333333333322) (App cons B_23332222222323332333333333322 (App f_233322222223233323333333333222 a_23332222222323332333333333322222) l_23332222222323332333333333322222223332222)) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_23332222222323332333333333322222223332222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_23332222222323332333333333322222223332222)) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222))) H1_2333222222232333233333333332222222333222))))) H_2333222222232333233333333332222222333)) H_233322222223233323333333333222222233)) H_23332222222323332333333333322222223)) (App ExportProof.sublists B_23332222222323332333333333322 (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 l_233322222223233323333333333222222)) IHl_2333222222232333233333333332222222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App Coq.Init.Datatypes.app (App list A_2333222222232333233333333332) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_23332222222323332333333333322222222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_23332222222323332333333333322222222)) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)))) (App Coq.Lists.List.map_app (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list A_2333222222232333233333333332) (Lambda l_23332222222323332333333333322222222 (App list A_2333222222232333233333333332) (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_23332222222323332333333333322222222)) (App ExportProof.sublists A_2333222222232333233333333332 l_233322222223233323333333333222222)))) REVERTcast (App eq (App list (App list B_23332222222323332333333333322)) (App ExportProof.sublists B_23332222222323332333333333322 (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222 (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_233322222223233323333333333222222))) (App Coq.Lists.List.map (App list A_2333222222232333233333333332) (App list B_23332222222323332333333333322) (App Coq.Lists.List.map A_2333222222232333233333333332 B_23332222222323332333333333322 f_233322222223233323333333333222) (App ExportProof.sublists A_2333222222232333233333333332 (App cons A_2333222222232333233333333332 a_23332222222323332333333333322222 l_233322222223233323333333333222222)))))))) l_2333222222232333233333333332222)))))) (Definition ExportProof.filter_map_always (Lambda A_233322222223233222222 (Sort Type) (Lambda B_2333222222232332222222 (Sort Type) (Lambda f_23332222222323322222222 (Prod x_23332222222323322222221 B_2333222222232332222222 bool) (Lambda g_233322222223233222222222 (Prod out_233322222223233222222221 A_233322222223233222222 B_2333222222232332222222) (Lambda l_2333222222232332222222222 (App list A_233322222223233222222) (Lambda H_23332222222323322222222222 (Prod x_23332222222323322222222221 A_233322222223233222222 (App eq bool (App f_23332222222323322222222 (App g_233322222223233222222222 x_23332222222323322222222221)) true)) (App Coq.Init.Datatypes.list_ind A_233322222223233222222 (Lambda l_233322222223233222222222222 (App list A_233322222223233222222) (App eq (App list B_2333222222232332222222) (App Coq.Lists.List.filter B_2333222222232332222222 f_23332222222323322222222 (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_233322222223233222222222222)) (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_233322222223233222222222222))) (App eq_refl (App list B_2333222222232332222222) (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 (App nil A_233322222223233222222))) (Lambda a_233322222223233222222222222 A_233322222223233222222 (Lambda l_2333222222232332222222222222 (App list A_233322222223233222222) (Lambda IHl_23332222222323322222222222222 (App eq (App list B_2333222222232332222222) (App Coq.Lists.List.filter B_2333222222232332222222 f_23332222222323322222222 (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222)) (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222)) (Cast (App Coq.Init.Logic.eq_ind_r bool true (Lambda b_233322222223233222222222222222 bool (App eq (App list B_2333222222232332222222) (Case 0 (Lambda b_2333222222232332222222222222222 bool (App list B_2333222222232332222222)) (CaseMatch b_233322222223233222222222222222) (CaseBranches (App cons B_2333222222232332222222 (App g_233322222223233222222222 a_233322222223233222222222222) (App Coq.Lists.List.filter B_2333222222232332222222 f_23332222222323322222222 (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222))) (App Coq.Lists.List.filter B_2333222222232332222222 f_23332222222323322222222 (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222)))) (App cons B_2333222222232332222222 (App g_233322222223233222222222 a_233322222223233222222222222) (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222)))) (App Coq.Init.Logic.eq_trans (App list B_2333222222232332222222) (App cons B_2333222222232332222222 (App g_233322222223233222222222 a_233322222223233222222222222) (App Coq.Lists.List.filter B_2333222222232332222222 f_23332222222323322222222 (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222))) (App cons B_2333222222232332222222 (App g_233322222223233222222222 a_233322222223233222222222222) (App Coq.Lists.List.filter B_2333222222232332222222 f_23332222222323322222222 (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222))) (App cons B_2333222222232332222222 (App g_233322222223233222222222 a_233322222223233222222222222) (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222)) (App Coq.Init.Logic.f_equal (Prod l_233322222223233222222222222221 (App list B_2333222222232332222222) (App list B_2333222222232332222222)) (App list B_2333222222232332222222) (Lambda f0_233322222223233222222222222222 (Prod l_233322222223233222222222222221 (App list B_2333222222232332222222) (App list B_2333222222232332222222)) (App f0_233322222223233222222222222222 (App Coq.Lists.List.filter B_2333222222232332222222 f_23332222222323322222222 (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222)))) (App cons B_2333222222232332222222 (App g_233322222223233222222222 a_233322222223233222222222222)) (App cons B_2333222222232332222222 (App g_233322222223233222222222 a_233322222223233222222222222)) (App eq_refl (Prod l_233322222223233222222222222221 (App list B_2333222222232332222222) (App list B_2333222222232332222222)) (App cons B_2333222222232332222222 (App g_233322222223233222222222 a_233322222223233222222222222)))) (App Coq.Init.Logic.f_equal (App list B_2333222222232332222222) (App list B_2333222222232332222222) (App cons B_2333222222232332222222 (App g_233322222223233222222222 a_233322222223233222222222222)) (App Coq.Lists.List.filter B_2333222222232332222222 f_23332222222323322222222 (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222)) (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 l_2333222222232332222222222222) IHl_23332222222323322222222222222)) (App f_23332222222323322222222 (App g_233322222223233222222222 a_233322222223233222222222222)) (App H_23332222222323322222222222 a_233322222223233222222222222)) REVERTcast (App eq (App list B_2333222222232332222222) (App Coq.Lists.List.filter B_2333222222232332222222 f_23332222222323322222222 (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 (App cons A_233322222223233222222 a_233322222223233222222222222 l_2333222222232332222222222222))) (App Coq.Lists.List.map A_233322222223233222222 B_2333222222232332222222 g_233322222223233222222222 (App cons A_233322222223233222222 a_233322222223233222222222222 l_2333222222232332222222222222))))))) l_2333222222232332222222222)))))))) (Definition ExportProof.filter_app (Lambda A_233322222223233222222 (Sort Type) (Lambda f_2333222222232332222222 (Prod out_2333222222232332222221 A_233322222223233222222 bool) (Lambda l1_23332222222323322222222 (App list A_233322222223233222222) (Lambda l2_233322222223233222222222 (App list A_233322222223233222222) (App Coq.Init.Datatypes.list_ind A_233322222223233222222 (Lambda l1_2333222222232332222222222 (App list A_233322222223233222222) (App eq (App list A_233322222223233222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 l1_2333222222232332222222222 l2_233322222223233222222222)) (App Coq.Init.Datatypes.app A_233322222223233222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l1_2333222222232332222222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l2_233322222223233222222222)))) (Cast (App eq_refl (App list A_233322222223233222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l2_233322222223233222222222)) REVERTcast (App eq (App list A_233322222223233222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 (App nil A_233322222223233222222) l2_233322222223233222222222)) (App Coq.Init.Datatypes.app A_233322222223233222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App nil A_233322222223233222222)) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l2_233322222223233222222222)))) (Lambda a_2333222222232332222222222 A_233322222223233222222 (Lambda l_23332222222323322222222222 (App list A_233322222223233222222) (Lambda IHl_233322222223233222222222222 (App eq (App list A_233322222223233222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 l_23332222222323322222222222 l2_233322222223233222222222)) (App Coq.Init.Datatypes.app A_233322222223233222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l_23332222222323322222222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l2_233322222223233222222222))) (Cast (LetIn b_2333222222232332222222222223 (App f_2333222222232332222222 a_2333222222232332222222222) bool (Case 0 (Lambda b_23332222222323322222222222232 bool (App eq (App list A_233322222223233222222) (Case 0 (Lambda b_233322222223233222222222222322 bool (App list A_233322222223233222222)) (CaseMatch b_23332222222323322222222222232) (CaseBranches (App cons A_233322222223233222222 a_2333222222232332222222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 l_23332222222323322222222222 l2_233322222223233222222222))) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 l_23332222222323322222222222 l2_233322222223233222222222)))) (App Coq.Init.Datatypes.app A_233322222223233222222 (Case 0 (Lambda b_233322222223233222222222222322 bool (App list A_233322222223233222222)) (CaseMatch b_23332222222323322222222222232) (CaseBranches (App cons A_233322222223233222222 a_2333222222232332222222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l_23332222222323322222222222)) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l_23332222222323322222222222))) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l2_233322222223233222222222)))) (CaseMatch b_2333222222232332222222222223) (CaseBranches (Cast (App Coq.Init.Logic.eq_trans (App list A_233322222223233222222) (App cons A_233322222223233222222 a_2333222222232332222222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 l_23332222222323322222222222 l2_233322222223233222222222))) (App cons A_233322222223233222222 a_2333222222232332222222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 l_23332222222323322222222222 l2_233322222223233222222222))) (App cons A_233322222223233222222 a_2333222222232332222222222 (App Coq.Init.Datatypes.app A_233322222223233222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l_23332222222323322222222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l2_233322222223233222222222))) (App Coq.Init.Logic.f_equal (Prod l_23332222222323322222222222231 (App list A_233322222223233222222) (App list A_233322222223233222222)) (App list A_233322222223233222222) (Lambda f0_23332222222323322222222222232 (Prod l_23332222222323322222222222231 (App list A_233322222223233222222) (App list A_233322222223233222222)) (App f0_23332222222323322222222222232 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 l_23332222222323322222222222 l2_233322222223233222222222)))) (App cons A_233322222223233222222 a_2333222222232332222222222) (App cons A_233322222223233222222 a_2333222222232332222222222) (App eq_refl (Prod l_23332222222323322222222222231 (App list A_233322222223233222222) (App list A_233322222223233222222)) (App cons A_233322222223233222222 a_2333222222232332222222222))) (App Coq.Init.Logic.f_equal (App list A_233322222223233222222) (App list A_233322222223233222222) (App cons A_233322222223233222222 a_2333222222232332222222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 l_23332222222323322222222222 l2_233322222223233222222222)) (App Coq.Init.Datatypes.app A_233322222223233222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l_23332222222323322222222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l2_233322222223233222222222)) IHl_233322222223233222222222222)) REVERTcast (App eq (App list A_233322222223233222222) (App cons A_233322222223233222222 a_2333222222232332222222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 l_23332222222323322222222222 l2_233322222223233222222222))) (App Coq.Init.Datatypes.app A_233322222223233222222 (App cons A_233322222223233222222 a_2333222222232332222222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l_23332222222323322222222222)) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l2_233322222223233222222222)))) (Cast IHl_233322222223233222222222222 REVERTcast (App eq (App list A_233322222223233222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 l_23332222222323322222222222 l2_233322222223233222222222)) (App Coq.Init.Datatypes.app A_233322222223233222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l_23332222222323322222222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l2_233322222223233222222222))))))) REVERTcast (App eq (App list A_233322222223233222222) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App Coq.Init.Datatypes.app A_233322222223233222222 (App cons A_233322222223233222222 a_2333222222232332222222222 l_23332222222323322222222222) l2_233322222223233222222222)) (App Coq.Init.Datatypes.app A_233322222223233222222 (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 (App cons A_233322222223233222222 a_2333222222232332222222222 l_23332222222323322222222222)) (App Coq.Lists.List.filter A_233322222223233222222 f_2333222222232332222222 l2_233322222223233222222222))))))) l1_23332222222323322222222)))))) (Definition ExportProof.sublists_proper (Lambda A_2333222222232332 (Sort Type) (Lambda l_23332222222323322 (App list A_2333222222232332) (App Coq.Init.Datatypes.list_ind A_2333222222232332 (Lambda l_233322222223233222 (App list A_2333222222232332) (App eq (App list (App list A_2333222222232332)) (App ExportProof.sublists A_2333222222232332 l_233322222223233222) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_233322222223233222))))) (App eq_refl (App list (App list A_2333222222232332)) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 (App nil A_2333222222232332))))) (Lambda a_233322222223233222 A_2333222222232332 (Lambda l_2333222222232332222 (App list A_2333222222232332) (Lambda IHl_23332222222323322222 (App eq (App list (App list A_2333222222232332)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)))) (Cast (App (Lambda lemma_233322222223233222222 (App eq (App list (App list A_2333222222232332)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (App list (App list A_2333222222232332)) (App eq (App list (App list A_2333222222232332))) (App Coq.Classes.RelationClasses.eq_Transitive (App list (App list A_2333222222232332))) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_2333222222232332222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222))) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222))) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_2333222222232332222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222))) (App Coq.Classes.Morphisms.reflexive_proper (Prod out_2333222222232332222221 (App list (App list A_2333222222232332)) (Prod out_23332222222323322222211 (App list (App list A_2333222222232332)) (App list (App list A_2333222222232332)))) (App Coq.Classes.Morphisms.respectful (App list (App list A_2333222222232332)) (Prod out_2333222222232332222221 (App list (App list A_2333222222232332)) (App list (App list A_2333222222232332))) (App eq (App list (App list A_2333222222232332))) (App Coq.Classes.Morphisms.respectful (App list (App list A_2333222222232332)) (App list (App list A_2333222222232332)) (App eq (App list (App list A_2333222222232332))) (App eq (App list (App list A_2333222222232332))))) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive (App list (App list A_2333222222232332)) (Prod out_2333222222232332222221 (App list (App list A_2333222222232332)) (App list (App list A_2333222222232332))) (App Coq.Classes.Morphisms.respectful (App list (App list A_2333222222232332)) (App list (App list A_2333222222232332)) (App eq (App list (App list A_2333222222232332))) (App eq (App list (App list A_2333222222232332)))) (App Coq.Classes.Morphisms.reflexive_eq_dom_reflexive (App list (App list A_2333222222232332)) (App list (App list A_2333222222232332)) (App eq (App list (App list A_2333222222232332))) (App Coq.Classes.RelationClasses.eq_Reflexive (App list (App list A_2333222222232332))))) (App Coq.Init.Datatypes.app (App list A_2333222222232332)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222))) lemma_233322222223233222222 (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_2333222222232332222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_2333222222232332222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)) (App Coq.Classes.Morphisms.eq_proper_proxy (App list (App list A_2333222222232332)) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_2333222222232332222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)))) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_2333222222232332222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222))))) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_2333222222232332222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222))))) (App Coq.Classes.Morphisms.eq_proper_proxy (App list (App list A_2333222222232332)) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_2333222222232332222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)))))))) IHl_23332222222323322222 (Cast (App Coq.Init.Logic.eq_ind_r (App list (App list A_2333222222232332)) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_233322222223233222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_233322222223233222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)))) (Lambda l_233322222223233222222 (App list (App list A_2333222222232332)) (App eq (App list (App list A_2333222222232332)) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_2333222222232332222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)))) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) l_233322222223233222222))) (App Coq.Init.Logic.eq_ind_r (App list (App list A_2333222222232332)) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_233322222223233222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_233322222223233222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)) (Lambda l_233322222223233222222 (App list (App list A_2333222222232332)) (App eq (App list (App list A_2333222222232332)) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_2333222222232332222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)))) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)) l_233322222223233222222)))) (App eq_refl (App list (App list A_2333222222232332)) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_233322222223233222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_233322222223233222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222))))) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_233322222223233222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_233322222223233222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222))) (App ExportProof.filter_map_always (App list A_2333222222232332) (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (Lambda l_233322222223233222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_233322222223233222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (Lambda x_233322222223233222222 (App list A_2333222222232332) (App eq_refl bool true)))) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_233322222223233222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_233322222223233222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)))) (App ExportProof.filter_app (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_233322222223233222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_233322222223233222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)))) REVERTcast (App eq (App list (App list A_2333222222232332)) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222))) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_233322222223233222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_233322222223233222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222))) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App Coq.Init.Datatypes.app (App list A_2333222222232332) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222) (App Coq.Lists.List.map (App list A_2333222222232332) (App list A_2333222222232332) (Lambda l_233322222223233222222 (App list A_2333222222232332) (App cons A_2333222222232332 a_233322222223233222 l_233322222223233222222)) (App ExportProof.sublists A_2333222222232332 l_2333222222232332222)))))))) REVERTcast (App eq (App list (App list A_2333222222232332)) (App ExportProof.sublists A_2333222222232332 (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222)) (App cons (App list A_2333222222232332) (App nil A_2333222222232332) (App Coq.Lists.List.filter (App list A_2333222222232332) (App ExportProof.nonempty A_2333222222232332) (App ExportProof.sublists A_2333222222232332 (App cons A_2333222222232332 a_233322222223233222 l_2333222222232332222))))))))) l_23332222222323322)))) (Definition Coq.Init.Logic.not (Lambda A_23332222222322222222 (Sort Prop) (Prod out_233322222223222222221 A_23332222222322222222 False))) (Definition Coq.Init.Logic.or_ind (Lambda A_2333222222232222222222 (Sort Prop) (Lambda B_23332222222322222222222 (Sort Prop) (Lambda P_233322222223222222222222 (Sort Prop) (Lambda f_2333222222232222222222222 (Prod out_2333222222232222222222221 A_2333222222232222222222 P_233322222223222222222222) (Lambda f_23332222222322222222222222 (Prod out_23332222222322222222222221 B_23332222222322222222222 P_233322222223222222222222) (Lambda o_233322222223222222222222222 (App or A_2333222222232222222222 B_23332222222322222222222) (Case 2 (Lambda out_2333222222232222222222222222 (App or A_2333222222232222222222 B_23332222222322222222222) P_233322222223222222222222) (CaseMatch o_233322222223222222222222222) (CaseBranches f_2333222222232222222222222 f_23332222222322222222222222))))))))) (Definition Coq.Logic.Decidable.decidable (Lambda P_23332222222322222212 (Sort Prop) (App or P_23332222222322222212 (App Coq.Init.Logic.not P_23332222222322222212)))) (Definition Coq.Logic.Decidable.dec_not_not (Cast (Lambda P_2333222222232222222 (Sort Prop) (Lambda H_23332222222322222222 (App or P_2333222222232222222 (App Coq.Init.Logic.not P_2333222222232222222)) (Lambda H0_233322222223222222222 (Prod out_233322222223222222221 (App Coq.Init.Logic.not P_2333222222232222222) False) (App Coq.Init.Logic.or_ind P_2333222222232222222 (App Coq.Init.Logic.not P_2333222222232222222) P_2333222222232222222 (Lambda H1_2333222222232222222222 P_2333222222232222222 H1_2333222222232222222222) (Lambda H1_2333222222232222222222 (App Coq.Init.Logic.not P_2333222222232222222) (LetIn H_23332222222322222222223 (App H0_233322222223222222222 H1_2333222222232222222222) False (App Coq.Init.Logic.False_ind P_2333222222232222222 H_23332222222322222222223))) H_23332222222322222222)))) REVERTcast (Prod P_2333222222232222221 (Sort Prop) (Prod out_23332222222322222211 (App Coq.Logic.Decidable.decidable P_2333222222232222221) (Prod out_233322222223222222111 (Prod out_233322222223222222111 (App Coq.Init.Logic.not P_2333222222232222221) False) P_2333222222232222221))))) (Definition Coq.ZArith.BinInt.Z.lt_trichotomy (Lambda n_233322222223222222222 Z (Lambda m_2333222222232222222222 Z (App (Lambda lemma_23332222222322222222222 (App Coq.Init.Logic.iff (App Coq.ZArith.BinInt.Z.le n_233322222223222222222 m_2333222222232222222222) (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App eq Z n_233322222223222222222 m_2333222222232222222222))) (App Coq.Classes.Morphisms.subrelation_proper (Prod A_233322222223222222222221 (Sort Prop) (Prod B_2333222222232222222222211 (Sort Prop) (Sort Prop))) (App Coq.Classes.Morphisms.respectful (Sort Prop) (Prod out_233322222223222222222221 (Sort Prop) (Sort Prop)) Coq.Init.Logic.iff (App Coq.Classes.Morphisms.respectful (Sort Prop) (Sort Prop) Coq.Init.Logic.iff Coq.Init.Logic.iff)) Coq.Program.Basics.impl Coq.Classes.Morphisms_Prop.iff_iff_iff_impl_morphism (App Coq.Classes.Morphisms.respectful (Sort Prop) (Prod B_233322222223222222222221 (Sort Prop) (Sort Prop)) Coq.Init.Logic.iff (App Coq.Classes.Morphisms.respectful (Sort Prop) (Sort Prop) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful (Sort Prop) (Prod B_233322222223222222222221 (Sort Prop) (Sort Prop)) Coq.Init.Logic.iff Coq.Init.Logic.iff (App Coq.Classes.Morphisms.subrelation_refl (Sort Prop) Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful (Sort Prop) (Sort Prop) Coq.Init.Logic.iff Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful (Sort Prop) (Sort Prop) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful (Sort Prop) (Sort Prop) Coq.Init.Logic.iff Coq.Init.Logic.iff (App Coq.Classes.Morphisms.subrelation_refl (Sort Prop) Coq.Init.Logic.iff) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) (App or (App Coq.ZArith.BinInt.Z.le n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222)) (App or (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App eq Z n_233322222223222222222 m_2333222222232222222222)) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222)) (App Coq.Classes.Morphisms_Prop.or_iff_morphism (App Coq.ZArith.BinInt.Z.le n_233322222223222222222 m_2333222222232222222222) (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App eq Z n_233322222223222222222 m_2333222222232222222222)) lemma_23332222222322222222222 (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222))) (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App or (App eq Z n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222))) (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App or (App eq Z n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222))) (App Coq.Classes.Morphisms.reflexive_proper_proxy (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App or (App eq Z n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222)))))) (App Coq.ZArith.BinInt.Z.lt_eq_cases n_233322222223222222222 m_2333222222232222222222) (Lambda H_23332222222322222222222 (App or (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App eq Z n_233322222223222222222 m_2333222222232222222222)) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222)) (App Coq.Init.Logic.or_ind (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App eq Z n_233322222223222222222 m_2333222222232222222222)) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222) (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App or (App eq Z n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222))) (Lambda H0_233322222223222222222222 (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App eq Z n_233322222223222222222 m_2333222222232222222222)) (App Coq.Init.Logic.or_ind (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App eq Z n_233322222223222222222 m_2333222222232222222222) (App or (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App or (App eq Z n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222))) (Lambda H_2333222222232222222222222 (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App or_introl (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App or (App eq Z n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222)) H_2333222222232222222222222)) (Lambda H_2333222222232222222222222 (App eq Z n_233322222223222222222 m_2333222222232222222222) (App or_intror (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App or (App eq Z n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222)) (App or_introl (App eq Z n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222) H_2333222222232222222222222))) H0_233322222223222222222222)) (Lambda H0_233322222223222222222222 (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222) (App or_intror (App Coq.ZArith.BinInt.Z.lt n_233322222223222222222 m_2333222222232222222222) (App or (App eq Z n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222)) (App or_intror (App eq Z n_233322222223222222222 m_2333222222232222222222) (App Coq.ZArith.BinInt.Z.lt m_2333222222232222222222 n_233322222223222222222) H0_233322222223222222222222))) H_23332222222322222222222)) (App Coq.ZArith.BinInt.Z.le_gt_cases n_233322222223222222222 m_2333222222232222222222))))) (Definition Coq.ZArith.BinInt.Z.lt (Lambda x_233322222223222222222 Z (Lambda y_2333222222232222222222 Z (App eq comparison (App Coq.ZArith.BinIntDef.Z.compare x_233322222223222222222 y_2333222222232222222222) Lt)))) (Definition Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.lt_irrefl (Lambda x_2333222222232222222232222 Z (App Coq.Classes.RelationClasses.StrictOrder_Irreflexive Z Coq.ZArith.BinInt.Z.lt Coq.ZArith.BinInt.Z.Private_OrderTac.IsTotal.lt_strorder x_2333222222232222222232222))) (Definition Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_lt (Lambda x_233322222223222222223222 Z (Lambda y_2333222222232222222232222 Z (Lambda z_23332222222322222222322222 Z (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.trans OEQ OLT x_233322222223222222223222 y_2333222222232222222232222 z_23332222222322222222322222))))) (Definition Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_sym (Lambda x_233322222223222222223222 Z (Lambda y_2333222222232222222232222 Z (Lambda H_23332222222322222222322222 (App eq Z x_233322222223222222223222 y_2333222222232222222232222) (App Coq.Classes.RelationClasses.symmetry Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Symmetric Z (App eq Z) Coq.ZArith.BinInt.Z.Private_OrderTac.IsTotal.eq_equiv) x_233322222223222222223222 y_2333222222232222222232222 H_23332222222322222222322222))))) (Definition Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.not_neq_eq (Lambda x_233322222223222222223222 Z (Lambda y_2333222222232222222232222 Z (Lambda H_23332222222322222222322222 (App Coq.Init.Logic.not (App Coq.Init.Logic.not (App eq Z x_233322222223222222223222 y_2333222222232222222232222))) (LetIn o_233322222223222222223222223 (App Coq.ZArith.BinInt.Z.Private_OrderTac.IsTotal.lt_total x_233322222223222222223222 y_2333222222232222222232222) (App or (App Coq.ZArith.BinInt.Z.lt x_233322222223222222223222 y_2333222222232222222232222) (App or (App eq Z x_233322222223222222223222 y_2333222222232222222232222) (App Coq.ZArith.BinInt.Z.lt y_2333222222232222222232222 x_233322222223222222223222))) (Case 2 (Lambda out_2333222222232222222232222232 (App or (App Coq.ZArith.BinInt.Z.lt x_233322222223222222223222 y_2333222222232222222232222) (App or (App eq Z x_233322222223222222223222 y_2333222222232222222232222) (App Coq.ZArith.BinInt.Z.lt y_2333222222232222222232222 x_233322222223222222223222))) (App eq Z x_233322222223222222223222 y_2333222222232222222232222)) (CaseMatch o_233322222223222222223222223) (CaseBranches (Lambda H'_2333222222232222222232222232 (App Coq.ZArith.BinInt.Z.lt x_233322222223222222223222 y_2333222222232222222232222) (LetIn n_23332222222322222222322222323 (App H_23332222222322222222322222 (Cast (Lambda H_23332222222322222222322222322 (App eq Z x_233322222223222222223222 y_2333222222232222222232222) (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.lt_irrefl y_2333222222232222222232222 (App (Lambda lemma_233322222223222222223222223222 (App eq Z x_233322222223222222223222 y_2333222222232222222232222) (App Coq.Classes.Morphisms.subrelation_proper (Prod out_2333222222232222222232222232221 Z (Prod out_23332222222322222222322222322211 Z (Sort Prop))) (App Coq.Classes.Morphisms.respectful Z (Prod out_2333222222232222222232222232221 Z (Sort Prop)) (App eq Z) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff)) Coq.ZArith.BinInt.Z.lt Coq.ZArith.BinInt.Z.Private_OrderTac.IsTotal.lt_compat (App Coq.Classes.Morphisms.respectful Z (Prod out_2333222222232222222232222232221 Z (Sort Prop)) (App eq Z) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Program.Basics.impl)) tt (App Coq.Classes.Morphisms.subrelation_respectful Z (Prod out_2333222222232222222232222232221 Z (Sort Prop)) (App eq Z) (App eq Z) (App Coq.Classes.Morphisms.subrelation_refl Z (App eq Z)) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Program.Basics.impl) (App Coq.Classes.Morphisms.subrelation_respectful Z (Sort Prop) (App eq Z) (App eq Z) (App Coq.Classes.Morphisms.subrelation_refl Z (App eq Z)) Coq.Init.Logic.iff Coq.Program.Basics.impl Coq.Classes.Morphisms.iff_impl_subrelation)) x_233322222223222222223222 y_2333222222232222222232222 lemma_233322222223222222223222223222 y_2333222222232222222232222 y_2333222222232222222232222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.Private_OrderTac.IsTotal.eq_equiv) y_2333222222232222222232222))) H_23332222222322222222322222322 H'_2333222222232222222232222232))) REVERTcast (App Coq.Init.Logic.not (App eq Z x_233322222223222222223222 y_2333222222232222222232222)))) False (Case 0 (Lambda out_233322222223222222223222223232 False (App eq Z x_233322222223222222223222 y_2333222222232222222232222)) (CaseMatch n_23332222222322222222322222323) (CaseBranches)))) (Lambda H0_2333222222232222222232222232 (App or (App eq Z x_233322222223222222223222 y_2333222222232222222232222) (App Coq.ZArith.BinInt.Z.lt y_2333222222232222222232222 x_233322222223222222223222)) (Case 2 (Lambda out_23332222222322222222322222322 (App or (App eq Z x_233322222223222222223222 y_2333222222232222222232222) (App Coq.ZArith.BinInt.Z.lt y_2333222222232222222232222 x_233322222223222222223222)) (App eq Z x_233322222223222222223222 y_2333222222232222222232222)) (CaseMatch H0_2333222222232222222232222232) (CaseBranches (Lambda H'_23332222222322222222322222322 (App eq Z x_233322222223222222223222 y_2333222222232222222232222) H'_23332222222322222222322222322) (Lambda H'_23332222222322222222322222322 (App Coq.ZArith.BinInt.Z.lt y_2333222222232222222232222 x_233322222223222222223222) (LetIn n_233322222223222222223222223223 (App H_23332222222322222222322222 (Cast (Lambda H_233322222223222222223222223222 (App eq Z x_233322222223222222223222 y_2333222222232222222232222) (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.lt_irrefl y_2333222222232222222232222 (App (Lambda lemma_2333222222232222222232222232222 (App eq Z x_233322222223222222223222 y_2333222222232222222232222) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism Z (Prod out_23332222222322222222322222322221 Z (Sort Prop)) (App eq Z) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Program.Basics.impl) Coq.ZArith.BinInt.Z.lt (App Coq.Classes.Morphisms.subrelation_proper (Prod out_23332222222322222222322222322221 Z (Prod out_233322222223222222223222223222211 Z (Sort Prop))) (App Coq.Classes.Morphisms.respectful Z (Prod out_23332222222322222222322222322221 Z (Sort Prop)) (App eq Z) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff)) Coq.ZArith.BinInt.Z.lt Coq.ZArith.BinInt.Z.Private_OrderTac.IsTotal.lt_compat (App Coq.Classes.Morphisms.respectful Z (Prod out_23332222222322222222322222322221 Z (Sort Prop)) (App eq Z) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Program.Basics.impl)) tt (App Coq.Classes.Morphisms.subrelation_respectful Z (Prod out_23332222222322222222322222322221 Z (Sort Prop)) (App eq Z) (App eq Z) (App Coq.Classes.Morphisms.subrelation_refl Z (App eq Z)) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Program.Basics.impl) (App Coq.Classes.Morphisms.subrelation_respectful Z (Sort Prop) (App eq Z) (App eq Z) (App Coq.Classes.Morphisms.subrelation_refl Z (App eq Z)) Coq.Init.Logic.iff Coq.Program.Basics.impl Coq.Classes.Morphisms.iff_impl_subrelation))) y_2333222222232222222232222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.Private_OrderTac.IsTotal.eq_equiv) y_2333222222232222222232222) x_233322222223222222223222 y_2333222222232222222232222 lemma_2333222222232222222232222232222)) H_233322222223222222223222223222 H'_23332222222322222222322222322))) REVERTcast (App Coq.Init.Logic.not (App eq Z x_233322222223222222223222 y_2333222222232222222232222)))) False (Case 0 (Lambda out_2333222222232222222232222232232 False (App eq Z x_233322222223222222223222 y_2333222222232222222232222)) (CaseMatch n_233322222223222222223222223223) (CaseBranches)))))))))))))) (Definition Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_refl (Lambda x_23332222222322222222322222 Z (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.Private_OrderTac.IsTotal.eq_equiv) x_23332222222322222222322222))) (Definition Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_neq (Lambda x_2333222222232222222232222 Z (Lambda y_23332222222322222222322222 Z (Lambda z_233322222223222222223222222 Z (Lambda H_2333222222232222222232222222 (App eq Z x_2333222222232222222232222 y_23332222222322222222322222) (Lambda H0_23332222222322222222322222222 (App Coq.Init.Logic.not (App eq Z y_23332222222322222222322222 z_233322222223222222223222222)) (Cast (Lambda H1_233322222223222222223222222222 (App eq Z x_2333222222232222222232222 z_233322222223222222223222222) (App H0_23332222222322222222322222222 (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_trans y_23332222222322222222322222 x_2333222222232222222232222 z_233322222223222222223222222 (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_sym x_2333222222232222222232222 y_23332222222322222222322222 H_2333222222232222222232222222) H1_233322222223222222223222222222))) REVERTcast (App Coq.Init.Logic.not (App eq Z x_2333222222232222222232222 z_233322222223222222223222222))))))))) (Definition Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.lt_eq (Lambda x_2333222222232222222232222 Z (Lambda y_23332222222322222222322222 Z (Lambda z_233322222223222222223222222 Z (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.trans OLT OEQ x_2333222222232222222232222 y_23332222222322222222322222 z_233322222223222222223222222))))) (Definition Coq.ZArith.BinInt.Z.eq_decidable (Lambda n_2333222222232222222 Z (Lambda m_23332222222322222222 Z (LetIn o_233322222223222222223 (App Coq.ZArith.BinInt.Z.lt_trichotomy n_2333222222232222222 m_23332222222322222222) (App or (App Coq.ZArith.BinInt.Z.lt n_2333222222232222222 m_23332222222322222222) (App or (App eq Z n_2333222222232222222 m_23332222222322222222) (App Coq.ZArith.BinInt.Z.lt m_23332222222322222222 n_2333222222232222222))) (Case 2 (Lambda out_2333222222232222222232 (App or (App Coq.ZArith.BinInt.Z.lt n_2333222222232222222 m_23332222222322222222) (App or (App eq Z n_2333222222232222222 m_23332222222322222222) (App Coq.ZArith.BinInt.Z.lt m_23332222222322222222 n_2333222222232222222))) (App Coq.Logic.Decidable.decidable (App eq Z n_2333222222232222222 m_23332222222322222222))) (CaseMatch o_233322222223222222223) (CaseBranches (Lambda H_2333222222232222222232 (App Coq.ZArith.BinInt.Z.lt n_2333222222232222222 m_23332222222322222222) (App or_intror (App eq Z n_2333222222232222222 m_23332222222322222222) (App Coq.Init.Logic.not (App eq Z n_2333222222232222222 m_23332222222322222222)) (Cast (Lambda H0_23332222222322222222322 (App eq Z n_2333222222232222222 m_23332222222322222222) (App Coq.Init.Logic.False_ind False (App (Lambda H_233322222223222222223222 (App Coq.ZArith.BinInt.Z.lt m_23332222222322222222 m_23332222222322222222) (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.lt_irrefl m_23332222222322222222 H_233322222223222222223222)) (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_lt m_23332222222322222222 n_2333222222232222222 m_23332222222322222222 (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_sym n_2333222222232222222 m_23332222222322222222 H0_23332222222322222222322) H_2333222222232222222232)))) REVERTcast (App Coq.Init.Logic.not (App eq Z n_2333222222232222222 m_23332222222322222222))))) (Lambda H_2333222222232222222232 (App or (App eq Z n_2333222222232222222 m_23332222222322222222) (App Coq.ZArith.BinInt.Z.lt m_23332222222322222222 n_2333222222232222222)) (Case 2 (Lambda out_23332222222322222222322 (App or (App eq Z n_2333222222232222222 m_23332222222322222222) (App Coq.ZArith.BinInt.Z.lt m_23332222222322222222 n_2333222222232222222)) (App Coq.Logic.Decidable.decidable (App eq Z n_2333222222232222222 m_23332222222322222222))) (CaseMatch H_2333222222232222222232) (CaseBranches (Lambda H_23332222222322222222322 (App eq Z n_2333222222232222222 m_23332222222322222222) (App or_introl (App eq Z n_2333222222232222222 m_23332222222322222222) (App Coq.Init.Logic.not (App eq Z n_2333222222232222222 m_23332222222322222222)) (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.not_neq_eq n_2333222222232222222 m_23332222222322222222 (Cast (Lambda H0_233322222223222222223222 (App Coq.Init.Logic.not (App eq Z n_2333222222232222222 m_23332222222322222222)) (App (Lambda H0_2333222222232222222232222 (App Coq.Init.Logic.not (App eq Z m_23332222222322222222 m_23332222222322222222)) (App H0_2333222222232222222232222 (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_refl m_23332222222322222222))) (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_neq m_23332222222322222222 n_2333222222232222222 m_23332222222322222222 (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.eq_sym n_2333222222232222222 m_23332222222322222222 H_23332222222322222222322) H0_233322222223222222223222))) REVERTcast (App Coq.Init.Logic.not (App Coq.Init.Logic.not (App eq Z n_2333222222232222222 m_23332222222322222222))))))) (Lambda H_23332222222322222222322 (App Coq.ZArith.BinInt.Z.lt m_23332222222322222222 n_2333222222232222222) (App or_intror (App eq Z n_2333222222232222222 m_23332222222322222222) (App Coq.Init.Logic.not (App eq Z n_2333222222232222222 m_23332222222322222222)) (Cast (Lambda H0_233322222223222222223222 (App eq Z n_2333222222232222222 m_23332222222322222222) (App Coq.Init.Logic.False_ind False (App (Lambda H_2333222222232222222232222 (App Coq.ZArith.BinInt.Z.lt m_23332222222322222222 m_23332222222322222222) (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.lt_irrefl m_23332222222322222222 H_2333222222232222222232222)) (App Coq.ZArith.BinInt.Z.Private_OrderTac.Tac.lt_eq m_23332222222322222222 n_2333222222232222222 m_23332222222322222222 H_23332222222322222222322 H0_233322222223222222223222)))) REVERTcast (App Coq.Init.Logic.not (App eq Z n_2333222222232222222 m_23332222222322222222)))))))))))))) (Definition Coq.Init.Logic.ex_ind (Lambda A_23332222222322222222 (Sort Type) (Lambda P_233322222223222222222 (Prod out_233322222223222222221 A_23332222222322222222 (Sort Prop)) (Lambda P_2333222222232222222222 (Sort Prop) (Lambda f_23332222222322222222222 (Prod x_23332222222322222222221 A_23332222222322222222 (Prod out_233322222223222222222211 (App P_233322222223222222222 x_23332222222322222222221) P_2333222222232222222222)) (Lambda e_233322222223222222222222 (App ex A_23332222222322222222 P_233322222223222222222) (Case 2 (Lambda out_2333222222232222222222222 (App ex A_23332222222322222222 P_233322222223222222222) P_2333222222232222222222) (CaseMatch e_233322222223222222222222) (CaseBranches f_23332222222322222222222)))))))) (Definition Coq.omega.OmegaLemmas.fast_Zplus_comm (Lambda x_23332222222322222222222222 Z (Lambda y_233322222223222222222222222 Z (Lambda P_2333222222232222222222222222 (Prod out_2333222222232222222222222221 Z (Sort Prop)) (Lambda H_23332222222322222222222222222 (App P_2333222222232222222222222222 (App Coq.ZArith.BinIntDef.Z.add y_233322222223222222222222222 x_23332222222322222222222222)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add y_233322222223222222222222222 x_23332222222322222222222222) P_2333222222232222222222222222 H_23332222222322222222222222222 (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222222222222 y_233322222223222222222222222) (App Coq.ZArith.BinInt.Z.add_comm x_23332222222322222222222222 y_233322222223222222222222222))))))) (Definition Coq.ZArith.BinInt.Z.opp_add_distr (Lambda n_233322222223222222222222222222 Z (Lambda m_2333222222232222222222222222222 Z (Cast (App Coq.ZArith.BinInt.Z.bi_induction (Lambda t_23332222222322222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add t_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp t_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))) (Cast (Cast (Lambda x_23332222222322222222222222222222 Z (Lambda y_233322222223222222222222222222222 Z (Lambda H_2333222222232222222222222222222222 (App eq Z x_23332222222322222222222222222222 y_233322222223222222222222222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp x_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add y_233322222223222222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp y_233322222223222222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add y_233322222223222222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinInt.Z.opp_wd (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222222222222222222 m_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.add y_233322222223222222222222222222222 m_2333222222232222222222222222222) (App Coq.ZArith.BinInt.Z.add_wd x_23332222222322222222222222222222 y_233322222223222222222222222222222 H_2333222222232222222222222222222222 m_2333222222232222222222222222222 m_2333222222232222222222222222222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp x_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp y_233322222223222222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.opp x_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp y_233322222223222222222222222222222) (App Coq.ZArith.BinInt.Z.opp_wd x_23332222222322222222222222222222 y_233322222223222222222222222222222 H_2333222222232222222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add y_233322222223222222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp y_233322222223222222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add y_233322222223222222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp y_233322222223222222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add y_233322222223222222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp y_233322222223222222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add y_233322222223222222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp y_233322222223222222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))))))) REVERTcast (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff (Lambda t_23332222222322222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add t_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp t_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))) (Lambda t_23332222222322222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add t_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp t_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))))) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_23332222222322222222222222222221 Z (Sort Prop)) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff) (Lambda t_23332222222322222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add t_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp t_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))))) (App (Lambda lemma_23332222222322222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.opp Z0) Z0) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp Z0) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.opp Z0) Z0 lemma_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))))) Coq.ZArith.BinInt.Z.opp_0 (App (Lambda lemma_23332222222322222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232222222222222222222) m_2333222222232222222222222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222) (App Coq.ZArith.BinInt.Z.opp_wd (App Coq.ZArith.BinIntDef.Z.add Z0 m_2333222222232222222222222222222) m_2333222222232222222222222222222 lemma_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy Z (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))))) (App Coq.ZArith.BinInt.Z.add_0_l m_2333222222232222222222222222222) (App (Lambda lemma_23332222222322222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222) lemma_23332222222322222222222222222222)) (App Coq.ZArith.BinInt.Z.add_0_l (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))))) (Lambda n_23332222222322222222222222222222 Z (App (Lambda lemma_233322222223222222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222) m_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222) m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222) m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinInt.Z.opp_wd (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222) m_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) lemma_233322222223222222222222222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))))) (App Coq.ZArith.BinInt.Z.add_succ_l n_23332222222322222222222222222222 m_2333222222232222222222222222222) (App (Lambda lemma_233322222223222222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) lemma_233322222223222222222222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))))) (App Coq.ZArith.BinInt.Z.opp_succ (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App (Lambda lemma_233322222223222222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinInt.Z.add_wd (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.succ n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222)) lemma_233322222223222222222222222222222 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))))) (App Coq.ZArith.BinInt.Z.opp_succ n_23332222222322222222222222222222) (App (Lambda lemma_233322222223222222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) lemma_233322222223222222222222222222222))) (App Coq.ZArith.BinInt.Z.add_pred_l (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)) (App (Lambda lemma_233322222223222222222222222222222 (App Coq.Init.Logic.iff (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App eq Z (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222))) (App Coq.ZArith.BinIntDef.Z.pred (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) lemma_233322222223222222222222222222222)) (App Coq.ZArith.BinInt.Z.pred_inj_wd (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222)))))))))) n_233322222223222222222222222222) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add n_233322222223222222222222222222 m_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp n_233322222223222222222222222222) (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222222))))))) (Definition Coq.omega.OmegaLemmas.fast_Zopp_plus_distr (Lambda x_23332222222322222222222222 Z (Lambda y_233322222223222222222222222 Z (Lambda P_2333222222232222222222222222 (Prod out_2333222222232222222222222221 Z (Sort Prop)) (Lambda H_23332222222322222222222222222 (App P_2333222222232222222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp x_23332222222322222222222222) (App Coq.ZArith.BinIntDef.Z.opp y_233322222223222222222222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp x_23332222222322222222222222) (App Coq.ZArith.BinIntDef.Z.opp y_233322222223222222222222222)) P_2333222222232222222222222222 H_23332222222322222222222222222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222222222222 y_233322222223222222222222222)) (App Coq.ZArith.BinInt.Z.opp_add_distr x_23332222222322222222222222 y_233322222223222222222222222))))))) (Definition Coq.ZArith.BinInt.Z.opp_eq_mul_m1 (Lambda n_23332222222322222222222222222 Z (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App Zneg xH) n_23332222222322222222222222222) (Lambda z_233322222223222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.opp n_23332222222322222222222222222) z_233322222223222222222222222222)) (Case 0 (Lambda z_233322222223222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.opp z_233322222223222222222222222222) (App Coq.ZArith.BinIntDef.Z.mul (App Zneg xH) z_233322222223222222222222222222))) (CaseMatch n_23332222222322222222222222222) (CaseBranches (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.mul (App Zneg xH) Z0)) (Lambda p_233322222223222222222222222222 positive (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.mul (App Zneg xH) (App Zpos p_233322222223222222222222222222)))) (Lambda p_233322222223222222222222222222 positive (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.mul (App Zneg xH) (App Zneg p_233322222223222222222222222222)))))) (App Coq.ZArith.BinIntDef.Z.mul n_23332222222322222222222222222 (App Zneg xH)) (App Coq.ZArith.BinInt.Z.mul_comm n_23332222222322222222222222222 (App Zneg xH))))) (Definition Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 (Lambda x_23332222222322222222222222 Z (Lambda P_233322222223222222222222222 (Prod out_233322222223222222222222221 Z (Sort Prop)) (Lambda H_2333222222232222222222222222 (App P_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.mul x_23332222222322222222222222 (App Zneg xH))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul x_23332222222322222222222222 (App Zneg xH)) P_233322222223222222222222222 H_2333222222232222222222222222 (App Coq.ZArith.BinIntDef.Z.opp x_23332222222322222222222222) (App Coq.ZArith.BinInt.Z.opp_eq_mul_m1 x_23332222222322222222222222)))))) (Definition Coq.ZArith.BinInt.Z.add_shuffle3 (Lambda n_2333222222232222222222222222222 Z (Lambda m_23332222222322222222222222222222 Z (Lambda p_233322222223222222222222222222222 Z (App (Lambda lemma_2333222222232222222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 p_233322222223222222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 p_233322222223222222222222222222222) n_2333222222232222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 p_233322222223222222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 p_233322222223222222222222222222222) n_2333222222232222222222222222222) lemma_2333222222232222222222222222222222 (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy Z (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222))))) (App Coq.ZArith.BinInt.Z.add_comm n_2333222222232222222222222222222 (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 p_233322222223222222222222222222222)) (App (Lambda lemma_2333222222232222222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add p_233322222223222222222222222222222 n_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 p_233322222223222222222222222222222) n_2333222222232222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 p_233322222223222222222222222222222) n_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add p_233322222223222222222222222222222 n_2333222222232222222222222222222)) (App Coq.Classes.RelationClasses.symmetry Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Symmetric Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add p_233322222223222222222222222222222 n_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 p_233322222223222222222222222222222) n_2333222222232222222222222222222) lemma_2333222222232222222222222222222222) (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy Z (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222))))) (App Coq.ZArith.BinInt.Z.add_assoc m_23332222222322222222222222222222 p_233322222223222222222222222222222 n_2333222222232222222222222222222) (App (Lambda lemma_2333222222232222222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add p_233322222223222222222222222222222 n_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222)) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add p_233322222223222222222222222222222 n_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222)) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism Z (Prod out_23332222222322222222222222222222221 Z Z) (App eq Z) (App Coq.Classes.Morphisms.respectful Z Z (App eq Z) (App eq Z)) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinInt.Z.add_wd m_23332222222322222222222222222222 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) m_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.add p_233322222223222222222222222222222 n_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222) lemma_2333222222232222222222222222222222) (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222)) (App Coq.Classes.Morphisms.eq_proper_proxy Z (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222))))) (App Coq.ZArith.BinInt.Z.add_comm p_233322222223222222222222222222222 n_2333222222232222222222222222222) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add m_23332222222322222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222 p_233322222223222222222222222222222)))))))))) (Definition Coq.omega.OmegaLemmas.fast_Zplus_permute (Lambda n_23332222222322222222222222 Z (Lambda m_233322222223222222222222222 Z (Lambda p_2333222222232222222222222222 Z (Lambda P_23332222222322222222222222222 (Prod out_23332222222322222222222222221 Z (Sort Prop)) (Lambda H_233322222223222222222222222222 (App P_23332222222322222222222222222 (App Coq.ZArith.BinIntDef.Z.add m_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222 p_2333222222232222222222222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add m_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222 p_2333222222232222222222222222)) P_23332222222322222222222222222 H_233322222223222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222 (App Coq.ZArith.BinIntDef.Z.add m_233322222223222222222222222 p_2333222222232222222222222222)) (App Coq.ZArith.BinInt.Z.add_shuffle3 n_23332222222322222222222222 m_233322222223222222222222222 p_2333222222232222222222222222)))))))) (Definition Coq.omega.OmegaLemmas.Zred_factor0 (Lambda n_23332222222322222222222222222 Z (App Coq.Init.Logic.eq_ind_r Z n_23332222222322222222222222222 (Lambda z_233322222223222222222222222222 Z (App eq Z n_23332222222322222222222222222 z_233322222223222222222222222222)) (App eq_refl Z n_23332222222322222222222222222) (App Coq.ZArith.BinIntDef.Z.mul n_23332222222322222222222222222 (App Zpos xH)) (App Coq.ZArith.BinInt.Z.mul_1_r n_23332222222322222222222222222)))) (Definition Coq.omega.OmegaLemmas.fast_Zred_factor0 (Lambda x_23332222222322222222222222 Z (Lambda P_233322222223222222222222222 (Prod out_233322222223222222222222221 Z (Sort Prop)) (Lambda H_2333222222232222222222222222 (App P_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.mul x_23332222222322222222222222 (App Zpos xH))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul x_23332222222322222222222222 (App Zpos xH)) P_233322222223222222222222222 H_2333222222232222222222222222 x_23332222222322222222222222 (App Coq.omega.OmegaLemmas.Zred_factor0 x_23332222222322222222222222)))))) (Definition Coq.omega.OmegaLemmas.Zred_factor6 (Lambda n_23332222222322222222222222222 Z (App Coq.Init.Logic.eq_ind_r Z n_23332222222322222222222222222 (Lambda z_233322222223222222222222222222 Z (App eq Z n_23332222222322222222222222222 z_233322222223222222222222222222)) (App eq_refl Z n_23332222222322222222222222222) (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222222222 Z0) (App Coq.ZArith.BinInt.Z.add_0_r n_23332222222322222222222222222)))) (Definition Coq.omega.OmegaLemmas.fast_Zred_factor6 (Lambda x_23332222222322222222222222 Z (Lambda P_233322222223222222222222222 (Prod out_233322222223222222222222221 Z (Sort Prop)) (Lambda H_2333222222232222222222222222 (App P_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222222222222 Z0)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222222222222 Z0) P_233322222223222222222222222 H_2333222222232222222222222222 x_23332222222322222222222222 (App Coq.omega.OmegaLemmas.Zred_factor6 x_23332222222322222222222222)))))) (Definition Coq.ZArith.BinInt.Zne (Lambda x_2333222222232222222222222222 Z (Lambda y_23332222222322222222222222222 Z (App Coq.Init.Logic.not (App eq Z x_2333222222232222222222222222 y_23332222222322222222222222222))))) (Definition Coq.omega.OmegaLemmas.fast_Zplus_assoc (Lambda n_233322222223222222222222222 Z (Lambda m_2333222222232222222222222222 Z (Lambda p_23332222222322222222222222222 Z (Lambda P_233322222223222222222222222222 (Prod out_233322222223222222222222222221 Z (Sort Prop)) (Lambda H_2333222222232222222222222222222 (App P_233322222223222222222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223222222222222222 m_2333222222232222222222222222) p_23332222222322222222222222222)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_233322222223222222222222222 m_2333222222232222222222222222) p_23332222222322222222222222222) P_233322222223222222222222222222 H_2333222222232222222222222222222 (App Coq.ZArith.BinIntDef.Z.add n_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.add m_2333222222232222222222222222 p_23332222222322222222222222222)) (App Coq.ZArith.BinInt.Z.add_assoc n_233322222223222222222222222 m_2333222222232222222222222222 p_23332222222322222222222222222)))))))) (Definition Coq.omega.OmegaLemmas.Zred_factor3 (Lambda n_2333222222232222222222222222222 Z (Lambda m_23332222222322222222222222222222 Z (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.succ m_23332222222322222222222222222222) (Lambda z_233322222223222222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_2333222222232222222222222222222 m_23332222222322222222222222222222) n_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.mul n_2333222222232222222222222222222 z_233322222223222222222222222222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_2333222222232222222222222222222 m_23332222222322222222222222222222) n_2333222222232222222222222222222) (Lambda z_233322222223222222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_2333222222232222222222222222222 m_23332222222322222222222222222222) n_2333222222232222222222222222222) z_233322222223222222222222222222222)) (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_2333222222232222222222222222222 m_23332222222322222222222222222222) n_2333222222232222222222222222222)) (App Coq.ZArith.BinIntDef.Z.mul n_2333222222232222222222222222222 (App Coq.ZArith.BinIntDef.Z.succ m_23332222222322222222222222222222)) (App Coq.ZArith.BinInt.Z.mul_succ_r n_2333222222232222222222222222222 m_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.add (App Zpos xH) m_23332222222322222222222222222222) (App Coq.ZArith.BinInt.Z.add_1_l m_23332222222322222222222222222222))))) (Definition Coq.omega.OmegaLemmas.fast_Zred_factor3 (Lambda x_233322222223222222222222222 Z (Lambda y_2333222222232222222222222222 Z (Lambda P_23332222222322222222222222222 (Prod out_23332222222322222222222222221 Z (Sort Prop)) (Lambda H_233322222223222222222222222222 (App P_23332222222322222222222222222 (App Coq.ZArith.BinIntDef.Z.mul x_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Zpos xH) y_2333222222232222222222222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul x_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Zpos xH) y_2333222222232222222222222222)) P_23332222222322222222222222222 H_233322222223222222222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul x_233322222223222222222222222 y_2333222222232222222222222222) x_233322222223222222222222222) (App Coq.omega.OmegaLemmas.Zred_factor3 x_233322222223222222222222222 y_2333222222232222222222222222))))))) (Definition Coq.omega.OmegaLemmas.Zred_factor5 (Lambda n_2333222222232222222222222222222 Z (Lambda m_23332222222322222222222222222222 Z (App Coq.Init.Logic.eq_ind_r Z Z0 (Lambda z_233322222223222222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add z_233322222223222222222222222222222 m_23332222222322222222222222222222) m_23332222222322222222222222222222)) (App Coq.Init.Logic.eq_ind_r Z m_23332222222322222222222222222222 (Lambda z_233322222223222222222222222222222 Z (App eq Z z_233322222223222222222222222222222 m_23332222222322222222222222222222)) (App eq_refl Z m_23332222222322222222222222222222) (App Coq.ZArith.BinIntDef.Z.add Z0 m_23332222222322222222222222222222) (App Coq.ZArith.BinInt.Z.add_0_l m_23332222222322222222222222222222)) (App Coq.ZArith.BinIntDef.Z.mul n_2333222222232222222222222222222 Z0) (App Coq.ZArith.BinInt.Z.mul_0_r n_2333222222232222222222222222222))))) (Definition Coq.omega.OmegaLemmas.fast_Zred_factor5 (Lambda x_233322222223222222222222222 Z (Lambda y_2333222222232222222222222222 Z (Lambda P_23332222222322222222222222222 (Prod out_23332222222322222222222222221 Z (Sort Prop)) (Lambda H_233322222223222222222222222222 (App P_23332222222322222222222222222 y_2333222222232222222222222222) (App Coq.Init.Logic.eq_ind_r Z y_2333222222232222222222222222 P_23332222222322222222222222222 H_233322222223222222222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul x_233322222223222222222222222 Z0) y_2333222222232222222222222222) (App Coq.omega.OmegaLemmas.Zred_factor5 x_233322222223222222222222222 y_2333222222232222222222222222))))))) (Definition Coq.omega.OmegaLemmas.OMEGA15 (Lambda v_233322222223222222222222222222222222 Z (Lambda c1_2333222222232222222222222222222222222 Z (Lambda c2_23332222222322222222222222222222222222 Z (Lambda l1_233322222223222222222222222222222222222 Z (Lambda l2_2333222222232222222222222222222222222222 Z (Lambda k2_23332222222322222222222222222222222222222 Z (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c2_23332222222322222222222222222222222222) k2_23332222222322222222222222222222222222222) (App Coq.ZArith.BinIntDef.Z.mul l2_2333222222232222222222222222222222222222 k2_23332222222322222222222222222222222222222)) (Lambda z_233322222223222222222222222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c1_2333222222232222222222222222222222222) l1_233322222223222222222222222222222222222) z_233322222223222222222222222222222222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.add c1_2333222222232222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul c2_23332222222322222222222222222222222222 k2_23332222222322222222222222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add l1_233322222223222222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul l2_2333222222232222222222222222222222222222 k2_23332222222322222222222222222222222222222))))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c1_2333222222232222222222222222222222222) (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul c2_23332222222322222222222222222222222222 k2_23332222222322222222222222222222222222222))) (Lambda z_233322222223222222222222222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c1_2333222222232222222222222222222222222) l1_233322222223222222222222222222222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c2_23332222222322222222222222222222222222) k2_23332222222322222222222222222222222222222) (App Coq.ZArith.BinIntDef.Z.mul l2_2333222222232222222222222222222222222222 k2_23332222222322222222222222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add z_233322222223222222222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.add l1_233322222223222222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul l2_2333222222232222222222222222222222222222 k2_23332222222322222222222222222222222222222))))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c2_23332222222322222222222222222222222222) k2_23332222222322222222222222222222222222222) (Lambda z_233322222223222222222222222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c1_2333222222232222222222222222222222222) l1_233322222223222222222222222222222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c2_23332222222322222222222222222222222222) k2_23332222222322222222222222222222222222222) (App Coq.ZArith.BinIntDef.Z.mul l2_2333222222232222222222222222222222222222 k2_23332222222322222222222222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c1_2333222222232222222222222222222222222) z_233322222223222222222222222222222222222222) (App Coq.ZArith.BinIntDef.Z.add l1_233322222223222222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul l2_2333222222232222222222222222222222222222 k2_23332222222322222222222222222222222222222))))) (App Coq.ZArith.BinInt.Z.add_shuffle1 (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c1_2333222222232222222222222222222222222) l1_233322222223222222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c2_23332222222322222222222222222222222222) k2_23332222222322222222222222222222222222222) (App Coq.ZArith.BinIntDef.Z.mul l2_2333222222232222222222222222222222222222 k2_23332222222322222222222222222222222222222)) (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul c2_23332222222322222222222222222222222222 k2_23332222222322222222222222222222222222222)) (App Coq.ZArith.BinInt.Z.mul_assoc v_233322222223222222222222222222222222 c2_23332222222322222222222222222222222222 k2_23332222222322222222222222222222222222222)) (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.add c1_2333222222232222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul c2_23332222222322222222222222222222222222 k2_23332222222322222222222222222222222222222))) (App Coq.ZArith.BinInt.Z.mul_add_distr_l v_233322222223222222222222222222222222 c1_2333222222232222222222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul c2_23332222222322222222222222222222222222 k2_23332222222322222222222222222222222222222))) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c2_23332222222322222222222222222222222222) l2_2333222222232222222222222222222222222222) k2_23332222222322222222222222222222222222222) (App Coq.ZArith.BinInt.Z.mul_add_distr_r (App Coq.ZArith.BinIntDef.Z.mul v_233322222223222222222222222222222222 c2_23332222222322222222222222222222222222) l2_2333222222232222222222222222222222222222 k2_23332222222322222222222222222222222222222))))))))) (Definition Coq.omega.OmegaLemmas.fast_OMEGA15 (Lambda v_2333222222232222222222222222 Z (Lambda c1_23332222222322222222222222222 Z (Lambda c2_233322222223222222222222222222 Z (Lambda l1_2333222222232222222222222222222 Z (Lambda l2_23332222222322222222222222222222 Z (Lambda k2_233322222223222222222222222222222 Z (Lambda P_2333222222232222222222222222222222 (Prod out_2333222222232222222222222222222221 Z (Sort Prop)) (Lambda H_23332222222322222222222222222222222 (App P_2333222222232222222222222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_2333222222232222222222222222 (App Coq.ZArith.BinIntDef.Z.add c1_23332222222322222222222222222 (App Coq.ZArith.BinIntDef.Z.mul c2_233322222223222222222222222222 k2_233322222223222222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add l1_2333222222232222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul l2_23332222222322222222222222222222 k2_233322222223222222222222222222222)))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_2333222222232222222222222222 (App Coq.ZArith.BinIntDef.Z.add c1_23332222222322222222222222222 (App Coq.ZArith.BinIntDef.Z.mul c2_233322222223222222222222222222 k2_233322222223222222222222222222222))) (App Coq.ZArith.BinIntDef.Z.add l1_2333222222232222222222222222222 (App Coq.ZArith.BinIntDef.Z.mul l2_23332222222322222222222222222222 k2_233322222223222222222222222222222))) P_2333222222232222222222222222222222 H_23332222222322222222222222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_2333222222232222222222222222 c1_23332222222322222222222222222) l1_2333222222232222222222222222222) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul v_2333222222232222222222222222 c2_233322222223222222222222222222) l2_23332222222322222222222222222222) k2_233322222223222222222222222222222)) (App Coq.omega.OmegaLemmas.OMEGA15 v_2333222222232222222222222222 c1_23332222222322222222222222222 c2_233322222223222222222222222222 l1_2333222222232222222222222222222 l2_23332222222322222222222222222222 k2_233322222223222222222222222222222))))))))))) (Definition Coq.ZArith.BinInt.Z.add_0_r (Lambda n_233322222223222222222222222222222 Z (Cast (App Coq.ZArith.BinInt.Z.bi_induction (Lambda t_2333222222232222222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_2333222222232222222222222222222222 Z0) t_2333222222232222222222222222222222)) (Cast (Cast (Lambda x_2333222222232222222222222222222222 Z (Lambda y_23332222222322222222222222222222222 Z (Lambda H_233322222223222222222222222222222222 (App eq Z x_2333222222232222222222222222222222 y_23332222222322222222222222222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z (App Coq.ZArith.BinIntDef.Z.add x_2333222222232222222222222222222222 Z0) x_2333222222232222222222222222222222) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_23332222222322222222222222222222222 Z0) y_23332222222322222222222222222222222) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add x_2333222222232222222222222222222222 Z0) (App Coq.ZArith.BinIntDef.Z.add y_23332222222322222222222222222222222 Z0) (App Coq.ZArith.BinInt.Z.add_wd x_2333222222232222222222222222222222 y_23332222222322222222222222222222222 H_233322222223222222222222222222222222 Z0 Z0 (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0)) x_2333222222232222222222222222222222 y_23332222222322222222222222222222222 H_233322222223222222222222222222222222) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_23332222222322222222222222222222222 Z0) y_23332222222322222222222222222222222) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_23332222222322222222222222222222222 Z0) y_23332222222322222222222222222222222) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_23332222222322222222222222222222222 Z0) y_23332222222322222222222222222222222)) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.add y_23332222222322222222222222222222222 Z0) y_23332222222322222222222222222222222)))))) REVERTcast (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff (Lambda t_2333222222232222222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_2333222222232222222222222222222222 Z0) t_2333222222232222222222222222222222)) (Lambda t_2333222222232222222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_2333222222232222222222222222222222 Z0) t_2333222222232222222222222222222222)))) REVERTcast (App Coq.Classes.Morphisms.Proper (Prod out_2333222222232222222222222222222221 Z (Sort Prop)) (App Coq.Classes.Morphisms.respectful Z (Sort Prop) (App eq Z) Coq.Init.Logic.iff) (Lambda t_2333222222232222222222222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add t_2333222222232222222222222222222222 Z0) t_2333222222232222222222222222222222)))) (App (Lambda lemma_2333222222232222222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 Z0) Z0) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Transitive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add Z0 Z0) Z0 lemma_2333222222232222222222222222222222 Z0 Z0 (App Coq.Classes.Morphisms.eq_proper_proxy Z Z0))) (App Coq.ZArith.BinInt.Z.add_0_l Z0) (App Coq.Classes.RelationClasses.reflexivity Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) Z0)) (Lambda n_2333222222232222222222222222222222 Z (App (Lambda lemma_23332222222322222222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232222222222222222222222) Z0) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0))) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0) n_2333222222232222222222222222222222) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232222222222222222222222) Z0) (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232222222222222222222222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0)) (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232222222222222222222222)) (App Coq.Classes.Morphisms.PER_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232222222222222222222222) Z0) (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0)) lemma_23332222222322222222222222222222222 (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232222222222222222222222) (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232222222222222222222222) (App Coq.Classes.Morphisms.reflexive_proper_proxy Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_Reflexive Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232222222222222222222222))))) (App Coq.ZArith.BinInt.Z.add_succ_l n_2333222222232222222222222222222222 Z0) (App (Lambda lemma_23332222222322222222222222222222222 (App Coq.Init.Logic.iff (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0)) (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232222222222222222222222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0) n_2333222222232222222222222222222222)) (App Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff (App Coq.Classes.RelationClasses.Equivalence_PER (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_equivalence) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0) n_2333222222232222222222222222222222) (App eq Z (App Coq.ZArith.BinIntDef.Z.succ (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0)) (App Coq.ZArith.BinIntDef.Z.succ n_2333222222232222222222222222222222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0) n_2333222222232222222222222222222222) lemma_23332222222322222222222222222222222)) (App Coq.ZArith.BinInt.Z.succ_inj_wd (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0) n_2333222222232222222222222222222222) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_2333222222232222222222222222222222 Z0) n_2333222222232222222222222222222222))))) n_233322222223222222222222222222222) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223222222222222222222222 Z0) n_233322222223222222222222222222222)))) (Definition Coq.omega.OmegaLemmas.OMEGA17 (Lambda x_2333222222232222222222222222 Z (Lambda y_23332222222322222222222222222 Z (Lambda z_233322222223222222222222222222 Z (Cast (Lambda NE_2333222222232222222222222222222 (Prod out_2333222222232222222222222222221 (App eq Z x_2333222222232222222222222222 Z0) False) (Lambda EQ_23332222222322222222222222222222 (App eq Z y_23332222222322222222222222222 Z0) (App Coq.Init.Logic.eq_ind_r Z Z0 (Lambda y_233322222223222222222222222222222 Z (Prod out_2333222222232222222222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add x_2333222222232222222222222222 (App Coq.ZArith.BinIntDef.Z.mul y_233322222223222222222222222222222 z_233322222223222222222222222222)) Z0) False)) (App Coq.Init.Logic.eq_ind_r Z x_2333222222232222222222222222 (Lambda z_233322222223222222222222222222222 Z (Prod out_2333222222232222222222222222222221 (App eq Z z_233322222223222222222222222222222 Z0) False)) NE_2333222222232222222222222222222 (App Coq.ZArith.BinIntDef.Z.add x_2333222222232222222222222222 Z0) (App Coq.ZArith.BinInt.Z.add_0_r x_2333222222232222222222222222)) y_23332222222322222222222222222 EQ_23332222222322222222222222222222))) REVERTcast (Prod out_2333222222232222222222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222222222222222 Z0) (Prod out_23332222222322222222222222222211 (App eq Z y_23332222222322222222222222222 Z0) (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add x_2333222222232222222222222222 (App Coq.ZArith.BinIntDef.Z.mul y_23332222222322222222222222222 z_233322222223222222222222222222)) Z0)))))))) (Definition Coq.Classes.Morphisms_Prop.iff_iff_iff_impl_morphism Coq.Classes.Morphisms_Prop.iff_iff_iff_impl_morphism_obligation_1) (Definition Coq.Classes.Morphisms_Prop.not_iff_morphism Coq.Classes.Morphisms_Prop.not_iff_morphism_obligation_1) (Definition Coq.Classes.RelationClasses.iff_Reflexive Coq.Init.Logic.iff_refl) (Definition Coq.ZArith.BinInt.Z.sub_move_0_r (Lambda n_23332222222322222222222222222 Z (Lambda m_233322222223222222222222222222 Z (App (Lambda lemma_2333222222232222222222222222222 (App Coq.Init.Logic.iff (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_23332222222322222222222222222 m_233322222223222222222222222222) Z0) (App eq Z n_23332222222322222222222222222 (App Coq.ZArith.BinIntDef.Z.add Z0 m_233322222223222222222222222222))) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_23332222222322222222222222222 m_233322222223222222222222222222) Z0) (App eq Z n_23332222222322222222222222222 (App Coq.ZArith.BinIntDef.Z.add Z0 m_233322222223222222222222222222)) lemma_2333222222232222222222222222222 (App eq Z n_23332222222322222222222222222 m_233322222223222222222222222222) (App eq Z n_23332222222322222222222222222 m_233322222223222222222222222222) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq Z n_23332222222322222222222222222 m_233322222223222222222222222222)))) (App Coq.ZArith.BinInt.Z.sub_move_r n_23332222222322222222222222222 m_233322222223222222222222222222 Z0) (App (Lambda lemma_2333222222232222222222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Z0 m_233322222223222222222222222222) m_233322222223222222222222222222) (App Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Transitive (App eq Z n_23332222222322222222222222222 (App Coq.ZArith.BinIntDef.Z.add Z0 m_233322222223222222222222222222)) (App eq Z n_23332222222322222222222222222 m_233322222223222222222222222222) (App Coq.Classes.Morphisms.per_partial_app_morphism Z (App eq Z) (App Coq.Classes.RelationClasses.Equivalence_PER Z (App eq Z) Coq.ZArith.BinInt.Z.eq_equiv) n_23332222222322222222222222222 (App Coq.ZArith.BinIntDef.Z.add Z0 m_233322222223222222222222222222) m_233322222223222222222222222222 lemma_2333222222232222222222222222222) (App eq Z n_23332222222322222222222222222 m_233322222223222222222222222222) (App eq Z n_23332222222322222222222222222 m_233322222223222222222222222222) (App Coq.Classes.Morphisms.eq_proper_proxy (Sort Prop) (App eq Z n_23332222222322222222222222222 m_233322222223222222222222222222)))) (App Coq.ZArith.BinInt.Z.add_0_l m_233322222223222222222222222222) (App Coq.Classes.RelationClasses.reflexivity (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App eq Z n_23332222222322222222222222222 m_233322222223222222222222222222))))))) (Definition Coq.ZArith.auxiliary.Zne_left (Lambda n_233322222223222222222222222 Z (Lambda m_2333222222232222222222222222 Z (Cast (App (Lambda lemma_23332222222322222222222222222 (App Coq.Init.Logic.iff (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_233322222223222222222222222 m_2333222222232222222222222222) Z0) (App eq Z n_233322222223222222222222222 m_2333222222232222222222222222)) (App Coq.Classes.Morphisms.subrelation_proper (Prod A_233322222223222222222222222221 (Sort Prop) (Prod B_2333222222232222222222222222211 (Sort Prop) (Sort Prop))) (App Coq.Classes.Morphisms.respectful (Sort Prop) (Prod out_233322222223222222222222222221 (Sort Prop) (Sort Prop)) Coq.Init.Logic.iff (App Coq.Classes.Morphisms.respectful (Sort Prop) (Sort Prop) Coq.Init.Logic.iff Coq.Init.Logic.iff)) Coq.Program.Basics.impl Coq.Classes.Morphisms_Prop.iff_iff_iff_impl_morphism (App Coq.Classes.Morphisms.respectful (Sort Prop) (Prod B_233322222223222222222222222221 (Sort Prop) (Sort Prop)) Coq.Init.Logic.iff (App Coq.Classes.Morphisms.respectful (Sort Prop) (Sort Prop) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful (Sort Prop) (Prod B_233322222223222222222222222221 (Sort Prop) (Sort Prop)) Coq.Init.Logic.iff Coq.Init.Logic.iff (App Coq.Classes.Morphisms.subrelation_refl (Sort Prop) Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful (Sort Prop) (Sort Prop) Coq.Init.Logic.iff Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful (Sort Prop) (Sort Prop) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful (Sort Prop) (Sort Prop) Coq.Init.Logic.iff Coq.Init.Logic.iff (App Coq.Classes.Morphisms.subrelation_refl (Sort Prop) Coq.Init.Logic.iff) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) (App Coq.Init.Logic.not (App eq Z n_233322222223222222222222222 m_2333222222232222222222222222)) (App Coq.Init.Logic.not (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_233322222223222222222222222 m_2333222222232222222222222222) Z0)) (App Coq.Classes.Morphisms_Prop.not_iff_morphism (App eq Z n_233322222223222222222222222 m_2333222222232222222222222222) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_233322222223222222222222222 m_2333222222232222222222222222) Z0) (App Coq.Classes.RelationClasses.symmetry (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Symmetric (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_233322222223222222222222222 m_2333222222232222222222222222) Z0) (App eq Z n_233322222223222222222222222 m_2333222222232222222222222222) lemma_23332222222322222222222222222)) (App Coq.Init.Logic.not (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222)) Z0)) (App Coq.Init.Logic.not (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222)) Z0)) (App Coq.Classes.Morphisms.reflexive_proper_proxy (Sort Prop) Coq.Init.Logic.iff Coq.Classes.RelationClasses.iff_Reflexive (App Coq.Init.Logic.not (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222)) Z0))))) (App Coq.ZArith.BinInt.Z.sub_move_0_r n_233322222223222222222222222 m_2333222222232222222222222222) (Lambda H_23332222222322222222222222222 (App Coq.Init.Logic.not (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_233322222223222222222222222 m_2333222222232222222222222222) Z0)) H_23332222222322222222222222222)) REVERTcast (Prod out_23332222222322222222222222221 (App Coq.ZArith.BinInt.Zne n_233322222223222222222222222 m_2333222222232222222222222222) (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add n_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.opp m_2333222222232222222222222222)) Z0)))))) (Definition Coq.ZArith.auxiliary.Zegal_left (Lambda n_23332222222322222222222222 Z (Lambda m_233322222223222222222222222 Z (LetIn H_2333222222232222222222222223 (Lambda n_2333222222232222222222222222 Z (Lambda m_23332222222322222222222222222 Z (Case 2 (Lambda out_233322222223222222222222222222 (App and (Prod out_233322222223222222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232222222222222222 m_23332222222322222222222222222) Z0) (App eq Z n_2333222222232222222222222222 m_23332222222322222222222222222)) (Prod out_233322222223222222222222222221 (App eq Z n_2333222222232222222222222222 m_23332222222322222222222222222) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232222222222222222 m_23332222222322222222222222222) Z0))) (Prod out_2333222222232222222222222222221 (App eq Z n_2333222222232222222222222222 m_23332222222322222222222222222) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232222222222222222 m_23332222222322222222222222222) Z0))) (CaseMatch (App Coq.ZArith.BinInt.Z.sub_move_0_r n_2333222222232222222222222222 m_23332222222322222222222222222)) (CaseBranches (Lambda out_233322222223222222222222222222 (Prod out_233322222223222222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232222222222222222 m_23332222222322222222222222222) Z0) (App eq Z n_2333222222232222222222222222 m_23332222222322222222222222222)) (Lambda out_2333222222232222222222222222222 (Prod out_2333222222232222222222222222221 (App eq Z n_2333222222232222222222222222 m_23332222222322222222222222222) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232222222222222222 m_23332222222322222222222222222) Z0)) out_2333222222232222222222222222222)))))) (Prod n_2333222222232222222222222221 Z (Prod m_23332222222322222222222222211 Z (Prod out_233322222223222222222222222111 (App eq Z n_2333222222232222222222222221 m_23332222222322222222222222211) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub n_2333222222232222222222222221 m_23332222222322222222222222211) Z0)))) (App H_2333222222232222222222222223 n_23332222222322222222222222 m_233322222223222222222222222))))) (Definition Coq.omega.OmegaLemmas.new_var (Lambda x_233322222223222222222222 Z (App ex_intro Z (Lambda y_2333222222232222222222222 Z (App eq Z x_233322222223222222222222 y_2333222222232222222222222)) x_233322222223222222222222 (App eq_refl Z x_233322222223222222222222)))) (Definition ExportProof.sum_app (Lambda l1_23332222222322 (App list Z) (Lambda l2_233322222223222 (App list Z) (App Coq.Init.Datatypes.list_ind Z (Lambda l1_2333222222232222 (App list Z) (App eq Z (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_2333222222232222 l2_233322222223222)) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum l1_2333222222232222) (App ExportProof.sum l2_233322222223222)))) (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App nil Z)) (App ExportProof.sum l2_233322222223222))) (Lambda a_2333222222232222 Z (Lambda l1_23332222222322222 (App list Z) (Lambda IHl1_233322222223222222 (App eq Z (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222)) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum l1_23332222222322222) (App ExportProof.sum l2_233322222223222))) (Cast (App Coq.Logic.Decidable.dec_not_not (App eq Z (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 (App ExportProof.sum l1_23332222222322222)) (App ExportProof.sum l2_233322222223222))) (App Coq.ZArith.BinInt.Z.eq_decidable (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 (App ExportProof.sum l1_23332222222322222)) (App ExportProof.sum l2_233322222223222))) (Lambda H_2333222222232222222 (App Coq.Init.Logic.not (App eq Z (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 (App ExportProof.sum l1_23332222222322222)) (App ExportProof.sum l2_233322222223222)))) (App Coq.Init.Logic.ex_ind Z (Lambda y_23332222222322222222 Z (App eq Z (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222)) y_23332222222322222222)) False (Lambda Zvar0_23332222222322222222 Z (Lambda Omega0_233322222223222222222 (App eq Z (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222)) Zvar0_23332222222322222222) (App Coq.Init.Logic.ex_ind Z (Lambda y_2333222222232222222222 Z (App eq Z (App ExportProof.sum l1_23332222222322222) y_2333222222232222222222)) False (Lambda Zvar1_2333222222232222222222 Z (Lambda Omega1_23332222222322222222222 (App eq Z (App ExportProof.sum l1_23332222222322222) Zvar1_2333222222232222222222) (App Coq.Init.Logic.ex_ind Z (Lambda y_233322222223222222222222 Z (App eq Z (App ExportProof.sum l2_233322222223222) y_233322222223222222222222)) False (Lambda Zvar2_233322222223222222222222 Z (Lambda Omega2_2333222222232222222222222 (App eq Z (App ExportProof.sum l2_233322222223222) Zvar2_233322222223222222222222) (App (Lambda P_23332222222322222222222222 (Prod out_23332222222322222222222221 Z (Sort Prop)) (Lambda H_233322222223222222222222222 (App P_23332222222322222222222222 Zvar0_23332222222322222222) (App Coq.Init.Logic.eq_ind_r Z Zvar0_23332222222322222222 P_23332222222322222222222222 H_233322222223222222222222222 (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222)) Omega0_233322222223222222222))) (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222222222222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum l1_23332222222322222) (App ExportProof.sum l2_233322222223222)))) Z0) False)) (App (Lambda P_23332222222322222222222222 (Prod out_23332222222322222222222221 Z (Sort Prop)) (Lambda H_233322222223222222222222222 (App P_23332222222322222222222222 Zvar1_2333222222232222222222) (App Coq.Init.Logic.eq_ind_r Z Zvar1_2333222222232222222222 P_23332222222322222222222222 H_233322222223222222222222222 (App ExportProof.sum l1_23332222222322222) Omega1_23332222222322222222222))) (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Zvar0_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222222222222 (App ExportProof.sum l2_233322222223222)))) Z0) False)) (App (Lambda P_23332222222322222222222222 (Prod out_23332222222322222222222221 Z (Sort Prop)) (Lambda H_233322222223222222222222222 (App P_23332222222322222222222222 Zvar2_233322222223222222222222) (App Coq.Init.Logic.eq_ind_r Z Zvar2_233322222223222222222222 P_23332222222322222222222222 H_233322222223222222222222222 (App ExportProof.sum l2_233322222223222) Omega2_2333222222232222222222222))) (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Zvar0_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add Zvar1_2333222222232222222222 x_23332222222322222222222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_comm Zvar1_2333222222232222222222 Zvar2_233322222223222222222222 (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Zvar0_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.opp x_23332222222322222222222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_plus_distr Zvar2_233322222223222222222222 Zvar1_2333222222232222222222 (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Zvar0_23332222222322222222 x_23332222222322222222222222) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 Zvar2_233322222223222222222222 (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Zvar0_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222222222222 (App Coq.ZArith.BinIntDef.Z.opp Zvar1_2333222222232222222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 Zvar1_2333222222232222222222 (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add Zvar0_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) x_23332222222322222222222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_permute Zvar0_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z x_23332222222322222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_comm Zvar0_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) x_23332222222322222222222222) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor0 Zvar0_23332222222322222222 (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) x_23332222222322222222222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor6 (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) (Lambda x_23332222222322222222222222 Z (Prod out_233322222223222222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) x_23332222222322222222222222)) Z0) False)) (Lambda Omega4_23332222222322222222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0))) Z0) (App (Lambda P_233322222223222222222222222 (Prod out_233322222223222222222222221 Z (Sort Prop)) (Lambda H_2333222222232222222222222222 (App P_233322222223222222222222222 Zvar0_23332222222322222222) (App Coq.Init.Logic.eq_ind_r Z Zvar0_23332222222322222222 P_233322222223222222222222222 H_2333222222232222222222222222 (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222)) Omega0_233322222223222222222))) (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 x_233322222223222222222222222) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 (App ExportProof.sum l1_23332222222322222)) (App ExportProof.sum l2_233322222223222)))) Z0) False)) (App (Lambda P_233322222223222222222222222 (Prod out_233322222223222222222222221 Z (Sort Prop)) (Lambda H_2333222222232222222222222222 (App P_233322222223222222222222222 Zvar1_2333222222232222222222) (App Coq.Init.Logic.eq_ind_r Z Zvar1_2333222222232222222222 P_233322222223222222222222222 H_2333222222232222222222222222 (App ExportProof.sum l1_23332222222322222) Omega1_23332222222322222222222))) (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 x_233322222223222222222222222) (App ExportProof.sum l2_233322222223222)))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_comm a_2333222222232222 Zvar1_2333222222232222222222 (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add x_233322222223222222222222222 (App ExportProof.sum l2_233322222223222)))) Z0) False)) (App (Lambda P_233322222223222222222222222 (Prod out_233322222223222222222222221 Z (Sort Prop)) (Lambda H_2333222222232222222222222222 (App P_233322222223222222222222222 Zvar2_233322222223222222222222) (App Coq.Init.Logic.eq_ind_r Z Zvar2_233322222223222222222222 P_233322222223222222222222222 H_2333222222232222222222222222 (App ExportProof.sum l2_233322222223222) Omega2_2333222222232222222222222))) (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Zvar1_2333222222232222222222 a_2333222222232222) x_233322222223222222222222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_comm (App Coq.ZArith.BinIntDef.Z.add Zvar1_2333222222232222222222 a_2333222222232222) Zvar2_233322222223222222222222 (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.opp x_233322222223222222222222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_plus_distr Zvar2_233322222223222222222222 (App Coq.ZArith.BinIntDef.Z.add Zvar1_2333222222232222222222 a_2333222222232222) (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) x_233322222223222222222222222) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 Zvar2_233322222223222222222222 (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.add x_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add Zvar1_2333222222232222222222 a_2333222222232222)))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_plus_distr Zvar1_2333222222232222222222 a_2333222222232222 (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) x_233322222223222222222222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 Zvar1_2333222222232222222222 (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add x_233322222223222222222222222 (App Coq.ZArith.BinIntDef.Z.opp a_2333222222232222)))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 a_2333222222232222 (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) x_233322222223222222222222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_permute (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.mul a_2333222222232222 (App Zneg xH))) (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne x_233322222223222222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_permute (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.mul a_2333222222232222 (App Zneg xH)) (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) x_233322222223222222222222222) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_comm (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 Zvar0_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.mul a_2333222222232222 (App Zneg xH)) (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) x_233322222223222222222222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_assoc (App Coq.ZArith.BinIntDef.Z.mul a_2333222222232222 (App Zneg xH)) a_2333222222232222 Zvar0_23332222222322222222 (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) x_233322222223222222222222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor3 a_2333222222232222 (App Zneg xH) (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add x_233322222223222222222222222 Zvar0_23332222222322222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor0 Zvar0_23332222222322222222 (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul a_2333222222232222 Z0) x_233322222223222222222222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor6 (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul a_2333222222232222 Z0) x_233322222223222222222222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor5 a_2333222222232222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0) (Lambda x_233322222223222222222222222 Z (Prod out_2333222222232222222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) x_233322222223222222222222222)) Z0) False)) (Lambda Omega3_233322222223222222222222222 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0))) Z0) (App Coq.omega.OmegaLemmas.fast_OMEGA15 Zvar2_233322222223222222222222 (App Zneg xH) (App Zneg xH) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0)) (App Zneg xH) (Lambda x_2333222222232222222222222222 Z (Prod out_23332222222322222222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor5 Zvar2_233322222223222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0)) (App Zneg xH))) (Lambda x_2333222222232222222222222222 Z (Prod out_23332222222322222222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_OMEGA15 Zvar1_2333222222232222222222 (App Zneg xH) (App Zneg xH) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0) (App Zneg xH) (Lambda x_2333222222232222222222222222 Z (Prod out_23332222222322222222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor5 Zvar1_2333222222232222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0) (App Zneg xH))) (Lambda x_2333222222232222222222222222 Z (Prod out_23332222222322222222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_OMEGA15 Zvar0_23332222222322222222 (App Zpos xH) (App Zpos xH) Z0 Z0 (App Zneg xH) (Lambda x_2333222222232222222222222222 Z (Prod out_23332222222322222222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor5 Zvar0_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.mul Z0 (App Zneg xH))) (Lambda x_2333222222232222222222222222 Z (Prod out_23332222222322222222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222222222222222 Z0) False)) (Lambda auxiliary_2333222222232222222222222222 (App Coq.ZArith.BinInt.Zne Z0 Z0) (App auxiliary_2333222222232222222222222222 (App eq_refl Z Z0)))))))) (App Coq.omega.OmegaLemmas.OMEGA17 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_233322222223222222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_2333222222232222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222222 (App Zpos xH)) Z0))) (App Zneg xH) Omega3_233322222223222222222222222 Omega4_23332222222322222222222222)))))))))))))))))))) (App Coq.ZArith.auxiliary.Zne_left (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add a_2333222222232222 (App ExportProof.sum l1_23332222222322222)) (App ExportProof.sum l2_233322222223222)) H_2333222222232222222))))))))))))) (App Coq.ZArith.auxiliary.Zegal_left (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222)) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum l1_23332222222322222) (App ExportProof.sum l2_233322222223222)) IHl1_233322222223222222)))) (App Coq.omega.OmegaLemmas.new_var (App ExportProof.sum l2_233322222223222))))) (App Coq.omega.OmegaLemmas.new_var (App ExportProof.sum l1_23332222222322222))))) (App Coq.omega.OmegaLemmas.new_var (App ExportProof.sum (App Coq.Init.Datatypes.app Z l1_23332222222322222 l2_233322222223222)))))) REVERTcast (App eq Z (App ExportProof.sum (App Coq.Init.Datatypes.app Z (App cons Z a_2333222222232222 l1_23332222222322222) l2_233322222223222)) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App cons Z a_2333222222232222 l1_23332222222322222)) (App ExportProof.sum l2_233322222223222))))))) l1_23332222222322)))) (Definition Coq.omega.OmegaLemmas.Zred_factor2 (Lambda n_23332222222322222222222 Z (Lambda m_233322222223222222222222 Z (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul n_23332222222322222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.mul n_23332222222322222222222 m_233322222223222222222222)) (Lambda z_2333222222232222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222 (App Coq.ZArith.BinIntDef.Z.mul n_23332222222322222222222 m_233322222223222222222222)) z_2333222222232222222222222)) (App Coq.Init.Logic.eq_ind_r Z n_23332222222322222222222 (Lambda z_2333222222232222222222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222 (App Coq.ZArith.BinIntDef.Z.mul n_23332222222322222222222 m_233322222223222222222222)) (App Coq.ZArith.BinIntDef.Z.add z_2333222222232222222222222 (App Coq.ZArith.BinIntDef.Z.mul n_23332222222322222222222 m_233322222223222222222222)))) (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222222222 (App Coq.ZArith.BinIntDef.Z.mul n_23332222222322222222222 m_233322222223222222222222))) (App Coq.ZArith.BinIntDef.Z.mul n_23332222222322222222222 (App Zpos xH)) (App Coq.ZArith.BinInt.Z.mul_1_r n_23332222222322222222222)) (App Coq.ZArith.BinIntDef.Z.mul n_23332222222322222222222 (App Coq.ZArith.BinIntDef.Z.add (App Zpos xH) m_233322222223222222222222)) (App Coq.ZArith.BinInt.Z.mul_add_distr_l n_23332222222322222222222 (App Zpos xH) m_233322222223222222222222))))) (Definition Coq.omega.OmegaLemmas.fast_Zred_factor2 (Lambda x_2333222222232222222 Z (Lambda y_23332222222322222222 Z (Lambda P_233322222223222222222 (Prod out_233322222223222222221 Z (Sort Prop)) (Lambda H_2333222222232222222222 (App P_233322222223222222222 (App Coq.ZArith.BinIntDef.Z.mul x_2333222222232222222 (App Coq.ZArith.BinIntDef.Z.add (App Zpos xH) y_23332222222322222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul x_2333222222232222222 (App Coq.ZArith.BinIntDef.Z.add (App Zpos xH) y_23332222222322222222)) P_233322222223222222222 H_2333222222232222222222 (App Coq.ZArith.BinIntDef.Z.add x_2333222222232222222 (App Coq.ZArith.BinIntDef.Z.mul x_2333222222232222222 y_23332222222322222222)) (App Coq.omega.OmegaLemmas.Zred_factor2 x_2333222222232222222 y_23332222222322222222))))))) (Definition Coq.Init.Peano.plus_n_Sm (Lambda n_233322222223222223222332 nat (Lambda m_2333222222232222232223322 nat (App Coq.Init.Datatypes.nat_ind (Lambda n_23332222222322222322233222 nat (App eq nat (App S (App Coq.Init.Nat.add n_23332222222322222322233222 m_2333222222232222232223322)) (App Coq.Init.Nat.add n_23332222222322222322233222 (App S m_2333222222232222232223322)))) (Cast (App eq_refl nat (App S m_2333222222232222232223322)) REVERTcast (App eq nat (App S (App Coq.Init.Nat.add O m_2333222222232222232223322)) (App Coq.Init.Nat.add O (App S m_2333222222232222232223322)))) (Lambda n_23332222222322222322233222 nat (Lambda IHn_233322222223222223222332222 (App eq nat (App S (App Coq.Init.Nat.add n_23332222222322222322233222 m_2333222222232222232223322)) (App Coq.Init.Nat.add n_23332222222322222322233222 (App S m_2333222222232222232223322))) (Cast (App Coq.Init.Peano.f_equal_nat nat S (App S (App Coq.Init.Nat.add n_23332222222322222322233222 m_2333222222232222232223322)) (App Coq.Init.Nat.add n_23332222222322222322233222 (App S m_2333222222232222232223322)) IHn_233322222223222223222332222) REVERTcast (App eq nat (App S (App Coq.Init.Nat.add (App S n_23332222222322222322233222) m_2333222222232222232223322)) (App Coq.Init.Nat.add (App S n_23332222222322222322233222) (App S m_2333222222232222232223322)))))) n_233322222223222223222332)))) (Definition Coq.ZArith.Znat.Nat2Z.inj_add (Lambda n_233322222223222222 nat (Lambda m_2333222222232222222 nat (App Coq.Init.Logic.eq_ind Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat (App Coq.Init.Nat.add n_233322222223222222 m_2333222222232222222))) (Lambda z_23332222222322222222 Z (App eq Z z_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.of_nat n_233322222223222222) (App Coq.ZArith.BinIntDef.Z.of_nat m_2333222222232222222)))) (App Coq.Init.Logic.eq_ind Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat n_233322222223222222)) (Lambda z_23332222222322222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat (App Coq.Init.Nat.add n_233322222223222222 m_2333222222232222222))) (App Coq.ZArith.BinIntDef.Z.add z_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.of_nat m_2333222222232222222)))) (App Coq.Init.Logic.eq_ind Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat m_2333222222232222222)) (Lambda z_23332222222322222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat (App Coq.Init.Nat.add n_233322222223222222 m_2333222222232222222))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat n_233322222223222222)) z_23332222222322222222))) (App Coq.Init.Logic.eq_ind_r N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.of_nat n_233322222223222222) (App Coq.NArith.BinNatDef.N.of_nat m_2333222222232222222)) (Lambda n_23332222222322222222 N (App eq Z (App Coq.ZArith.BinIntDef.Z.of_N n_23332222222322222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat n_233322222223222222)) (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat m_2333222222232222222))))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat n_233322222223222222)) (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat m_2333222222232222222))) (Lambda z_23332222222322222222 Z (App eq Z z_23332222222322222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat n_233322222223222222)) (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat m_2333222222232222222))))) (App eq_refl Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat n_233322222223222222)) (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.of_nat m_2333222222232222222)))) (App Coq.ZArith.BinIntDef.Z.of_N (App Coq.NArith.BinNatDef.N.add (App Coq.NArith.BinNatDef.N.of_nat n_233322222223222222) (App Coq.NArith.BinNatDef.N.of_nat m_2333222222232222222))) (App Coq.ZArith.Znat.N2Z.inj_add (App Coq.NArith.BinNatDef.N.of_nat n_233322222223222222) (App Coq.NArith.BinNatDef.N.of_nat m_2333222222232222222))) (App Coq.NArith.BinNatDef.N.of_nat (App Coq.Init.Nat.add n_233322222223222222 m_2333222222232222222)) (App Coq.NArith.Nnat.Nat2N.inj_add n_233322222223222222 m_2333222222232222222)) (App Coq.ZArith.BinIntDef.Z.of_nat m_2333222222232222222) (App Coq.ZArith.Znat.nat_N_Z m_2333222222232222222)) (App Coq.ZArith.BinIntDef.Z.of_nat n_233322222223222222) (App Coq.ZArith.Znat.nat_N_Z n_233322222223222222)) (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Nat.add n_233322222223222222 m_2333222222232222222)) (App Coq.ZArith.Znat.nat_N_Z (App Coq.Init.Nat.add n_233322222223222222 m_2333222222232222222)))))) (Definition Coq.omega.OmegaLemmas.fast_Zplus_assoc_reverse (Lambda n_23332222222322222322222222222 Z (Lambda m_233322222223222223222222222222 Z (Lambda p_2333222222232222232222222222222 Z (Lambda P_23332222222322222322222222222222 (Prod out_23332222222322222322222222222221 Z (Sort Prop)) (Lambda H_233322222223222223222222222222222 (App P_23332222222322222322222222222222 (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222322222222222 (App Coq.ZArith.BinIntDef.Z.add m_233322222223222223222222222222 p_2333222222232222232222222222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222322222222222 (App Coq.ZArith.BinIntDef.Z.add m_233322222223222223222222222222 p_2333222222232222232222222222222)) P_23332222222322222322222222222222 H_233322222223222223222222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add n_23332222222322222322222222222 m_233322222223222223222222222222) p_2333222222232222232222222222222) (App Coq.ZArith.BinInt.Zplus_assoc_reverse n_23332222222322222322222222222 m_233322222223222223222222222222 p_2333222222232222232222222222222)))))))) (Definition Coq.omega.OmegaLemmas.fast_Zopp_mult_distr_r (Lambda x_233322222223222223222222222222 Z (Lambda y_2333222222232222232222222222222 Z (Lambda P_23332222222322222322222222222222 (Prod out_23332222222322222322222222222221 Z (Sort Prop)) (Lambda H_233322222223222223222222222222222 (App P_23332222222322222322222222222222 (App Coq.ZArith.BinIntDef.Z.mul x_233322222223222223222222222222 (App Coq.ZArith.BinIntDef.Z.opp y_2333222222232222232222222222222))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul x_233322222223222223222222222222 (App Coq.ZArith.BinIntDef.Z.opp y_2333222222232222232222222222222)) P_23332222222322222322222222222222 H_233322222223222223222222222222222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul x_233322222223222223222222222222 y_2333222222232222232222222222222)) (App Coq.ZArith.BinInt.Zopp_mult_distr_r x_233322222223222223222222222222 y_2333222222232222232222222222222))))))) (Definition ExportProof.cardinal_union_lemma (Lambda A_2333222222232222 ExportProof.set (Lambda B_23332222222322222 ExportProof.set (LetIn H_233322222223222223 (Cast (App Coq.Init.Logic.eq_ind Z (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))))) (Lambda z_233322222223222222 Z (App eq Z z_233322222223222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (Axiom ExportProof.enum_X)))) (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (Axiom ExportProof.enum_X))))))) (App Coq.Init.Logic.eq_ind Z (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (Axiom ExportProof.enum_X))))) (Lambda z_233322222223222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))))) z_233322222223222222)) (LetIn H_233322222223222223 (Cast (LetIn l_233322222223222223 (Axiom ExportProof.enum_X) (App list (Axiom ExportProof.X)) (App Coq.Init.Datatypes.list_ind (Axiom ExportProof.X) (Lambda l_2333222222232222232 (App list (Axiom ExportProof.X)) (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_23332222222322222322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_23332222222322222322) (App B_23332222222322222 x_23332222222322222322))) l_2333222222232222232)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_23332222222322222322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_23332222222322222322) (App B_23332222222322222 x_23332222222322222322))) l_2333222222232222232))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_2333222222232222232)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_2333222222232222232))))) (App eq_refl nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (App nil (Axiom ExportProof.X)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (App nil (Axiom ExportProof.X)))))) (Lambda x_2333222222232222232 (Axiom ExportProof.X) (Lambda l_23332222222322222322 (App list (Axiom ExportProof.X)) (Lambda IHl_233322222223222223222 (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222) (App B_23332222222322222 x_233322222223222223222))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222) (App B_23332222222322222 x_233322222223222223222))) l_23332222222322222322))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) (Cast (LetIn b_2333222222232222232223 (App A_2333222222232222 x_2333222222232222232) bool (Case 0 (Lambda b_23332222222322222322232 bool (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222322 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.orb b_23332222222322222322232 (App B_23332222222322222 x_2333222222232222232))) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222322) (App B_23332222222322222 x_233322222223222223222322))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222322) (App B_23332222222322222 x_233322222223222223222322))) l_23332222222322222322)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222322 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.andb b_23332222222322222322232 (App B_23332222222322222 x_2333222222232222232))) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222322) (App B_23332222222322222 x_233322222223222223222322))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222322) (App B_23332222222322222 x_233322222223222223222322))) l_23332222222322222322))))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222322 bool (App list (Axiom ExportProof.X))) (CaseMatch b_23332222222322222322232) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222322 bool (App list (Axiom ExportProof.X))) (CaseMatch (App B_23332222222322222 x_2333222222232222232)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322))))))) (CaseMatch b_2333222222232222232223) (CaseBranches (LetIn b_23332222222322222322233 (App B_23332222222322222 x_2333222222232222232) bool (Case 0 (Lambda b_233322222223222223222332 bool (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_2333222222232222232223322 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.orb true b_233322222223222223222332)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_2333222222232222232223322 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.andb true b_233322222223222223222332)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322))))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_2333222222232222232223322 bool (App list (Axiom ExportProof.X))) (CaseMatch b_233322222223222223222332) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322))))))) (CaseMatch b_23332222222322222322233) (CaseBranches (Cast (App Coq.Init.Logic.eq_ind nat (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (Lambda n_233322222223222223222332 nat (App eq nat (App S n_233322222223222223222332) (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App S (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322))))))) (App Coq.Init.Logic.eq_ind nat (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) (Lambda n_233322222223222223222332 nat (App eq nat (App S (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322))))) (App S n_233322222223222223222332))) (App Coq.Init.Logic.eq_trans nat (App S (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322))))) (App S (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322))))) (App S (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322))))) (App Coq.Init.Logic.f_equal (Prod out_233322222223222223222331 nat nat) nat (Lambda f_233322222223222223222332 (Prod out_233322222223222223222331 nat nat) (App f_233322222223222223222332 (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)))))) S S (App eq_refl (Prod out_233322222223222223222331 nat nat) S)) (App Coq.Init.Logic.f_equal nat nat S (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) (App Coq.Init.Logic.eq_trans nat (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) (App Coq.Init.Logic.f_equal (Prod out_233322222223222223222331 nat nat) nat (Lambda f_233322222223222223222332 (Prod out_233322222223222223222331 nat nat) (App f_233322222223222223222332 (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322))))) S S (App eq_refl (Prod out_233322222223222223222331 nat nat) S)) (App Coq.Init.Logic.f_equal nat nat S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322))) IHl_233322222223222223222)))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App S (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) (App Coq.Init.Peano.plus_n_Sm (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App S (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App Coq.Init.Peano.plus_n_Sm (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) REVERTcast (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222332 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.orb true true)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222332 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.andb true true)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322))))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))))) (Cast (App Coq.Init.Logic.eq_trans nat (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) (App Coq.Init.Logic.f_equal (Prod out_233322222223222223222331 nat nat) nat (Lambda f_233322222223222223222332 (Prod out_233322222223222223222331 nat nat) (App f_233322222223222223222332 (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322))))) S S (App eq_refl (Prod out_233322222223222223222331 nat nat) S)) (App Coq.Init.Logic.f_equal nat nat S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322))) IHl_233322222223222223222)) REVERTcast (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222332 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.orb true false)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222332 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.andb true false)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322))))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))))))) (LetIn b_23332222222322222322233 (App B_23332222222322222 x_2333222222232222232) bool (Case 0 (Lambda b_233322222223222223222332 bool (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_2333222222232222232223322 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.orb false b_233322222223222223222332)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_2333222222232222232223322 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.andb false b_233322222223222223222332)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322))))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_2333222222232222232223322 bool (App list (Axiom ExportProof.X))) (CaseMatch b_233322222223222223222332) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322))))))) (CaseMatch b_23332222222322222322233) (CaseBranches (Cast (App Coq.Init.Logic.eq_ind nat (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) (Lambda n_233322222223222223222332 nat (App eq nat (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)))) n_233322222223222223222332)) (App Coq.Init.Logic.eq_trans nat (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) (App Coq.Init.Logic.f_equal (Prod out_233322222223222223222331 nat nat) nat (Lambda f_233322222223222223222332 (Prod out_233322222223222223222331 nat nat) (App f_233322222223222223222332 (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232223322 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232223322) (App B_23332222222322222 x_2333222222232222232223322))) l_23332222222322222322))))) S S (App eq_refl (Prod out_233322222223222223222331 nat nat) S)) (App Coq.Init.Logic.f_equal nat nat S (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322))) IHl_233322222223222223222)) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App S (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) (App Coq.Init.Peano.plus_n_Sm (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))) REVERTcast (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222332 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.orb false true)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222332 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.andb false true)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322))))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322)))))) (Cast IHl_233322222223222223222 REVERTcast (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222332 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.orb false false)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (Case 0 (Lambda b_233322222223222223222332 bool (App list (Axiom ExportProof.X))) (CaseMatch (App Coq.Init.Datatypes.andb false false)) (CaseBranches (App cons (Axiom ExportProof.X) x_2333222222232222232 (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322)) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_233322222223222223222332 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_233322222223222223222332) (App B_23332222222322222 x_233322222223222223222332))) l_23332222222322222322))))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 l_23332222222322222322)) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 l_23332222222322222322))))))))))) REVERTcast (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232222 (Axiom ExportProof.X) (App Coq.Init.Datatypes.orb (App A_2333222222232222 x_2333222222232222232222) (App B_23332222222322222 x_2333222222232222232222))) (App cons (Axiom ExportProof.X) x_2333222222232222232 l_23332222222322222322))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (Lambda x_2333222222232222232222 (Axiom ExportProof.X) (App Coq.Init.Datatypes.andb (App A_2333222222232222 x_2333222222232222232222) (App B_23332222222322222 x_2333222222232222232222))) (App cons (Axiom ExportProof.X) x_2333222222232222232 l_23332222222322222322)))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (App cons (Axiom ExportProof.X) x_2333222222232222232 l_23332222222322222322))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (App cons (Axiom ExportProof.X) x_2333222222232222232 l_23332222222322222322))))))))) l_233322222223222223)) REVERTcast (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X)))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (Axiom ExportProof.enum_X)))))) (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X)))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (Axiom ExportProof.enum_X))))) (App (Lambda H_2333222222232222232 (App eq nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X)))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (Axiom ExportProof.enum_X))))) (App Coq.Init.Logic.eq_trans Z (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))))) (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))))) (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (Axiom ExportProof.enum_X))))) (App Coq.Init.Logic.f_equal (Prod n_23332222222322222321 nat Z) Z (Lambda f_23332222222322222322 (Prod n_23332222222322222321 nat Z) (App f_23332222222322222322 (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X)))))) Coq.ZArith.BinIntDef.Z.of_nat Coq.ZArith.BinIntDef.Z.of_nat (App eq_refl (Prod n_23332222222322222321 nat Z) Coq.ZArith.BinIntDef.Z.of_nat)) (App Coq.Init.Logic.f_equal nat Z Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X)))) (App Coq.Init.Nat.add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (Axiom ExportProof.enum_X)))) H_2333222222232222232))) H_233322222223222223)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (Axiom ExportProof.enum_X)))) (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (Axiom ExportProof.enum_X))))) (App Coq.ZArith.Znat.Nat2Z.inj_add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) A_2333222222232222 (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) B_23332222222322222 (Axiom ExportProof.enum_X))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X)))) (App Coq.ZArith.BinIntDef.Z.of_nat (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))))) (App Coq.ZArith.Znat.Nat2Z.inj_add (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_union A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))) (App Coq.Init.Datatypes.length (Axiom ExportProof.X) (App Coq.Lists.List.filter (Axiom ExportProof.X) (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222) (Axiom ExportProof.enum_X))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222))) (App (Lambda H_2333222222232222232 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222))) (App Coq.Logic.Decidable.dec_not_not (App eq Z (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222)))) (App Coq.ZArith.BinInt.Z.eq_decidable (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222)))) (Lambda H0_23332222222322222322 (App Coq.Init.Logic.not (App eq Z (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222))))) (App Coq.Init.Logic.ex_ind Z (Lambda y_233322222223222223222 Z (App eq Z (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) y_233322222223222223222)) False (Lambda Zvar0_233322222223222223222 Z (Lambda Omega0_2333222222232222232222 (App eq Z (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) Zvar0_233322222223222223222) (App Coq.Init.Logic.ex_ind Z (Lambda y_23332222222322222322222 Z (App eq Z (App ExportProof.cardinal A_2333222222232222) y_23332222222322222322222)) False (Lambda Zvar1_23332222222322222322222 Z (Lambda Omega1_233322222223222223222222 (App eq Z (App ExportProof.cardinal A_2333222222232222) Zvar1_23332222222322222322222) (App Coq.Init.Logic.ex_ind Z (Lambda y_2333222222232222232222222 Z (App eq Z (App ExportProof.cardinal B_23332222222322222) y_2333222222232222232222222)) False (Lambda Zvar2_2333222222232222232222222 Z (Lambda Omega2_23332222222322222322222222 (App eq Z (App ExportProof.cardinal B_23332222222322222) Zvar2_2333222222232222232222222) (App Coq.Init.Logic.ex_ind Z (Lambda y_233322222223222223222222222 Z (App eq Z (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222)) y_233322222223222223222222222)) False (Lambda Zvar3_233322222223222223222222222 Z (Lambda Omega3_2333222222232222232222222222 (App eq Z (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222)) Zvar3_233322222223222223222222222) (App (Lambda P_23332222222322222322222222222 (Prod out_23332222222322222322222222221 Z (Sort Prop)) (Lambda H_233322222223222223222222222222 (App P_23332222222322222322222222222 Zvar0_233322222223222223222) (App Coq.Init.Logic.eq_ind_r Z Zvar0_233322222223222223222 P_23332222222322222322222222222 H_233322222223222223222222222222 (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) Omega0_2333222222232222232222))) (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222322222222222 (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222)))) Z0) False)) (App (Lambda P_23332222222322222322222222222 (Prod out_23332222222322222322222222221 Z (Sort Prop)) (Lambda H_233322222223222223222222222222 (App P_23332222222322222322222222222 Zvar3_233322222223222223222222222) (App Coq.Init.Logic.eq_ind_r Z Zvar3_233322222223222223222222222 P_23332222222322222322222222222 H_233322222223222223222222222222 (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222)) Omega3_2333222222232222232222222222))) (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 x_23332222222322222322222222222) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222)))) Z0) False)) (App (Lambda P_23332222222322222322222222222 (Prod out_23332222222322222322222222221 Z (Sort Prop)) (Lambda H_233322222223222223222222222222 (App P_23332222222322222322222222222 Zvar1_23332222222322222322222) (App Coq.Init.Logic.eq_ind_r Z Zvar1_23332222222322222322222 P_23332222222322222322222222222 H_233322222223222223222222222222 (App ExportProof.cardinal A_2333222222232222) Omega1_233322222223222223222222))) (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 Zvar3_233322222223222223222222222) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222322222222222 (App ExportProof.cardinal B_23332222222322222)))) Z0) False)) (App (Lambda P_23332222222322222322222222222 (Prod out_23332222222322222322222222221 Z (Sort Prop)) (Lambda H_233322222223222223222222222222 (App P_23332222222322222322222222222 Zvar2_2333222222232222232222222) (App Coq.Init.Logic.eq_ind_r Z Zvar2_2333222222232222232222222 P_23332222222322222322222222222 H_233322222223222223222222222222 (App ExportProof.cardinal B_23332222222322222) Omega2_23332222222322222322222222))) (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 Zvar3_233322222223222223222222222) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add Zvar1_23332222222322222322222 x_23332222222322222322222222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_plus_distr Zvar1_23332222222322222322222 Zvar2_2333222222232222232222222 (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 Zvar3_233322222223222223222222222) x_23332222222322222322222222222) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 Zvar1_23332222222322222322222 (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 Zvar3_233322222223222223222222222) (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222322222222222 (App Coq.ZArith.BinIntDef.Z.opp Zvar2_2333222222232222232222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 Zvar2_2333222222232222232222222 (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 Zvar3_233322222223222223222222222) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) x_23332222222322222322222222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_assoc_reverse Zvar0_233322222223222223222 Zvar3_233322222223222223222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH))) (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z x_23332222222322222322222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor0 Zvar0_233322222223222223222 (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222322222222222 (App Coq.ZArith.BinIntDef.Z.add Zvar3_233322222223222223222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH))))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor0 Zvar3_233322222223222223222222222 (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_233322222223222223222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add x_23332222222322222322222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH))))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor6 (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) (Lambda x_23332222222322222322222222222 Z (Prod out_233322222223222223222222222221 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_233322222223222223222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) x_23332222222322222322222222222))) Z0) False)) (Lambda Omega5_23332222222322222322222222222 (App eq Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_233322222223222223222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0)))) Z0) (App (Lambda P_233322222223222223222222222222 (Prod out_233322222223222223222222222221 Z (Sort Prop)) (Lambda H_2333222222232222232222222222222 (App P_233322222223222223222222222222 Zvar0_233322222223222223222) (App Coq.Init.Logic.eq_ind_r Z Zvar0_233322222223222223222 P_233322222223222223222222222222 H_2333222222232222232222222222222 (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) Omega0_2333222222232222232222))) (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add x_233322222223222223222222222222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222))))) Z0) False)) (Cast (App (Lambda P_233322222223222223222222222222 (Prod out_233322222223222223222222222221 Z (Sort Prop)) (Lambda H_2333222222232222232222222222222 (App P_233322222223222223222222222222 Zvar1_23332222222322222322222) (App Coq.Init.Logic.eq_ind_r Z Zvar1_23332222222322222322222 P_233322222223222223222222222222 H_2333222222232222232222222222222 (App ExportProof.cardinal A_2333222222232222) Omega1_233322222223222223222222))) (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add x_233322222223222223222222222222 (App ExportProof.cardinal B_23332222222322222)) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222)))))) Z0) False)) (App (Lambda P_233322222223222223222222222222 (Prod out_233322222223222223222222222221 Z (Sort Prop)) (Lambda H_2333222222232222232222222222222 (App P_233322222223222223222222222222 Zvar2_2333222222232222232222222) (App Coq.Init.Logic.eq_ind_r Z Zvar2_2333222222232222232222222 P_233322222223222223222222222222 H_2333222222232222232222222222222 (App ExportProof.cardinal B_23332222222322222) Omega2_23332222222322222322222222))) (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Zvar1_23332222222322222322222 x_233322222223222223222222222222) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222)))))) Z0) False)) (App (Lambda P_233322222223222223222222222222 (Prod out_233322222223222223222222222221 Z (Sort Prop)) (Lambda H_2333222222232222232222222222222 (App P_233322222223222223222222222222 Zvar3_233322222223222223222222222) (App Coq.Init.Logic.eq_ind_r Z Zvar3_233322222223222223222222222 P_233322222223222223222222222222 H_2333222222232222232222222222222 (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222)) Omega3_2333222222232222232222222222))) (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Zvar1_23332222222322222322222 Zvar2_2333222222232222232222222) (App Coq.ZArith.BinIntDef.Z.opp x_233322222223222223222222222222)))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 Zvar3_233322222223222223222222222 (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add Zvar1_23332222222322222322222 Zvar2_2333222222232222232222222) x_233322222223222223222222222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zplus_comm (App Coq.ZArith.BinIntDef.Z.add Zvar1_23332222222322222322222 Zvar2_2333222222232222232222222) (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zneg xH)) (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.opp x_233322222223222223222222222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_plus_distr (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add Zvar1_23332222222322222322222 Zvar2_2333222222232222232222222) (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 x_233322222223222223222222222222) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_mult_distr_r Zvar3_233322222223222223222222222 (App Zneg xH) (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.add x_233322222223222223222222222222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add Zvar1_23332222222322222322222 Zvar2_2333222222232222232222222)))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_plus_distr Zvar1_23332222222322222322222 Zvar2_2333222222232222232222222 (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) x_233322222223222223222222222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 Zvar1_23332222222322222322222 (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add x_233322222223222223222222222222 (App Coq.ZArith.BinIntDef.Z.opp Zvar2_2333222222232222232222222)))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 Zvar2_2333222222232222232222222 (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) x_233322222223222223222222222222))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor0 Zvar0_233322222223222223222 (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add x_233322222223222223222222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH))))) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor6 (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) (Lambda x_233322222223222223222222222222 Z (Prod out_2333222222232222232222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_233322222223222223222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) x_233322222223222223222222222222))) Z0) False)) (Lambda Omega4_233322222223222223222222222222 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_233322222223222223222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0)))) Z0) (App Coq.omega.OmegaLemmas.fast_OMEGA15 Zvar0_233322222223222223222 (App Zpos xH) (App Zpos xH) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0))) (App Zneg xH) (Lambda x_2333222222232222232222222222222 Z (Prod out_23332222222322222322222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222232222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor5 Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0))) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0))) (App Zneg xH))) (Lambda x_2333222222232222232222222222222 Z (Prod out_23332222222322222322222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222232222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_OMEGA15 Zvar3_233322222223222223222222222 (App Zpos xH) (App Zpos xH) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0)) (App Zneg xH) (Lambda x_2333222222232222232222222222222 Z (Prod out_23332222222322222322222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222232222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor5 Zvar3_233322222223222223222222222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0)) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0)) (App Zneg xH))) (Lambda x_2333222222232222232222222222222 Z (Prod out_23332222222322222322222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222232222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_OMEGA15 Zvar1_23332222222322222322222 (App Zneg xH) (App Zneg xH) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0) (App Zneg xH) (Lambda x_2333222222232222232222222222222 Z (Prod out_23332222222322222322222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222232222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor5 Zvar1_23332222222322222322222 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0) (App Coq.ZArith.BinIntDef.Z.mul (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0) (App Zneg xH))) (Lambda x_2333222222232222232222222222222 Z (Prod out_23332222222322222322222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222232222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_OMEGA15 Zvar2_2333222222232222232222222 (App Zneg xH) (App Zneg xH) Z0 Z0 (App Zneg xH) (Lambda x_2333222222232222232222222222222 Z (Prod out_23332222222322222322222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222232222222222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor5 Zvar2_2333222222232222232222222 (App Coq.ZArith.BinIntDef.Z.add Z0 (App Coq.ZArith.BinIntDef.Z.mul Z0 (App Zneg xH))) (Lambda x_2333222222232222232222222222222 Z (Prod out_23332222222322222322222222222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222232222222222222 Z0) False)) (Lambda auxiliary_2333222222232222232222222222222 (App Coq.ZArith.BinInt.Zne Z0 Z0) (App auxiliary_2333222222232222232222222222222 (App eq_refl Z Z0)))))))))) (App Coq.omega.OmegaLemmas.OMEGA17 (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_233322222223222223222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0)))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar0_233322222223222223222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar3_233322222223222223222222222 (App Zpos xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar1_23332222222322222322222 (App Zneg xH)) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul Zvar2_2333222222232222232222222 (App Zneg xH)) Z0)))) (App Zneg xH) Omega4_233322222223222223222222222222 Omega5_23332222222322222322222222222))))))))))))))) REVERTcast (Prod out_233322222223222223222222222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_233322222223222223222 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222))))) Z0) False)) (App Coq.ZArith.auxiliary.Zne_left (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222))) H0_23332222222322222322))))))))))))) (App Coq.ZArith.auxiliary.Zegal_left (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_2333222222232222) (App ExportProof.cardinal B_23332222222322222)) H_2333222222232222232)))) (App Coq.omega.OmegaLemmas.new_var (App ExportProof.cardinal (App ExportProof.binary_intersection A_2333222222232222 B_23332222222322222)))))) (App Coq.omega.OmegaLemmas.new_var (App ExportProof.cardinal B_23332222222322222))))) (App Coq.omega.OmegaLemmas.new_var (App ExportProof.cardinal A_2333222222232222))))) (App Coq.omega.OmegaLemmas.new_var (App ExportProof.cardinal (App ExportProof.binary_union A_2333222222232222 B_23332222222322222))))))) H_233322222223222223))))) (Definition ExportProof.cardinal_binary_union (Lambda A_23332222222322 ExportProof.set (Lambda B_233322222223222 ExportProof.set (App Coq.Init.Logic.eq_ind Z (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) (Lambda z_2333222222232222 Z (App eq Z (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) z_2333222222232222)) (App Coq.Logic.Decidable.dec_not_not (App eq Z (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222))) (App Coq.ZArith.BinInt.Z.eq_decidable (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222))) (Lambda H_2333222222232222 (App Coq.Init.Logic.not (App eq Z (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)))) (App Coq.Init.Logic.ex_ind Z (Lambda y_23332222222322222 Z (App eq Z (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) y_23332222222322222)) False (Lambda Zvar0_23332222222322222 Z (Lambda Omega0_233322222223222222 (App eq Z (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) Zvar0_23332222222322222) (App (Lambda P_2333222222232222222 (Prod out_2333222222232222221 Z (Sort Prop)) (Lambda H_23332222222322222222 (App P_2333222222232222222 Zvar0_23332222222322222) (App Coq.Init.Logic.eq_ind_r Z Zvar0_23332222222322222 P_2333222222232222222 H_23332222222322222222 (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) Omega0_233322222223222222))) (Lambda x_2333222222232222222 Z (Prod out_23332222222322222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add x_2333222222232222222 (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)))) Z0) False)) (App (Lambda P_2333222222232222222 (Prod out_2333222222232222221 Z (Sort Prop)) (Lambda H_23332222222322222222 (App P_2333222222232222222 Zvar0_23332222222322222) (App Coq.Init.Logic.eq_ind_r Z Zvar0_23332222222322222 P_2333222222232222222 H_23332222222322222222 (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) Omega0_233322222223222222))) (Lambda x_2333222222232222222 Z (Prod out_23332222222322222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_23332222222322222 (App Coq.ZArith.BinIntDef.Z.opp x_2333222222232222222)) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zopp_eq_mult_neg_1 Zvar0_23332222222322222 (Lambda x_2333222222232222222 Z (Prod out_23332222222322222221 (App Coq.ZArith.BinInt.Zne (App Coq.ZArith.BinIntDef.Z.add Zvar0_23332222222322222 x_2333222222232222222) Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor2 Zvar0_23332222222322222 (App Zneg xH) (Lambda x_2333222222232222222 Z (Prod out_23332222222322222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor6 (App Coq.ZArith.BinIntDef.Z.mul Zvar0_23332222222322222 Z0) (Lambda x_2333222222232222222 Z (Prod out_23332222222322222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222222 Z0) False)) (App Coq.omega.OmegaLemmas.fast_Zred_factor5 Zvar0_23332222222322222 Z0 (Lambda x_2333222222232222222 Z (Prod out_23332222222322222221 (App Coq.ZArith.BinInt.Zne x_2333222222232222222 Z0) False)) (Lambda Omega1_2333222222232222222 (App Coq.ZArith.BinInt.Zne Z0 Z0) (App Omega1_2333222222232222222 (App eq_refl Z Z0)))))))) (App Coq.ZArith.auxiliary.Zne_left (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)) H_2333222222232222)))) (App Coq.omega.OmegaLemmas.new_var (App ExportProof.cardinal (App ExportProof.binary_union A_23332222222322 B_233322222223222)))))) (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal A_23332222222322) (App ExportProof.cardinal B_233322222223222)) (App ExportProof.cardinal (App ExportProof.binary_intersection A_23332222222322 B_233322222223222))) (App ExportProof.cardinal_union_lemma A_23332222222322 B_233322222223222))))) (Definition ExportProof.inclusion_exclusion (Lambda l_2 (App list ExportProof.set) (LetIn f_23 (Lambda l'_22 (App list ExportProof.set) (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection l'_22)) (App ExportProof.alternating_sign (App Coq.Init.Nat.add (App S O) (App Coq.Init.Datatypes.length ExportProof.set l'_22))))) (Prod l'_21 (App list ExportProof.set) Z) (LetIn n_233 (App Coq.Init.Datatypes.length ExportProof.set l_2) nat (LetIn Heqn_2333 (App eq_refl nat n_233) (App eq nat n_233 (App Coq.Init.Datatypes.length ExportProof.set l_2)) (App Coq.Init.Datatypes.nat_ind (Lambda n_23332 nat (Prod l_233321 (App list ExportProof.set) (Prod Heqn_2333211 (App eq nat n_23332 (App Coq.Init.Datatypes.length ExportProof.set l_233321)) (App eq Z (App ExportProof.cardinal (App ExportProof.list_union l_233321)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_233321)))))))) (Lambda l_23332 (App list ExportProof.set) (Lambda En_233322 (App eq nat O (App Coq.Init.Datatypes.length ExportProof.set l_23332)) (App (Case 1 (Lambda l_2333222 (App list ExportProof.set) (Prod En_23332221 (App eq nat O (App Coq.Init.Datatypes.length ExportProof.set l_2333222)) (App eq Z (App ExportProof.cardinal (App ExportProof.list_union l_2333222)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222))))))) (CaseMatch l_23332) (CaseBranches (Lambda En_2333222 (App eq nat O (App Coq.Init.Datatypes.length ExportProof.set (App nil ExportProof.set))) (Cast (Cast (App Coq.Init.Logic.eq_ind_r Z Z0 (Lambda z_23332222 Z (App eq Z z_23332222 Z0)) (App eq_refl Z Z0) (App ExportProof.cardinal ExportProof.empty_set) ExportProof.cardinal_empty) REVERTcast (App eq Z (App ExportProof.cardinal (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_union ExportProof.empty_set (App nil ExportProof.set))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z (Lambda l'_23332222 (App list ExportProof.set) (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection l'_23332222)) (App ExportProof.alternating_sign (App Coq.Init.Nat.add (App S O) (App Coq.Init.Datatypes.length ExportProof.set l'_23332222))))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App nil ExportProof.set))))))) REVERTcast (App eq Z (App ExportProof.cardinal (App ExportProof.list_union (App nil ExportProof.set))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App nil ExportProof.set)))))))) (Lambda s_2333222 ExportProof.set (Lambda l_23332222 (App list ExportProof.set) (Lambda En_233322222 (App eq nat O (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set s_2333222 l_23332222))) (LetIn H_2333222223 (App Coq.Init.Logic.eq_ind nat O (Lambda e_2333222222 nat (Case 0 (Lambda n_23332222222 nat (Sort Prop)) (CaseMatch e_2333222222) (CaseBranches True (Lambda out_23332222222 nat False)))) I (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set s_2333222 l_23332222)) En_233322222) False (App Coq.Init.Logic.False_ind (App eq Z (App ExportProof.cardinal (App ExportProof.list_union (App cons ExportProof.set s_2333222 l_23332222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App cons ExportProof.set s_2333222 l_23332222)))))) H_2333222223))))))) En_233322))) (Lambda n_23332 nat (Lambda IHn_233322 (Prod l_233321 (App list ExportProof.set) (Prod Heqn_2333211 (App eq nat n_23332 (App Coq.Init.Datatypes.length ExportProof.set l_233321)) (App eq Z (App ExportProof.cardinal (App ExportProof.list_union l_233321)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_233321))))))) (Lambda l_2333222 (App list ExportProof.set) (Lambda En_23332222 (App eq nat (App S n_23332) (App Coq.Init.Datatypes.length ExportProof.set l_2333222)) (App (Case 1 (Lambda l_233322222 (App list ExportProof.set) (Prod En_2333222221 (App eq nat (App S n_23332) (App Coq.Init.Datatypes.length ExportProof.set l_233322222)) (App eq Z (App ExportProof.cardinal (App ExportProof.list_union l_233322222)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_233322222))))))) (CaseMatch l_2333222) (CaseBranches (Lambda En_233322222 (App eq nat (App S n_23332) (App Coq.Init.Datatypes.length ExportProof.set (App nil ExportProof.set))) (LetIn H_2333222223 (App Coq.Init.Logic.eq_ind nat (App S n_23332) (Lambda e_2333222222 nat (Case 0 (Lambda n_23332222222 nat (Sort Prop)) (CaseMatch e_2333222222) (CaseBranches False (Lambda out_23332222222 nat True)))) I (App Coq.Init.Datatypes.length ExportProof.set (App nil ExportProof.set)) En_233322222) False (App Coq.Init.Logic.False_ind (App eq Z (App ExportProof.cardinal (App ExportProof.list_union (App nil ExportProof.set))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App nil ExportProof.set)))))) H_2333222223))) (Lambda a_233322222 ExportProof.set (Lambda l_2333222222 (App list ExportProof.set) (Lambda En_23332222222 (App eq nat (App S n_23332) (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set a_233322222 l_2333222222))) (LetIn H_233322222223 (App Coq.Init.Logic.f_equal nat nat (Lambda e_233322222222 nat (Case 0 (Lambda n_2333222222222 nat nat) (CaseMatch e_233322222222) (CaseBranches n_23332 (Lambda n_2333222222222 nat n_2333222222222)))) (App S n_23332) (App S (App Coq.Init.Datatypes.length ExportProof.set l_2333222222)) En_23332222222) (App eq nat n_23332 (App Coq.Init.Datatypes.length ExportProof.set l_2333222222)) (App (Lambda En_2333222222232 (App eq nat n_23332 (App Coq.Init.Datatypes.length ExportProof.set l_2333222222)) (Cast (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal (App ExportProof.list_union l_2333222222))) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) (Lambda z_23332222222322 Z (App eq Z z_23332222222322 (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Init.Datatypes.app (App list ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223222)) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (App Coq.Init.Logic.eq_ind_r (App list (App list ExportProof.set)) (App Coq.Init.Datatypes.app (App list ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))) (Lambda l_23332222222322 (App list (App list ExportProof.set)) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal (App ExportProof.list_union l_2333222222))) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 l_23332222222322)))) (App Coq.Init.Logic.eq_ind_r (App list Z) (App Coq.Init.Datatypes.app Z (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))) (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222))))) (Lambda l_23332222222322 (App list Z) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal (App ExportProof.list_union l_2333222222))) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) (App ExportProof.sum l_23332222222322))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (Lambda z_23332222222322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal (App ExportProof.list_union l_2333222222))) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) z_23332222222322)) (App Coq.Init.Logic.eq_ind_r Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (Lambda z_23332222222322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) z_23332222222322) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223222)) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (LetIn la_23332222222323 (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222321 (Axiom ExportProof.X) bool) (Lambda b_23332222222322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222322)) l_2333222222) (App list (Prod x_23332222222321 (Axiom ExportProof.X) bool)) (LetIn H_233322222223233 (App ExportProof.cardinal_set_eq (App ExportProof.list_union la_23332222222323) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)) (Cast (App Coq.Init.Datatypes.list_ind ExportProof.set (Lambda l_233322222223232 (App list ExportProof.set) (App ExportProof.set_eq (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232321 (Axiom ExportProof.X) bool) (Lambda b_2333222222232322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232322)) l_233322222223232)) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_233322222223232)))) (Cast (Cast (Lambda x_233322222223232 (Axiom ExportProof.X) (Cast (LetIn s_2333222222232323 (App a_233322222 x_233322222223232) bool (Case 0 (Lambda b_23332222222323232 bool (App eq bool false (Case 0 (Lambda b1_233322222223232322 bool bool) (CaseMatch b_23332222222323232) (CaseBranches false false)))) (CaseMatch s_2333222222232323) (CaseBranches (App eq_refl bool false) (App eq_refl bool false)))) REVERTcast (App eq bool (App ExportProof.empty_set x_233322222223232) (App ExportProof.binary_intersection a_233322222 ExportProof.empty_set x_233322222223232)))) REVERTcast (App ExportProof.set_eq ExportProof.empty_set (App ExportProof.binary_intersection a_233322222 ExportProof.empty_set))) REVERTcast (App ExportProof.set_eq (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223231 (Axiom ExportProof.X) bool) (Lambda b_233322222223232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223232)) (App nil ExportProof.set))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union (App nil ExportProof.set))))) (Lambda a0_233322222223232 ExportProof.set (Lambda l_2333222222232322 (App list ExportProof.set) (Lambda IHl_23332222222323222 (App ExportProof.set_eq (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323222)) l_2333222222232322)) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322))) (Cast (App (Lambda lemma_233322222223232222 (App ExportProof.set_eq (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223232221 (Axiom ExportProof.X) bool) (Lambda b_233322222223232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223232222)) l_2333222222232322)) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322))) (App Coq.Classes.Morphisms.subrelation_proper (Prod A_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Sort Prop))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_2333222222232322221 ExportProof.set (Sort Prop)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff)) ExportProof.set_eq (App Coq.Classes.Morphisms.PER_morphism ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PER ExportProof.set ExportProof.set_eq ExportProof.Set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Sort Prop) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) (App ExportProof.binary_union (App ExportProof.binary_intersection a_233322222 a0_233322222223232) (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232322222)) l_2333222222232322))) (App ExportProof.binary_union (App ExportProof.binary_intersection a_233322222 a0_233322222223232) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_union (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Prod x_233322222223232222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Prod x_233322222223232222111 (Axiom ExportProof.X) bool))) (Prod out_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Prod x_233322222223232222111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_union (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Prod x_233322222223232222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_union (App Coq.Classes.Morphisms.subrelation_proper (Prod out_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Prod x_233322222223232222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_2333222222232322221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_union ExportProof.union_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) (App ExportProof.binary_intersection a_233322222 a0_233322222223232) (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) (App ExportProof.binary_intersection a_233322222 a0_233322222223232)) (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232322222)) l_2333222222232322)) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322)) lemma_233322222223232222) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_union a0_233322222223232 (App ExportProof.list_union l_2333222222232322))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_union a0_233322222223232 (App ExportProof.list_union l_2333222222232322))) (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Reflexive (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_union a0_233322222223232 (App ExportProof.list_union l_2333222222232322)))))) IHl_23332222222323222 (Cast (Lambda x_233322222223232222 (Axiom ExportProof.X) (Cast (LetIn s_2333222222232322223 (App a_233322222 x_233322222223232222) bool (Case 0 (Lambda b_23332222222323222232 bool (App eq bool (Case 0 (Lambda b1_233322222223232222322 bool bool) (CaseMatch (Case 0 (Lambda b1_233322222223232222322 bool bool) (CaseMatch b_23332222222323222232) (CaseBranches (App a0_233322222223232 x_233322222223232222) false))) (CaseBranches true (Case 0 (Lambda b1_233322222223232222322 bool bool) (CaseMatch b_23332222222323222232) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_233322222223232222321 (App list (Prod out_233322222223232222321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232322223211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223232222322 (App list (Prod out_233322222223232222321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232322223222 (App list (Prod out_2333222222232322223221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323222232221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223232222322) (CaseBranches (Lambda out_2333222222232322223222 (Axiom ExportProof.X) false) (Lambda b_2333222222232322223222 (Prod out_2333222222232322223221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323222232222 (App list (Prod out_23332222222323222232221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223232222322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232322223222222 bool bool) (CaseMatch (App b_2333222222232322223222 x_233322222223232222322222)) (CaseBranches true (App fold_right t_23332222222323222232222 x_233322222223232222322222))))))))))) 0) l_2333222222232322 x_233322222223232222) false)))) (Case 0 (Lambda b1_233322222223232222322 bool bool) (CaseMatch b_23332222222323222232) (CaseBranches (Case 0 (Lambda b1_233322222223232222322 bool bool) (CaseMatch (App a0_233322222223232 x_233322222223232222)) (CaseBranches true (App (Fix (Functions (App fold_right 0 (Prod l_233322222223232222321 (App list (Prod out_233322222223232222321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232322223211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223232222322 (App list (Prod out_233322222223232222321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232322223222 (App list (Prod out_2333222222232322223221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323222232221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223232222322) (CaseBranches (Lambda out_2333222222232322223222 (Axiom ExportProof.X) false) (Lambda b_2333222222232322223222 (Prod out_2333222222232322223221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323222232222 (App list (Prod out_23332222222323222232221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223232222322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232322223222222 bool bool) (CaseMatch (App b_2333222222232322223222 x_233322222223232222322222)) (CaseBranches true (App fold_right t_23332222222323222232222 x_233322222223232222322222))))))))))) 0) l_2333222222232322 x_233322222223232222))) false)))) (CaseMatch s_2333222222232322223) (CaseBranches (LetIn s_23332222222323222233 (App a0_233322222223232 x_233322222223232222) bool (Case 0 (Lambda b_233322222223232222332 bool (App eq bool (Case 0 (Lambda b1_2333222222232322223322 bool bool) (CaseMatch b_233322222223232222332) (CaseBranches true (App (Fix (Functions (App fold_right 0 (Prod l_2333222222232322223321 (App list (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool)) (Prod out_23332222222323222233211 (Axiom ExportProof.X) bool)) (Lambda l_2333222222232322223322 (App list (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_23332222222323222233222 (App list (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool)) (Prod out_233322222223232222332221 (Axiom ExportProof.X) bool)) (CaseMatch l_2333222222232322223322) (CaseBranches (Lambda out_23332222222323222233222 (Axiom ExportProof.X) false) (Lambda b_23332222222323222233222 (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool) (Lambda t_233322222223232222332222 (App list (Prod out_233322222223232222332221 (Axiom ExportProof.X) bool)) (Lambda x_2333222222232322223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_23332222222323222233222222 bool bool) (CaseMatch (App b_23332222222323222233222 x_2333222222232322223322222)) (CaseBranches true (App fold_right t_233322222223232222332222 x_2333222222232322223322222))))))))))) 0) l_2333222222232322 x_233322222223232222))) (Case 0 (Lambda b1_2333222222232322223322 bool bool) (CaseMatch b_233322222223232222332) (CaseBranches true (App (Fix (Functions (App fold_right 0 (Prod l_2333222222232322223321 (App list (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool)) (Prod out_23332222222323222233211 (Axiom ExportProof.X) bool)) (Lambda l_2333222222232322223322 (App list (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_23332222222323222233222 (App list (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool)) (Prod out_233322222223232222332221 (Axiom ExportProof.X) bool)) (CaseMatch l_2333222222232322223322) (CaseBranches (Lambda out_23332222222323222233222 (Axiom ExportProof.X) false) (Lambda b_23332222222323222233222 (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool) (Lambda t_233322222223232222332222 (App list (Prod out_233322222223232222332221 (Axiom ExportProof.X) bool)) (Lambda x_2333222222232322223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_23332222222323222233222222 bool bool) (CaseMatch (App b_23332222222323222233222 x_2333222222232322223322222)) (CaseBranches true (App fold_right t_233322222223232222332222 x_2333222222232322223322222))))))))))) 0) l_2333222222232322 x_233322222223232222))))) (CaseMatch s_23332222222323222233) (CaseBranches (App eq_refl bool true) (App eq_refl bool (App (Fix (Functions (App fold_right 0 (Prod l_233322222223232222331 (App list (Prod out_233322222223232222331 (Axiom ExportProof.X) bool)) (Prod out_2333222222232322223311 (Axiom ExportProof.X) bool)) (Lambda l_233322222223232222332 (App list (Prod out_233322222223232222331 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232322223322 (App list (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool)) (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223232222332) (CaseBranches (Lambda out_2333222222232322223322 (Axiom ExportProof.X) false) (Lambda b_2333222222232322223322 (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool) (Lambda t_23332222222323222233222 (App list (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223232222332222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232322223322222 bool bool) (CaseMatch (App b_2333222222232322223322 x_233322222223232222332222)) (CaseBranches true (App fold_right t_23332222222323222233222 x_233322222223232222332222))))))))))) 0) l_2333222222232322 x_233322222223232222))))) (App eq_refl bool false)))) REVERTcast (App eq bool (App ExportProof.binary_union (App ExportProof.binary_intersection a_233322222 a0_233322222223232) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322)) x_233322222223232222) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_union a0_233322222223232 (App ExportProof.list_union l_2333222222232322)) x_233322222223232222)))) REVERTcast (App ExportProof.set_eq (App ExportProof.binary_union (App ExportProof.binary_intersection a_233322222 a0_233322222223232) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_union a0_233322222223232 (App ExportProof.list_union l_2333222222232322)))))) REVERTcast (App ExportProof.set_eq (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223232221 (Axiom ExportProof.X) bool) (Lambda b_233322222223232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223232222)) (App cons ExportProof.set a0_233322222223232 l_2333222222232322))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union (App cons ExportProof.set a0_233322222223232 l_2333222222232322)))))))) l_2333222222) REVERTcast (App ExportProof.set_eq (App ExportProof.list_union la_23332222222323) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222))))) (App eq Z (App ExportProof.cardinal (App ExportProof.list_union la_23332222222323)) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) (App Coq.Init.Logic.eq_ind Z (App ExportProof.cardinal (App ExportProof.list_union la_23332222222323)) (Lambda z_2333222222232332 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) z_2333222222232332) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323322)) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (App Coq.Init.Logic.eq_ind_r Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323)))) (Lambda z_2333222222232332 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) z_2333222222232332) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323322)) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (LetIn H_2333222222232333 (Cast (App Coq.Init.Logic.eq_ind_r (App list (App list ExportProof.set)) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App ExportProof.sublists ExportProof.set l_2333222222)) (Lambda l_2333222222232332 (App list (App list ExportProof.set)) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323322)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 l_2333222222232332)))) (App Coq.Init.Logic.eq_ind_r (App list (App list ExportProof.set)) (App cons (App list ExportProof.set) (App nil ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))) (Lambda l_2333222222232332 (App list (App list ExportProof.set)) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323322)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323322)) l_2333222222232332))))) (Cast (Cast (Cast (LetIn to_rewrite_2333222222232333 (App cons Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App nil Z))) (App list Z) (App (Cast (Cast (Lambda Heq_23332222222323332 (App eq (App list Z) to_rewrite_2333222222232333 (App cons Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323331 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332)) l_2333222222)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App nil Z)))) (LetIn list_hyp_233322222223233323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn list_hyp_norm_2333222222232333233 (App nil (App prod (App prod Z Mon) (App Pol Z))) (App list (App prod (App prod Z Mon) (App Pol Z))) (LetIn list_hyp_norm_eq_23332222222323332333 (Cast (App eq_refl (App list (App prod (App prod Z Mon) (App Pol Z))) list_hyp_norm_2333222222232333233) VMcast (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_233322222223233323) list_hyp_norm_2333222222232333233)) (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_233322222223233323) list_hyp_norm_2333222222232333233) (LetIn ring_lemma_233322222223233323333 (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma2 Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_233322222223233323 (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323331 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323332)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) I list_hyp_norm_2333222222232333233 list_hyp_norm_eq_23332222222323332333) (Prod pe_233322222223233323331 (App PExpr Z) (Prod npe_2333222222232333233311 (App Pol Z) (Prod out_23332222222323332333111 (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_2333222222232333233 pe_233322222223233323331) npe_2333222222232333233311) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323331111 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323331112)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323331112 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323331112)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) pe_233322222223233323331) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323331111 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323331112)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323331112 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323331112)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) npe_2333222222232333233311))))) (LetIn res_2333222222232333233333 (App PX Z (App Pc Z (App Zpos xH)) xH (App PX Z (App Pc Z (App Zneg xH)) xH (App Pc Z Z0))) (App Pol Z) (LetIn res_eq_23332222222323332333333 (Cast (App eq_refl (App Pol Z) res_2333222222232333233333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_2333222222232333233 (App PEsub Z (App PEX Z xH) (App PEX Z (App xO xH)))) res_2333222222232333233333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_2333222222232333233 (App PEsub Z (App PEX Z xH) (App PEX Z (App xO xH)))) res_2333222222232333233333) (LetIn thm_233322222223233323333333 (App ring_lemma_233322222223233323333 (App PEsub Z (App PEX Z xH) (App PEX Z (App xO xH))) res_2333222222232333233333 res_eq_23332222222323332333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333331 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333332)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) (App PEsub Z (App PEX Z xH) (App PEX Z (App xO xH)))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333331 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333332)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) res_2333222222232333233333)) (LetIn res0_2333222222232333233333333 (App PX Z (App Pc Z (App Zpos xH)) xH (App Pinj Z xH (App PX Z (App Pc Z (App Zpos xH)) xH (App Pc Z Z0)))) (App Pol Z) (LetIn res_eq0_23332222222323332333333333 (Cast (App eq_refl (App Pol Z) res0_2333222222232333233333333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_2333222222232333233 (App PEadd Z (App PEmul Z (App PEX Z xH) (App PEc Z (App Zpos xH))) (App PEX Z (App xI xH)))) res0_2333222222232333233333333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_2333222222232333233 (App PEadd Z (App PEmul Z (App PEX Z xH) (App PEc Z (App Zpos xH))) (App PEX Z (App xI xH)))) res0_2333222222232333233333333) (LetIn thm0_233322222223233323333333333 (App ring_lemma_233322222223233323333 (App PEadd Z (App PEmul Z (App PEX Z xH) (App PEc Z (App Zpos xH))) (App PEX Z (App xI xH))) res0_2333222222232333233333333 res_eq0_23332222222323332333333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333331 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333332)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) (App PEadd Z (App PEmul Z (App PEX Z xH) (App PEc Z (App Zpos xH))) (App PEX Z (App xI xH)))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333331 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333332)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) res0_2333222222232333233333333)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (Lambda z_2333222222232333233333333332 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322)) l_2333222222)))))) z_2333222222232333233333333332)) (Cast (LetIn H_2333222222232333233333333333 (App Coq.Init.Logic.eq_ind_r (App list (App list ExportProof.set)) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332))) (App ExportProof.sublists ExportProof.set l_2333222222)) (Lambda l_2333222222232333233333333332 (App list (App list ExportProof.set)) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))))) (App (Lambda l_2333222222232333233333333332 (App list (App list ExportProof.set)) (LetIn H_23332222222323332333333333323 (App Coq.Init.Datatypes.list_ind (App list ExportProof.set) (Lambda l_23332222222323332333333333322 (App list (App list ExportProof.set)) (App eq (App list (App list (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_23332222222323332333333333322)) (App Coq.Lists.List.filter (App list (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222))) l_23332222222323332333333333322)))) (App eq_refl (App list (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.filter (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322))) (App nil (App list ExportProof.set))))) (Lambda b_23332222222323332333333333322 (App list ExportProof.set) (Lambda l_233322222223233323333333333222 (App list (App list ExportProof.set)) (Lambda IHl_2333222222232333233333333332222 (App eq (App list (App list (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)) (App Coq.Lists.List.filter (App list (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222))) l_233322222223233323333333333222))) (Cast (Case 1 (Lambda l_23332222222323332333333333322222 (App list ExportProof.set) (App eq (App list (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222222))) (Case 0 (Lambda b_233322222223233323333333333222222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set l_23332222222323332333333333322222)) (CaseBranches (App cons (App list ExportProof.set) l_23332222222323332333333333322222 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)))) (Case 0 (Lambda b_233322222223233323333333333222222 bool (App list (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)))) (CaseMatch (App ExportProof.nonempty (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222222)) l_23332222222323332333333333322222))) (CaseBranches (App cons (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222222)) l_23332222222323332333333333322222) (App Coq.Lists.List.filter (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222222))) l_233322222223233323333333333222))) (App Coq.Lists.List.filter (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222222))) l_233322222223233323333333333222)))))) (CaseMatch b_23332222222323332333333333322) (CaseBranches (Cast IHl_2333222222232333233333333332222 REVERTcast (App eq (App list (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222))) (Case 0 (Lambda b_23332222222323332333333333322222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App nil ExportProof.set))) (CaseBranches (App cons (App list ExportProof.set) (App nil ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)))) (Case 0 (Lambda b_23332222222323332333333333322222 bool (App list (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)))) (CaseMatch (App ExportProof.nonempty (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222)) (App nil ExportProof.set)))) (CaseBranches (App cons (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222)) (App nil ExportProof.set)) (App Coq.Lists.List.filter (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222))) l_233322222223233323333333333222))) (App Coq.Lists.List.filter (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222))) l_233322222223233323333333333222)))))) (Lambda s_23332222222323332333333333322222 ExportProof.set (Lambda b_233322222223233323333333333222222 (App list ExportProof.set) (Cast (App Coq.Init.Logic.eq_trans (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222)) (App Coq.Lists.List.filter (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) l_233322222223233323333333333222))) (App Coq.Init.Logic.f_equal (Prod l_2333222222232333233333333332222221 (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App list (App list (App (Lambda A_23332222222323332333333333322222212 (Sort Set) (Lambda A_233322222223233323333333333222222122 (Sort Set) (Prod out_2333222222232333233333333332222221221 A_23332222222323332333333333322222212 A_233322222223233323333333333222222122))) (Axiom ExportProof.X) bool)))) (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (Lambda f0_2333222222232333233333333332222222 (Prod l_2333222222232333233333333332222221 (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App list (App list (App (Lambda A_23332222222323332333333333322222212 (Sort Set) (Lambda A_233322222223233323333333333222222122 (Sort Set) (Prod out_2333222222232333233333333332222221221 A_23332222222323332333333333322222212 A_233322222223233323333333333222222122))) (Axiom ExportProof.X) bool)))) (App f0_2333222222232333233333333332222222 (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_23332222222323332333333333322222222 (Sort Set) (Lambda A_233322222223233323333333333222222222 (Sort Set) (Prod out_2333222222232333233333333332222222221 A_23332222222323332333333333322222222 A_233322222223233323333333333222222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_23332222222323332333333333322222222 (Sort Set) (Lambda A_233322222223233323333333333222222222 (Sort Set) (Prod out_2333222222232333233333333332222222221 A_23332222222323332333333333322222222 A_233322222223233323333333333222222222))) (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222))) (App eq_refl (Prod l_2333222222232333233333333332222221 (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App list (App list (App (Lambda A_23332222222323332333333333322222212 (Sort Set) (Lambda A_233322222223233323333333333222222122 (Sort Set) (Prod out_2333222222232333233333333332222221221 A_23332222222323332333333333322222212 A_233322222223233323333333333222222122))) (Axiom ExportProof.X) bool)))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222))))) (App Coq.Init.Logic.f_equal (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)) (App Coq.Lists.List.filter (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) l_233322222223233323333333333222)) IHl_2333222222232333233333333332222)) REVERTcast (App eq (App list (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) (Case 0 (Lambda b_2333222222232333233333333332222222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App cons ExportProof.set s_23332222222323332333333333322222 b_233322222223233323333333333222222))) (CaseBranches (App cons (App list ExportProof.set) (App cons ExportProof.set s_23332222222323332333333333322222 b_233322222223233323333333333222222) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)))) (Case 0 (Lambda b_2333222222232333233333333332222222 bool (App list (App list (Prod x_23332222222323332333333333322222221 (Axiom ExportProof.X) bool)))) (CaseMatch (App ExportProof.nonempty (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) (App cons ExportProof.set s_23332222222323332333333333322222 b_233322222223233323333333333222222)))) (CaseBranches (App cons (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) (App cons ExportProof.set s_23332222222323332333333333322222 b_233322222223233323333333333222222)) (App Coq.Lists.List.filter (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) l_233322222223233323333333333222))) (App Coq.Lists.List.filter (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) l_233322222223233323333333333222)))))))))) REVERTcast (App eq (App list (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App cons (App list ExportProof.set) b_23332222222323332333333333322 l_233322222223233323333333333222))) (App Coq.Lists.List.filter (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222))) (App cons (App list ExportProof.set) b_23332222222323332333333333322 l_233322222223233323333333333222)))))))) l_2333222222232333233333333332) (App eq (App list (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332)) (App Coq.Lists.List.filter (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322))) l_2333222222232333233333333332))) (App Coq.Init.Datatypes.list_ind (App list ExportProof.set) (Lambda l_233322222223233323333333333232 (App list (App list ExportProof.set)) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322))) l_233322222223233323333333333232))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333232)))))) (App eq_refl Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333333333232 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333333333232)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App nil (App list ExportProof.set))))))) (Lambda b_233322222223233323333333333232 (App list ExportProof.set) (Lambda l_2333222222232333233333333332322 (App list (App list ExportProof.set)) (Lambda IHl_23332222222323332333333333323222 (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222))) l_2333222222232333233333333332322))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333323222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333323222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322))))) (Cast (Case 1 (Lambda l_233322222223233323333333333232222 (App list ExportProof.set) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (Case 0 (Lambda b_2333222222232333233333333332322222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222)) l_233322222223233323333333333232222))) (CaseBranches (App cons (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222)) l_233322222223233323333333333232222) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222))) l_2333222222232333233333333332322))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222))) l_2333222222232333233333333332322))))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332322222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332322222)) (Case 0 (Lambda b_2333222222232333233333333332322222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set l_233322222223233323333333333232222)) (CaseBranches (App cons (App list ExportProof.set) l_233322222223233323333333333232222 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)))))))) (CaseMatch b_233322222223233323333333333232) (CaseBranches (Cast IHl_23332222222323332333333333323222 REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (Case 0 (Lambda b_233322222223233323333333333232222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222)) (App nil ExportProof.set)))) (CaseBranches (App cons (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222)) (App nil ExportProof.set)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222))) l_2333222222232333233333333332322))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222))) l_2333222222232333233333333332322))))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333333333232222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333333333232222)) (Case 0 (Lambda b_233322222223233323333333333232222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App nil ExportProof.set))) (CaseBranches (App cons (App list ExportProof.set) (App nil ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)))))))) (Lambda x_233322222223233323333333333232222 ExportProof.set (Lambda xs_2333222222232333233333333332322222 (App list ExportProof.set) (Cast (App Coq.Init.Logic.eq_ind Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222))) l_2333222222232333233333333332322))))) (Lambda z_23332222222323332333333333323222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222222)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222222))) l_2333222222232333233333333332322)))))) (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) z_23332222222323332333333333323222222))) (LetIn to_rewrite_23332222222323332333333333323222223 (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222))) l_2333222222232333233333333332322)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222))) l_2333222222232333233333333332322)))))) (App nil Z))) (App list Z) (App (Cast (Cast (Lambda Heq_233322222223233323333333333232222232 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223 (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232))) l_2333222222232333233333333332322)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232))) l_2333222222232333233333333332322)))))) (App nil Z)))) (LetIn list_hyp_2333222222232333233333333332322222323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn list_hyp_norm_23332222222323332333333333323222223233 (App nil (App prod (App prod Z Mon) (App Pol Z))) (App list (App prod (App prod Z Mon) (App Pol Z))) (LetIn list_hyp_norm_eq_233322222223233323333333333232222232333 (Cast (App eq_refl (App list (App prod (App prod Z Mon) (App Pol Z))) list_hyp_norm_23332222222323332333333333323222223233) VMcast (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_2333222222232333233333333332322222323) list_hyp_norm_23332222222323332333333333323222223233)) (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_2333222222232333233333333332322222323) list_hyp_norm_23332222222323332333333333323222223233) (LetIn ring_lemma_2333222222232333233333333332322222323333 (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma2 Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_2333222222232333233333333332322222323 (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323332)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323332))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) I list_hyp_norm_23332222222323332333333333323222223233 list_hyp_norm_eq_233322222223233323333333333232222232333) (Prod pe_2333222222232333233333333332322222323331 (App PExpr Z) (Prod npe_23332222222323332333333333323222223233311 (App Pol Z) (Prod out_233322222223233323333333333232222232333111 (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233 pe_2333222222232333233333333332322222323331) npe_23332222222323332333333333323222223233311) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323331112)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323331112))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) pe_2333222222232333233333333332322222323331) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323331112)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323331112))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) npe_23332222222323332333333333323222223233311))))) (LetIn res_23332222222323332333333333323222223233333 (App PX Z (App Pc Z (App Zneg xH)) xH (App PX Z (App Pc Z (App Zneg xH)) xH (App Pc Z Z0))) (App Pol Z) (LetIn res_eq_233322222223233323333333333232222232333333 (Cast (App eq_refl (App Pol Z) res_23332222222323332333333333323222223233333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233 (App PEopp Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH))))) res_23332222222323332333333333323222223233333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233 (App PEopp Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH))))) res_23332222222323332333333333323222223233333) (LetIn thm_2333222222232333233333333332322222323333333 (App ring_lemma_2333222222232333233333333332322222323333 (App PEopp Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH)))) res_23332222222323332333333333323222223233333 res_eq_233322222223233323333333333232222232333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333332)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333332))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) (App PEopp Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH))))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333332)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333332))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) res_23332222222323332333333333323222223233333)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333332))) l_2333222222232333233333333332322))))) (Lambda z_23332222222323332333333333323222223233333332 Z (App eq Z z_23332222222323332333333333323222223233333332 (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333322))) l_2333222222232333233333333332322)))))))) (LetIn res0_23332222222323332333333333323222223233333333 (App Pinj Z xH (App PX Z (App Pc Z (App Zneg xH)) xH (App PX Z (App Pc Z (App Zpos xH)) xH (App Pc Z Z0)))) (App Pol Z) (LetIn res_eq0_233322222223233323333333333232222232333333333 (Cast (App eq_refl (App Pol Z) res0_23332222222323332333333333323222223233333333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233 (App PEadd Z (App PEX Z (App xI xH)) (App PEopp Z (App PEX Z (App xO xH))))) res0_23332222222323332333333333323222223233333333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233 (App PEadd Z (App PEX Z (App xI xH)) (App PEopp Z (App PEX Z (App xO xH))))) res0_23332222222323332333333333323222223233333333) (LetIn thm0_2333222222232333233333333332322222323333333333 (App ring_lemma_2333222222232333233333333332322222323333 (App PEadd Z (App PEX Z (App xI xH)) (App PEopp Z (App PEX Z (App xO xH)))) res0_23332222222323332333333333323222223233333333 res_eq0_233322222223233323333333333232222232333333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333332)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333332))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) (App PEadd Z (App PEX Z (App xI xH)) (App PEopp Z (App PEX Z (App xO xH))))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333332)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333332))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) res0_23332222222323332333333333323222223233333333)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332))) l_2333222222232333233333333332322))))) (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (Lambda z_23332222222323332333333333323222223233333333332 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333322)) xs_2333222222232333233333333332322222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333322))) l_2333222222232333233333333332322))))) z_23332222222323332333333333323222223233333333332)) (LetIn H_23332222222323332333333333323222223233333333333 (Cast (Cast (App Coq.Init.Logic.eq_ind_r nat (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222) (Lambda n_23332222222323332333333333323222223233333333332 nat (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333322)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign n_23332222222323332333333333323222223233333333332)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))))) (LetIn to_rewrite_23332222222323332333333333323222223233333333333 (App cons Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))) (App nil Z))) (App list Z) (App (Cast (Cast (Lambda Heq_233322222223233323333333333232222232333333333332 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223233333333333 (App cons Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))) (App nil Z)))) (LetIn list_hyp_2333222222232333233333333332322222323333333333323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn list_hyp_norm_23332222222323332333333333323222223233333333333233 (App nil (App prod (App prod Z Mon) (App Pol Z))) (App list (App prod (App prod Z Mon) (App Pol Z))) (LetIn list_hyp_norm_eq_233322222223233323333333333232222232333333333332333 (Cast (App eq_refl (App list (App prod (App prod Z Mon) (App Pol Z))) list_hyp_norm_23332222222323332333333333323222223233333333333233) VMcast (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_2333222222232333233333333332322222323333333333323) list_hyp_norm_23332222222323332333333333323222223233333333333233)) (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_2333222222232333233333333332322222323333333333323) list_hyp_norm_23332222222323332333333333323222223233333333333233) (LetIn ring_lemma_2333222222232333233333333332322222323333333333323333 (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma2 Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_2333222222232333233333333332322222323333333333323 (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323332)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) I list_hyp_norm_23332222222323332333333333323222223233333333333233 list_hyp_norm_eq_233322222223233323333333333232222232333333333332333) (Prod pe_2333222222232333233333333332322222323333333333323331 (App PExpr Z) (Prod npe_23332222222323332333333333323222223233333333333233311 (App Pol Z) (Prod out_233322222223233323333333333232222232333333333332333111 (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233333333333233 pe_2333222222232333233333333332322222323333333333323331) npe_23332222222323332333333333323222223233333333333233311) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323331112)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) pe_2333222222232333233333333332322222323333333333323331) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323331112)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) npe_23332222222323332333333333323222223233333333333233311))))) (LetIn res_23332222222323332333333333323222223233333333333233333 (App PX Z (App Pinj Z xH (App PX Z (App Pc Z (App Zpos xH)) xH (App Pc Z Z0))) xH (App Pc Z Z0)) (App Pol Z) (LetIn res_eq_233322222223233323333333333232222232333333333332333333 (Cast (App eq_refl (App Pol Z) res_23332222222323332333333333323222223233333333333233333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233333333333233 (App PEmul Z (App PEX Z xH) (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))) res_23332222222323332333333333323222223233333333333233333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233333333333233 (App PEmul Z (App PEX Z xH) (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))) res_23332222222323332333333333323222223233333333333233333) (LetIn thm_2333222222232333233333333332322222323333333333323333333 (App ring_lemma_2333222222232333233333333332322222323333333333323333 (App PEmul Z (App PEX Z xH) (App PEopp Z (App PEopp Z (App PEX Z (App xO xH))))) res_23332222222323332333333333323222223233333333333233333 res_eq_233322222223233323333333333232222232333333333332333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333332)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) (App PEmul Z (App PEX Z xH) (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333332)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) res_23332222222323332333333333323222223233333333333233333)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))) (Lambda z_23332222222323332333333333323222223233333333333233333332 Z (App eq Z z_23332222222323332333333333323222223233333333333233333332 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))))) (LetIn res0_23332222222323332333333333323222223233333333333233333333 (App Pinj Z xH (App PX Z (App Pinj Z xH (App PX Z (App Pc Z (App Zpos xH)) xH (App Pc Z Z0))) xH (App Pc Z Z0))) (App Pol Z) (LetIn res_eq0_233322222223233323333333333232222232333333333332333333333 (Cast (App eq_refl (App Pol Z) res0_23332222222323332333333333323222223233333333333233333333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233333333333233 (App PEopp Z (App PEmul Z (App PEX Z (App xI xH)) (App PEopp Z (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))))) res0_23332222222323332333333333323222223233333333333233333333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233333333333233 (App PEopp Z (App PEmul Z (App PEX Z (App xI xH)) (App PEopp Z (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))))) res0_23332222222323332333333333323222223233333333333233333333) (LetIn thm0_2333222222232333233333333332322222323333333333323333333333 (App ring_lemma_2333222222232333233333333332322222323333333333323333 (App PEopp Z (App PEmul Z (App PEX Z (App xI xH)) (App PEopp Z (App PEopp Z (App PEopp Z (App PEX Z (App xO xH))))))) res0_23332222222323332333333333323222223233333333333233333333 res_eq0_233322222223233323333333333232222232333333333332333333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333333332)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) (App PEopp Z (App PEmul Z (App PEX Z (App xI xH)) (App PEopp Z (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333333332)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) res0_23332222222323332333333333323222223233333333333233333333)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (Lambda z_23332222222323332333333333323222223233333333333233333333332 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332333333333322)) xs_2333222222232333233333333332322222)))) (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))) z_23332222222323332333333333323222223233333333333233333333332)) (LetIn H_23332222222323332333333333323222223233333333333233333333333 (Cast (App ExportProof.cardinal_set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332)) xs_2333222222232333233333333332322222)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_2333222222232333233333333332322222)) (App Coq.Init.Datatypes.list_ind ExportProof.set (Lambda xs_23332222222323332333333333323222223233333333333233333333332 (App list ExportProof.set) (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332333333333322)) xs_23332222222323332333333333323222223233333333333233333333332)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_23332222222323332333333333323222223233333333333233333333332)))) (Cast (Cast (Lambda x0_23332222222323332333333333323222223233333333333233333333332 (Axiom ExportProof.X) (Cast (LetIn s_233322222223233323333333333232222232333333333332333333333323 (App a_233322222 x0_23332222222323332333333333323222223233333333333233333333332) bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333232 bool (App eq bool (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333232) (CaseBranches (App x_233322222223233323333333333232222 x0_23332222222323332333333333323222223233333333333233333333332) false)) (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332322 bool bool) (CaseMatch (App x_233322222223233323333333333232222 x0_23332222222323332333333333323222223233333333333233333333332)) (CaseBranches b_2333222222232333233333333332322222323333333333323333333333232 false)))) (CaseMatch s_233322222223233323333333333232222232333333333332333333333323) (CaseBranches (LetIn s_2333222222232333233333333332322222323333333333323333333333233 (App x_233322222223233323333333333232222 x0_23332222222323332333333333323222223233333333333233333333332) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332332 bool (App eq bool b_23332222222323332333333333323222223233333333333233333333332332 (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333323322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332332) (CaseBranches true false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333233) (CaseBranches (App eq_refl bool true) (App eq_refl bool false)))) (LetIn s_2333222222232333233333333332322222323333333333323333333333233 (App x_233322222223233323333333333232222 x0_23332222222323332333333333323222223233333333333233333333332) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332332 bool (App eq bool false (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333323322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332332) (CaseBranches false false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333233) (CaseBranches (App eq_refl bool false) (App eq_refl bool false))))))) REVERTcast (App eq bool (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222 x0_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 a_233322222 x0_23332222222323332333333333323222223233333333333233333333332)))) REVERTcast (App ExportProof.set_eq (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App ExportProof.binary_intersection x_233322222223233323333333333232222 a_233322222))) REVERTcast (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332)) (App nil ExportProof.set))) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App nil ExportProof.set))))) (Lambda x'_23332222222323332333333333323222223233333333333233333333332 ExportProof.set (Lambda xs_233322222223233323333333333232222232333333333332333333333322 (App list ExportProof.set) (Lambda IHxs_2333222222232333233333333332322222323333333333323333333333222 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333333333222)) xs_233322222223233323333333333232222232333333333332333333333322)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (Cast (App (Lambda lemma_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332222)) xs_233322222223233323333333333232222232333333333332333333333322)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.subrelation_proper (Prod A_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Sort Prop))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Sort Prop)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff)) ExportProof.set_eq (App Coq.Classes.Morphisms.PER_morphism ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PER ExportProof.set ExportProof.set_eq ExportProof.Set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Sort Prop) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332333333333322222)) xs_233322222223233323333333333232222232333333333332333333333322))) (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222111 (Axiom ExportProof.X) bool))) (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332)) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332333333333322222)) xs_233322222223233323333333333232222232333333333332333333333322)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)) lemma_23332222222323332333333333323222223233333333333233333333332222) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Reflexive (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)))))) IHxs_2333222222232333233333333332322222323333333333323333333333222 (LetIn H_23332222222323332333333333323222223233333333333233333333332223 (App Coq.Init.Datatypes.list_ind ExportProof.set (Lambda xs_23332222222323332333333333323222223233333333333233333333332222 (App list ExportProof.set) (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_23332222222323332333333333323222223233333333333233333333332222) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_23332222222323332333333333323222223233333333333233333333332222)))) (Cast (Cast (Lambda x_23332222222323332333333333323222223233333333333233333333332222 (Axiom ExportProof.X) (Cast (LetIn s_233322222223233323333333333232222232333333333332333333333322223 (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222) bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333222232 bool (App eq bool b_2333222222232333233333333332322222323333333333323333333333222232 (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222232) (CaseBranches b_2333222222232333233333333332322222323333333333323333333333222232 false)))) (CaseMatch s_233322222223233323333333333232222232333333333332333333333322223) (CaseBranches (App eq_refl bool true) (App eq_refl bool false)))) REVERTcast (App eq bool (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222) (App ExportProof.binary_intersection a_233322222 a_233322222 x_23332222222323332333333333323222223233333333333233333333332222)))) REVERTcast (App ExportProof.set_eq a_233322222 (App ExportProof.binary_intersection a_233322222 a_233322222))) REVERTcast (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App nil ExportProof.set)) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App nil ExportProof.set))))) (Lambda a0_23332222222323332333333333323222223233333333333233333333332222 ExportProof.set (Lambda xs_233322222223233323333333333232222232333333333332333333333322222 (App list ExportProof.set) (Lambda IHxs_2333222222232333233333333332322222323333333333323333333333222222 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (Cast (App (Lambda lemma_23332222222323332333333333323222223233333333333233333333332222222 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (App Coq.Classes.Morphisms.subrelation_proper (Prod A_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Sort Prop))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Sort Prop)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff)) ExportProof.set_eq (App Coq.Classes.Morphisms.PER_morphism ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PER ExportProof.set ExportProof.set_eq ExportProof.Set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Sort Prop) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)) (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) a0_23332222222323332333333333323222223233333333333233333333332222 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) a0_23332222222323332333333333323222223233333333333233333333332222) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)) lemma_23332222222323332333333333323222223233333333333233333333332222222) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq)) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq)))) a_233322222 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Reflexive a_233322222) (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)) (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) a0_23332222222323332333333333323222223233333333333233333333332222 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) a0_23332222222323332333333333323222223233333333333233333333332222) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)) lemma_23332222222323332333333333323222223233333333333233333333332222222)))) IHxs_2333222222232333233333333332322222323333333333323333333333222222 (Cast (Lambda x_23332222222323332333333333323222223233333333333233333333332222222 (Axiom ExportProof.X) (Cast (LetIn s_233322222223233323333333333232222232333333333332333333333322222223 (App a0_23332222222323332333333333323222223233333333333233333333332222 x_23332222222323332333333333323222223233333333333233333333332222222) bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333222222232 bool (App eq bool (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222222322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222222232) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222222322 bool bool) (CaseMatch (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222222)) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332222222321 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222321 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322222223211 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332222222322 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322222223222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223221 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222222232221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332222222322) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322222223222 (Prod out_233322222223233323333333333232222232333333333332333333333322222223221 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222222232222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222222232221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332222222322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223222222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322222223222 x_23332222222323332333333333323222223233333333333233333333332222222322222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222222232222 x_23332222222323332333333333323222223233333333333233333333332222222322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322222 x_23332222222323332333333333323222223233333333333233333333332222222) false)) false)) (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222222322 bool bool) (CaseMatch (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222222)) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222222322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222222232) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222222322 bool bool) (CaseMatch (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222222)) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332222222321 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222321 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322222223211 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332222222322 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322222223222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223221 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222222232221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332222222322) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322222223222 (Prod out_233322222223233323333333333232222232333333333332333333333322222223221 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222222232222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222222232221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332222222322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223222222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322222223222 x_23332222222323332333333333323222223233333333333233333333332222222322222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222222232222 x_23332222222323332333333333323222223233333333333233333333332222222322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322222 x_23332222222323332333333333323222223233333333333233333333332222222) false)) false)) false)))) (CaseMatch s_233322222223233323333333333232222232333333333332333333333322222223) (CaseBranches (LetIn s_2333222222232333233333333332322222323333333333323333333333222222233 (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222222) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332222222332 bool (App eq bool (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332222222332) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_233322222223233323333333333232222232333333333332333333333322222223321 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222222233211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223233323333333333232222232333333333332333333333322222223322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232333233333333332322222323333333333323333333333222222233222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332222222332221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223233323333333333232222232333333333332333333333322222223322) (CaseBranches a_233322222 (Lambda b_2333222222232333233333333332322222323333333333323333333333222222233222 (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323332333333333323222223233333333333233333333332222222332222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222332221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223233323333333333232222232333333333332333333333322222223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222222233222222 bool bool) (CaseMatch (App b_2333222222232333233333333332322222323333333333323333333333222222233222 x_233322222223233323333333333232222232333333333332333333333322222223322222)) (CaseBranches (App fold_right t_23332222222323332333333333323222223233333333333233333333332222222332222 x_233322222223233323333333333232222232333333333332333333333322222223322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322222 x_23332222222323332333333333323222223233333333333233333333332222222) false)) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332222222332) (CaseBranches (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332222222332) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_233322222223233323333333333232222232333333333332333333333322222223321 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222222233211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223233323333333333232222232333333333332333333333322222223322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232333233333333332322222323333333333323333333333222222233222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332222222332221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223233323333333333232222232333333333332333333333322222223322) (CaseBranches a_233322222 (Lambda b_2333222222232333233333333332322222323333333333323333333333222222233222 (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323332333333333323222223233333333333233333333332222222332222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222332221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223233323333333333232222232333333333332333333333322222223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222222233222222 bool bool) (CaseMatch (App b_2333222222232333233333333332322222323333333333323333333333222222233222 x_233322222223233323333333333232222232333333333332333333333322222223322222)) (CaseBranches (App fold_right t_23332222222323332333333333323222223233333333333233333333332222222332222 x_233322222223233323333333333232222232333333333332333333333322222223322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322222 x_23332222222323332333333333323222223233333333333233333333332222222) false)) false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333222222233) (CaseBranches (App eq_refl bool (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332222222331 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222331 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322222223311 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332222222332 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222331 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322222223322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332222222332) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322222223322 (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222222233222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332222222332222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223322222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322222223322 x_23332222222323332333333333323222223233333333333233333333332222222332222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222222233222 x_23332222222323332333333333323222223233333333333233333333332222222332222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322222 x_23332222222323332333333333323222223233333333333233333333332222222)) (App eq_refl bool false)))) (LetIn s_2333222222232333233333333332322222323333333333323333333333222222233 (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222222) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332222222332 bool (App eq bool false (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332222222332) (CaseBranches false false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333222222233) (CaseBranches (App eq_refl bool false) (App eq_refl bool false))))))) REVERTcast (App eq bool (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)) x_23332222222323332333333333323222223233333333333233333333332222222) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) x_23332222222323332333333333323222223233333333333233333333332222222)))) REVERTcast (App ExportProof.set_eq (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))))))) REVERTcast (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App cons ExportProof.set a0_23332222222323332333333333323222223233333333333233333333332222 xs_233322222223233323333333333232222232333333333332333333333322222)) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App cons ExportProof.set a0_23332222222323332333333333323222223233333333333233333333332222 xs_233322222223233323333333333232222232333333333332333333333322222)))))))) xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App (Lambda H_233322222223233323333333333232222232333333333332333333333322232 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App (Lambda lemma_2333222222232333233333333332322222323333333333323333333333222322 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.subrelation_proper (Prod A_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Sort Prop))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Sort Prop)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff)) ExportProof.set_eq (App Coq.Classes.Morphisms.PER_morphism ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PER ExportProof.set ExportProof.set_eq ExportProof.Set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Sort Prop)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Sort Prop)) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Sort Prop) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq)) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq)))) (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Reflexive (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) x_233322222223233323333333333232222 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) x_233322222223233323333333333232222) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)) lemma_2333222222232333233333333332322222323333333333323333333333222322)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq)) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq)))) x_233322222223233323333333333232222 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Reflexive x_233322222223233323333333333232222) (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)) (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) x'_23332222222323332333333333323222223233333333333233333333332) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)) lemma_2333222222232333233333333332322222323333333333323333333333222322)))) H_233322222223233323333333333232222232333333333332333333333322232 (Cast (Lambda x0_2333222222232333233333333332322222323333333333323333333333222322 (Axiom ExportProof.X) (Cast (LetIn s_23332222222323332333333333323222223233333333333233333333332223223 (App a_233322222 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_233322222223233323333333333232222232333333333332333333333322232232 bool (App eq bool (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch b_233322222223233323333333333232222232333333333332333333333322232232) (CaseBranches (App x'_23332222222323332333333333323222223233333333333233333333332 x0_2333222222232333233333333332322222323333333333323333333333222322) false))) (CaseBranches (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch b_233322222223233323333333333232222232333333333332333333333322232232) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_2333222222232333233333333332322222323333333333323333333333222322321 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322321 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332223223211 (Axiom ExportProof.X) bool)) (Lambda l_2333222222232333233333333332322222323333333333323333333333222322322 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_23332222222323332333333333323222223233333333333233333333332223223222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223221 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322232232221 (Axiom ExportProof.X) bool)) (CaseMatch l_2333222222232333233333333332322222323333333333323333333333222322322) (CaseBranches a_233322222 (Lambda b_23332222222323332333333333323222223233333333333233333333332223223222 (Prod out_23332222222323332333333333323222223233333333333233333333332223223221 (Axiom ExportProof.X) bool) (Lambda t_233322222223233323333333333232222232333333333332333333333322232232222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232232221 (Axiom ExportProof.X) bool)) (Lambda x_2333222222232333233333333332322222323333333333323333333333222322322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223222222 bool bool) (CaseMatch (App b_23332222222323332333333333323222223233333333333233333333332223223222 x_2333222222232333233333333332322222323333333333323333333333222322322222)) (CaseBranches (App fold_right t_233322222223233323333333333232222232333333333332333333333322232232222 x_2333222222232333233333333332322222323333333333323333333333222322322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)) false)) false)) (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch (App x'_23332222222323332333333333323222223233333333333233333333332 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch b_233322222223233323333333333232222232333333333332333333333322232232) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_2333222222232333233333333332322222323333333333323333333333222322321 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322321 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332223223211 (Axiom ExportProof.X) bool)) (Lambda l_2333222222232333233333333332322222323333333333323333333333222322322 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_23332222222323332333333333323222223233333333333233333333332223223222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223221 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322232232221 (Axiom ExportProof.X) bool)) (CaseMatch l_2333222222232333233333333332322222323333333333323333333333222322322) (CaseBranches a_233322222 (Lambda b_23332222222323332333333333323222223233333333333233333333332223223222 (Prod out_23332222222323332333333333323222223233333333333233333333332223223221 (Axiom ExportProof.X) bool) (Lambda t_233322222223233323333333333232222232333333333332333333333322232232222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232232221 (Axiom ExportProof.X) bool)) (Lambda x_2333222222232333233333333332322222323333333333323333333333222322322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223222222 bool bool) (CaseMatch (App b_23332222222323332333333333323222223233333333333233333333332223223222 x_2333222222232333233333333332322222323333333333323333333333222322322222)) (CaseBranches (App fold_right t_233322222223233323333333333232222232333333333332333333333322232232222 x_2333222222232333233333333332322222323333333333323333333333222322322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)) false)) false)))) (CaseMatch s_23332222222323332333333333323222223233333333333233333333332223223) (CaseBranches (LetIn s_233322222223233323333333333232222232333333333332333333333322232233 (App x'_23332222222323332333333333323222223233333333333233333333332 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333222322332 bool (App eq bool (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222322332) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332223223321 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223321 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322232233211 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332223223322 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322232233222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233221 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222322332221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332223223322) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322232233222 (Prod out_233322222223233323333333333232222232333333333332333333333322232233221 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222322332222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322332221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332223223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233222222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322232233222 x_23332222222323332333333333323222223233333333333233333333332223223322222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222322332222 x_23332222222323332333333333323222223233333333333233333333332223223322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)) false)) (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222322332) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332223223321 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223321 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322232233211 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332223223322 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322232233222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233221 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222322332221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332223223322) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322232233222 (Prod out_233322222223233323333333333232222232333333333332333333333322232233221 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222322332222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322332221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332223223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233222222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322232233222 x_23332222222323332333333333323222223233333333333233333333332223223322222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222322332222 x_23332222222323332333333333323222223233333333333233333333332223223322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)) false)))) (CaseMatch s_233322222223233323333333333232222232333333333332333333333322232233) (CaseBranches (LetIn s_2333222222232333233333333332322222323333333333323333333333222322333 (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332223223332 bool (App eq bool (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332223223332) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_233322222223233323333333333232222232333333333332333333333322232233321 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222322333211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223233323333333333232222232333333333332333333333322232233322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232333233333333332322222323333333333323333333333222322333222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332223223332221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223233323333333333232222232333333333332333333333322232233322) (CaseBranches a_233322222 (Lambda b_2333222222232333233333333332322222323333333333323333333333222322333222 (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323332333333333323222223233333333333233333333332223223332222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223332221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223233323333333333232222232333333333332333333333322232233322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322333222222 bool bool) (CaseMatch (App b_2333222222232333233333333332322222323333333333323333333333222322333222 x_233322222223233323333333333232222232333333333332333333333322232233322222)) (CaseBranches (App fold_right t_23332222222323332333333333323222223233333333333233333333332223223332222 x_233322222223233323333333333232222232333333333332333333333322232233322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332223223332) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_233322222223233323333333333232222232333333333332333333333322232233321 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222322333211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223233323333333333232222232333333333332333333333322232233322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232333233333333332322222323333333333323333333333222322333222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332223223332221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223233323333333333232222232333333333332333333333322232233322) (CaseBranches a_233322222 (Lambda b_2333222222232333233333333332322222323333333333323333333333222322333222 (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323332333333333323222223233333333333233333333332223223332222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223332221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223233323333333333232222232333333333332333333333322232233322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322333222222 bool bool) (CaseMatch (App b_2333222222232333233333333332322222323333333333323333333333222322333222 x_233322222223233323333333333232222232333333333332333333333322232233322222)) (CaseBranches (App fold_right t_23332222222323332333333333323222223233333333333233333333332223223332222 x_233322222223233323333333333232222232333333333332333333333322232233322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333222322333) (CaseBranches (App eq_refl bool (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332223223331 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223331 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322232233311 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332223223332 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223331 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322232233322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332223223332) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322232233322 (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222322333222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332223223332222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233322222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322232233322 x_23332222222323332333333333323222223233333333333233333333332223223332222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222322333222 x_23332222222323332333333333323222223233333333333233333333332223223332222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322)) (App eq_refl bool false)))) (LetIn s_2333222222232333233333333332322222323333333333323333333333222322333 (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332223223332 bool (App eq bool false (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332223223332) (CaseBranches false false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333222322333) (CaseBranches (App eq_refl bool false) (App eq_refl bool false))))))) (LetIn s_233322222223233323333333333232222232333333333332333333333322232233 (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333222322332 bool (App eq bool false (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222322332) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch (App x'_23332222222323332333333333323222223233333333333233333333332 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches false false)) false)))) (CaseMatch s_233322222223233323333333333232222232333333333332333333333322232233) (CaseBranches (LetIn s_2333222222232333233333333332322222323333333333323333333333222322333 (App x'_23332222222323332333333333323222223233333333333233333333332 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332223223332 bool (App eq bool false (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332223223332) (CaseBranches false false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333222322333) (CaseBranches (App eq_refl bool false) (App eq_refl bool false)))) (App eq_refl bool false))))))) REVERTcast (App eq bool (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) x0_2333222222232333233333333332322222323333333333323333333333222322) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) x0_2333222222232333233333333332322222323333333333323333333333222322)))) REVERTcast (App ExportProof.set_eq (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)))) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)))))))) H_23332222222323332333333333323222223233333333333233333333332223))) REVERTcast (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332222)) (App cons ExportProof.set x'_23332222222323332333333333323222223233333333333233333333332 xs_233322222223233323333333333232222232333333333332333333333322))) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App cons ExportProof.set x'_23332222222323332333333333323222223233333333333233333333332 xs_233322222223233323333333333232222232333333333332333333333322)))))))) xs_2333222222232333233333333332322222)) REVERTcast (App eq Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))))) (App eq Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (App (Lambda H_233322222223233323333333333232222232333333333332333333333332 (App eq Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332333333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332333333333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (App Coq.Init.Logic.eq_ind_r Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (Lambda z_2333222222232333233333333332322222323333333333323333333333322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul z_2333222222232333233333333332322222323333333333323333333333322 (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))))) (Cast (LetIn hyp_list_2333222222232333233333333332322222323333333333323333333333323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn fv_list_23332222222323332333333333323222223233333333333233333333333233 (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App nil Z))) (App list Z) (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma1 Coq.setoid_ring.Ring_tac.ring_subst_niter fv_list_23332222222323332333333333323222223233333333333233333333333233 hyp_list_2333222222232333233333333332322222323333333333323333333333323 (App PEmul Z (App PEX Z xH) (App PEX Z (App xO xH))) (App PEmul Z (App PEX Z (App xO xH)) (App PEX Z xH)) I (Cast (App eq_refl bool true) VMcast (App eq bool (LetIn lmp_233322222223233323333333333232222232333333333332333333333332333 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem hyp_list_2333222222232333233333333332322222323333333333323333333333323) (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.Peq Z Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_233322222223233323333333333232222232333333333332333333333332333 (App PEmul Z (App PEX Z xH) (App PEX Z (App xO xH)))) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_233322222223233323333333333232222232333333333332333333333332333 (App PEmul Z (App PEX Z (App xO xH)) (App PEX Z xH))))) true))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))))) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333333333322)) xs_2333222222232333233333333332322222)))) H_233322222223233323333333333232222232333333333332333333333332)) H_23332222222323332333333333323222223233333333333233333333333)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))) thm0_2333222222232333233333333332322222323333333333323333333333)))) (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333332)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) thm_2333222222232333233333333332322222323333333333323333333))))))))) REVERTcast (Prod out_233322222223233323333333333232222232333333333331 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223233333333333 (App cons Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))) (App nil Z)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333312)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)))))))))) REVERTcast (Prod out_233322222223233323333333333232222232333333333331 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223233333333333 to_rewrite_23332222222323332333333333323222223233333333333) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333312)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)))))))))) (App eq_refl (App list Z) to_rewrite_23332222222323332333333333323222223233333333333))) (App Coq.Init.Datatypes.length ExportProof.set (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222)) (App Coq.Lists.List.map_length ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222)) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.alternating_sign (App Coq.Init.Nat.add (App S O) (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222)))))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App ExportProof.alternating_sign (App Coq.Init.Nat.add (App S O) (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))))))) REVERTcast (App eq Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))))) (App eq Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (App (Lambda H_233322222223233323333333333232222232333333333332 (App eq Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332)) xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (Lambda z_2333222222232333233333333332322222323333333333322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.opp z_2333222222232333233333333332322222323333333333322) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333222))) l_2333222222232333233333333332322))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333222))) l_2333222222232333233333333332322))))) (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))))) (Cast (LetIn hyp_list_2333222222232333233333333332322222323333333333323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn fv_list_23332222222323332333333333323222223233333333333233 (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333232))) l_2333222222232333233333333332322)))) (App nil Z))) (App list Z) (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma1 Coq.setoid_ring.Ring_tac.ring_subst_niter fv_list_23332222222323332333333333323222223233333333333233 hyp_list_2333222222232333233333333332322222323333333333323 (App PEsub Z (App PEopp Z (App PEopp Z (App PEX Z xH))) (App PEX Z (App xO xH))) (App PEadd Z (App PEopp Z (App PEX Z (App xO xH))) (App PEX Z xH)) I (Cast (App eq_refl bool true) VMcast (App eq bool (LetIn lmp_233322222223233323333333333232222232333333333332333 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem hyp_list_2333222222232333233333333332322222323333333333323) (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.Peq Z Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_233322222223233323333333333232222232333333333332333 (App PEsub Z (App PEopp Z (App PEopp Z (App PEX Z xH))) (App PEX Z (App xO xH)))) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_233322222223233323333333333232222232333333333332333 (App PEadd Z (App PEopp Z (App PEX Z (App xO xH))) (App PEX Z xH))))) true))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333322))) l_2333222222232333233333333332322))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333322))) l_2333222222232333233333333332322))))) (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))))) (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333322)) xs_2333222222232333233333333332322222))) H_233322222223233323333333333232222232333333333332)) H_23332222222323332333333333323222223233333333333)) (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332))) l_2333222222232333233333333332322)))))) thm0_2333222222232333233333333332322222323333333333)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333332)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333332))) l_2333222222232333233333333332322)))))) thm_2333222222232333233333333332322222323333333))))))))) REVERTcast (Prod out_233322222223233323333333333232222231 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223 (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232))) l_2333222222232333233333333332322)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232))) l_2333222222232333233333333332322)))))) (App nil Z)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312))) l_2333222222232333233333333332322)))))) (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312))) l_2333222222232333233333333332322))))))))) REVERTcast (Prod out_233322222223233323333333333232222231 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223 to_rewrite_23332222222323332333333333323222223) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312))) l_2333222222232333233333333332322)))))) (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312))) l_2333222222232333233333333332322))))))))) (App eq_refl (App list Z) to_rewrite_23332222222323332333333333323222223))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333323222222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333323222222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)))) IHl_23332222222323332333333333323222) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (Case 0 (Lambda b_23332222222323332333333333323222222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222)) (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (CaseBranches (App cons (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222)) (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222))) l_2333222222232333233333333332322))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222))) l_2333222222232333233333333332322))))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333323222222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333323222222)) (Case 0 (Lambda b_23332222222323332333333333323222222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (CaseBranches (App cons (App list ExportProof.set) (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)))))))))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222))) (App cons (App list ExportProof.set) b_233322222223233323333333333232 l_2333222222232333233333333332322)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333333333232222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333333333232222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App cons (App list ExportProof.set) b_233322222223233323333333333232 l_2333222222232333233333333332322)))))))))) l_2333222222232333233333333332))) (App ExportProof.sublists ExportProof.set l_2333222222)) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332)) l_2333222222)) (App ExportProof.sublists_map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332)) l_2333222222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App (LetIn H_23332222222323332333333333333 (App eq_refl Z (App ExportProof.cardinal a_233322222)) (App eq Z (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal a_233322222)) (App (Lambda H_233322222223233323333333333332 (App eq Z (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal a_233322222)) (Lambda H0_2333222222232333233333333333322 (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333333321 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333333322)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333333322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333333322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App Coq.Init.Logic.eq_trans Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (App (Lambda A_23332222222323332333333333333222 (Sort Set) (Lambda A_233322222223233323333333333332222 (Sort Set) (Prod out_2333222222232333233333333333322221 A_23332222222323332333333333333222 A_233322222223233323333333333332222))) (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333333222)) l_2333222222))))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (App (Lambda A_23332222222323332333333333333222 (Sort Set) (Lambda A_233322222223233323333333333332222 (Sort Set) (Prod out_2333222222232333233333333333322221 A_23332222222323332333333333333222 A_233322222223233323333333333332222))) (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333333222)) l_2333222222))))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333333222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333333222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App Coq.Init.Logic.f_equal (Prod y_23332222222323332333333333333221 Z Z) Z (Lambda f0_23332222222323332333333333333222 (Prod y_23332222222323332333333333333221 Z Z) (App f0_23332222222323332333333333333222 (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (App (Lambda A_233322222223233323333333333332222 (Sort Set) (Lambda A_2333222222232333233333333333322222 (Sort Set) (Prod out_23332222222323332333333333333222221 A_233322222223233323333333333332222 A_2333222222232333233333333333322222))) (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333332222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333332222)) l_2333222222)))))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222)) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222)) (App eq_refl (Prod y_23332222222323332333333333333221 Z Z) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222)))) (App Coq.Init.Logic.f_equal Z Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222)) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (App (Lambda A_23332222222323332333333333333222 (Sort Set) (Lambda A_233322222223233323333333333332222 (Sort Set) (Prod out_2333222222232333233333333333322221 A_23332222222323332333333333333222 A_233322222223233323333333333332222))) (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333333222)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333333222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333333222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) H0_2333222222232333233333333333322)))) H_23332222222323332333333333333)) H_2333222222232333233333333333)) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332)) l_2333222222)))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) thm0_233322222223233323333333333)))))))))))) REVERTcast (Prod out_23332222222323331 (App eq (App list Z) to_rewrite_2333222222232333 (App cons Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323331 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332)) l_2333222222)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App nil Z)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233311 (Axiom ExportProof.X) bool) (Lambda b_233322222223233312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233312)) l_2333222222)))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233312 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233312)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))))))) REVERTcast (Prod out_23332222222323331 (App eq (App list Z) to_rewrite_2333222222232333 to_rewrite_2333222222232333) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233311 (Axiom ExportProof.X) bool) (Lambda b_233322222223233312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233312)) l_2333222222)))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233312 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233312)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))))))) (App eq_refl (App list Z) to_rewrite_2333222222232333))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App nil ExportProof.set)))) (App ExportProof.alternating_sign (App Coq.Init.Nat.add (App S O) (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set a_233322222 (App nil ExportProof.set)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)))))) (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App nil ExportProof.set))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App cons (App list ExportProof.set) (App nil ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (App ExportProof.sublists ExportProof.set l_2333222222) (App ExportProof.sublists_proper ExportProof.set l_2333222222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App ExportProof.sublists ExportProof.set l_2333222222))) (App ExportProof.filter_map_always (App list ExportProof.set) (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App ExportProof.sublists ExportProof.set l_2333222222) (Lambda x_2333222222232332 (App list ExportProof.set) (App eq_refl bool true)))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App ExportProof.sublists ExportProof.set l_2333222222))))))) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App (Lambda H_23332222222323332 (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332)) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App Coq.Init.Logic.eq_ind Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (Lambda z_233322222223233322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) z_233322222223233322))) (Cast (LetIn hyp_list_233322222223233323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn fv_list_2333222222232333233 (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323)))) (App nil Z)))) (App list Z) (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma1 Coq.setoid_ring.Ring_tac.ring_subst_niter fv_list_2333222222232333233 hyp_list_233322222223233323 (App PEsub Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH))) (App PEX Z (App xI xH))) (App PEadd Z (App PEX Z (App xO xH)) (App PEsub Z (App PEX Z xH) (App PEX Z (App xI xH)))) I (Cast (App eq_refl bool true) VMcast (App eq bool (LetIn lmp_23332222222323332333 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem hyp_list_233322222223233323) (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.Peq Z Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_23332222222323332333 (App PEsub Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH))) (App PEX Z (App xI xH)))) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_23332222222323332333 (App PEadd Z (App PEX Z (App xO xH)) (App PEsub Z (App PEX Z xH) (App PEX Z (App xI xH))))))) true))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323)))))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233322)) (App ExportProof.sublists ExportProof.set l_2333222222))))) H_23332222222323332)) H_2333222222232333)) (App ExportProof.cardinal (App ExportProof.list_union la_23332222222323)) (App IHn_233322 la_23332222222323 (Cast (App Coq.Init.Logic.eq_ind_r nat (App Coq.Init.Datatypes.length ExportProof.set l_2333222222) (Lambda n_2333222222232332 nat (App eq nat n_23332 n_2333222222232332)) En_2333222222232 (App Coq.Init.Datatypes.length (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)) (App Coq.Lists.List.map_length ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)) REVERTcast (App eq nat n_23332 (App Coq.Init.Datatypes.length ExportProof.set la_23332222222323))))) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222))) H_233322222223233))) (App ExportProof.cardinal (App ExportProof.list_union l_2333222222)) (App IHn_233322 l_2333222222 En_2333222222232)) (App ExportProof.sum (App Coq.Init.Datatypes.app Z (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))) (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App ExportProof.sum_app (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))) (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Init.Datatypes.app (App list ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App Coq.Lists.List.map_app (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Init.Datatypes.app (App list ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.filter_app (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.cardinal (App ExportProof.binary_union a_233322222 (App ExportProof.list_union l_2333222222))) (App ExportProof.cardinal_binary_union a_233322222 (App ExportProof.list_union l_2333222222))) REVERTcast (App eq Z (App ExportProof.cardinal (App ExportProof.list_union (App cons ExportProof.set a_233322222 l_2333222222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App cons ExportProof.set a_233322222 l_2333222222)))))))) H_233322222223))))))) En_23332222))))) n_233 l_2 Heqn_2333)))))) 