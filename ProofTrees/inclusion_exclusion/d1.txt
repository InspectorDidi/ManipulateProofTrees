(Definition ExportProof.inclusion_exclusion (Lambda l_2 (App list ExportProof.set) (LetIn f_23 (Lambda l'_22 (App list ExportProof.set) (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection l'_22)) (App ExportProof.alternating_sign (App Coq.Init.Nat.add (App S O) (App Coq.Init.Datatypes.length ExportProof.set l'_22))))) (Prod l'_21 (App list ExportProof.set) Z) (LetIn n_233 (App Coq.Init.Datatypes.length ExportProof.set l_2) nat (LetIn Heqn_2333 (App eq_refl nat n_233) (App eq nat n_233 (App Coq.Init.Datatypes.length ExportProof.set l_2)) (App Coq.Init.Datatypes.nat_ind (Lambda n_23332 nat (Prod l_233321 (App list ExportProof.set) (Prod Heqn_2333211 (App eq nat n_23332 (App Coq.Init.Datatypes.length ExportProof.set l_233321)) (App eq Z (App ExportProof.cardinal (App ExportProof.list_union l_233321)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_233321)))))))) (Lambda l_23332 (App list ExportProof.set) (Lambda En_233322 (App eq nat O (App Coq.Init.Datatypes.length ExportProof.set l_23332)) (App (Case 1 (Lambda l_2333222 (App list ExportProof.set) (Prod En_23332221 (App eq nat O (App Coq.Init.Datatypes.length ExportProof.set l_2333222)) (App eq Z (App ExportProof.cardinal (App ExportProof.list_union l_2333222)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222))))))) (CaseMatch l_23332) (CaseBranches (Lambda En_2333222 (App eq nat O (App Coq.Init.Datatypes.length ExportProof.set (App nil ExportProof.set))) (Cast (Cast (App Coq.Init.Logic.eq_ind_r Z Z0 (Lambda z_23332222 Z (App eq Z z_23332222 Z0)) (App eq_refl Z Z0) (App ExportProof.cardinal ExportProof.empty_set) ExportProof.cardinal_empty) REVERTcast (App eq Z (App ExportProof.cardinal (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_union ExportProof.empty_set (App nil ExportProof.set))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z (Lambda l'_23332222 (App list ExportProof.set) (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection l'_23332222)) (App ExportProof.alternating_sign (App Coq.Init.Nat.add (App S O) (App Coq.Init.Datatypes.length ExportProof.set l'_23332222))))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App nil ExportProof.set))))))) REVERTcast (App eq Z (App ExportProof.cardinal (App ExportProof.list_union (App nil ExportProof.set))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App nil ExportProof.set)))))))) (Lambda s_2333222 ExportProof.set (Lambda l_23332222 (App list ExportProof.set) (Lambda En_233322222 (App eq nat O (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set s_2333222 l_23332222))) (LetIn H_2333222223 (App Coq.Init.Logic.eq_ind nat O (Lambda e_2333222222 nat (Case 0 (Lambda n_23332222222 nat (Sort Prop)) (CaseMatch e_2333222222) (CaseBranches True (Lambda out_23332222222 nat False)))) I (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set s_2333222 l_23332222)) En_233322222) False (App Coq.Init.Logic.False_ind (App eq Z (App ExportProof.cardinal (App ExportProof.list_union (App cons ExportProof.set s_2333222 l_23332222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App cons ExportProof.set s_2333222 l_23332222)))))) H_2333222223))))))) En_233322))) (Lambda n_23332 nat (Lambda IHn_233322 (Prod l_233321 (App list ExportProof.set) (Prod Heqn_2333211 (App eq nat n_23332 (App Coq.Init.Datatypes.length ExportProof.set l_233321)) (App eq Z (App ExportProof.cardinal (App ExportProof.list_union l_233321)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_233321))))))) (Lambda l_2333222 (App list ExportProof.set) (Lambda En_23332222 (App eq nat (App S n_23332) (App Coq.Init.Datatypes.length ExportProof.set l_2333222)) (App (Case 1 (Lambda l_233322222 (App list ExportProof.set) (Prod En_2333222221 (App eq nat (App S n_23332) (App Coq.Init.Datatypes.length ExportProof.set l_233322222)) (App eq Z (App ExportProof.cardinal (App ExportProof.list_union l_233322222)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_233322222))))))) (CaseMatch l_2333222) (CaseBranches (Lambda En_233322222 (App eq nat (App S n_23332) (App Coq.Init.Datatypes.length ExportProof.set (App nil ExportProof.set))) (LetIn H_2333222223 (App Coq.Init.Logic.eq_ind nat (App S n_23332) (Lambda e_2333222222 nat (Case 0 (Lambda n_23332222222 nat (Sort Prop)) (CaseMatch e_2333222222) (CaseBranches False (Lambda out_23332222222 nat True)))) I (App Coq.Init.Datatypes.length ExportProof.set (App nil ExportProof.set)) En_233322222) False (App Coq.Init.Logic.False_ind (App eq Z (App ExportProof.cardinal (App ExportProof.list_union (App nil ExportProof.set))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App nil ExportProof.set)))))) H_2333222223))) (Lambda a_233322222 ExportProof.set (Lambda l_2333222222 (App list ExportProof.set) (Lambda En_23332222222 (App eq nat (App S n_23332) (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set a_233322222 l_2333222222))) (LetIn H_233322222223 (App Coq.Init.Logic.f_equal nat nat (Lambda e_233322222222 nat (Case 0 (Lambda n_2333222222222 nat nat) (CaseMatch e_233322222222) (CaseBranches n_23332 (Lambda n_2333222222222 nat n_2333222222222)))) (App S n_23332) (App S (App Coq.Init.Datatypes.length ExportProof.set l_2333222222)) En_23332222222) (App eq nat n_23332 (App Coq.Init.Datatypes.length ExportProof.set l_2333222222)) (App (Lambda En_2333222222232 (App eq nat n_23332 (App Coq.Init.Datatypes.length ExportProof.set l_2333222222)) (Cast (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal (App ExportProof.list_union l_2333222222))) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) (Lambda z_23332222222322 Z (App eq Z z_23332222222322 (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Init.Datatypes.app (App list ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223222)) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (App Coq.Init.Logic.eq_ind_r (App list (App list ExportProof.set)) (App Coq.Init.Datatypes.app (App list ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))) (Lambda l_23332222222322 (App list (App list ExportProof.set)) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal (App ExportProof.list_union l_2333222222))) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 l_23332222222322)))) (App Coq.Init.Logic.eq_ind_r (App list Z) (App Coq.Init.Datatypes.app Z (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))) (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222))))) (Lambda l_23332222222322 (App list Z) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal (App ExportProof.list_union l_2333222222))) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) (App ExportProof.sum l_23332222222322))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (Lambda z_23332222222322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal (App ExportProof.list_union l_2333222222))) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) z_23332222222322)) (App Coq.Init.Logic.eq_ind_r Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (Lambda z_23332222222322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) z_23332222222322) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223222)) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (LetIn la_23332222222323 (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222321 (Axiom ExportProof.X) bool) (Lambda b_23332222222322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222322)) l_2333222222) (App list (Prod x_23332222222321 (Axiom ExportProof.X) bool)) (LetIn H_233322222223233 (App ExportProof.cardinal_set_eq (App ExportProof.list_union la_23332222222323) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)) (Cast (App Coq.Init.Datatypes.list_ind ExportProof.set (Lambda l_233322222223232 (App list ExportProof.set) (App ExportProof.set_eq (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232321 (Axiom ExportProof.X) bool) (Lambda b_2333222222232322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232322)) l_233322222223232)) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_233322222223232)))) (Cast (Cast (Lambda x_233322222223232 (Axiom ExportProof.X) (Cast (LetIn s_2333222222232323 (App a_233322222 x_233322222223232) bool (Case 0 (Lambda b_23332222222323232 bool (App eq bool false (Case 0 (Lambda b1_233322222223232322 bool bool) (CaseMatch b_23332222222323232) (CaseBranches false false)))) (CaseMatch s_2333222222232323) (CaseBranches (App eq_refl bool false) (App eq_refl bool false)))) REVERTcast (App eq bool (App ExportProof.empty_set x_233322222223232) (App ExportProof.binary_intersection a_233322222 ExportProof.empty_set x_233322222223232)))) REVERTcast (App ExportProof.set_eq ExportProof.empty_set (App ExportProof.binary_intersection a_233322222 ExportProof.empty_set))) REVERTcast (App ExportProof.set_eq (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223231 (Axiom ExportProof.X) bool) (Lambda b_233322222223232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223232)) (App nil ExportProof.set))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union (App nil ExportProof.set))))) (Lambda a0_233322222223232 ExportProof.set (Lambda l_2333222222232322 (App list ExportProof.set) (Lambda IHl_23332222222323222 (App ExportProof.set_eq (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323222)) l_2333222222232322)) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322))) (Cast (App (Lambda lemma_233322222223232222 (App ExportProof.set_eq (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223232221 (Axiom ExportProof.X) bool) (Lambda b_233322222223232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223232222)) l_2333222222232322)) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322))) (App Coq.Classes.Morphisms.subrelation_proper (Prod A_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Sort Prop))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_2333222222232322221 ExportProof.set (Sort Prop)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff)) ExportProof.set_eq (App Coq.Classes.Morphisms.PER_morphism ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PER ExportProof.set ExportProof.set_eq ExportProof.Set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Sort Prop) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) (App ExportProof.binary_union (App ExportProof.binary_intersection a_233322222 a0_233322222223232) (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232322222)) l_2333222222232322))) (App ExportProof.binary_union (App ExportProof.binary_intersection a_233322222 a0_233322222223232) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_union (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Prod x_233322222223232222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Prod x_233322222223232222111 (Axiom ExportProof.X) bool))) (Prod out_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Prod x_233322222223232222111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_union (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Prod x_233322222223232222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_union (App Coq.Classes.Morphisms.subrelation_proper (Prod out_2333222222232322221 ExportProof.set (Prod B_23332222222323222211 ExportProof.set (Prod x_233322222223232222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_2333222222232322221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_union ExportProof.union_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_2333222222232322221 ExportProof.set (Prod x_23332222222323222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) (App ExportProof.binary_intersection a_233322222 a0_233322222223232) (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) (App ExportProof.binary_intersection a_233322222 a0_233322222223232)) (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232322221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232322222)) l_2333222222232322)) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322)) lemma_233322222223232222) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_union a0_233322222223232 (App ExportProof.list_union l_2333222222232322))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_union a0_233322222223232 (App ExportProof.list_union l_2333222222232322))) (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Reflexive (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_union a0_233322222223232 (App ExportProof.list_union l_2333222222232322)))))) IHl_23332222222323222 (Cast (Lambda x_233322222223232222 (Axiom ExportProof.X) (Cast (LetIn s_2333222222232322223 (App a_233322222 x_233322222223232222) bool (Case 0 (Lambda b_23332222222323222232 bool (App eq bool (Case 0 (Lambda b1_233322222223232222322 bool bool) (CaseMatch (Case 0 (Lambda b1_233322222223232222322 bool bool) (CaseMatch b_23332222222323222232) (CaseBranches (App a0_233322222223232 x_233322222223232222) false))) (CaseBranches true (Case 0 (Lambda b1_233322222223232222322 bool bool) (CaseMatch b_23332222222323222232) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_233322222223232222321 (App list (Prod out_233322222223232222321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232322223211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223232222322 (App list (Prod out_233322222223232222321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232322223222 (App list (Prod out_2333222222232322223221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323222232221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223232222322) (CaseBranches (Lambda out_2333222222232322223222 (Axiom ExportProof.X) false) (Lambda b_2333222222232322223222 (Prod out_2333222222232322223221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323222232222 (App list (Prod out_23332222222323222232221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223232222322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232322223222222 bool bool) (CaseMatch (App b_2333222222232322223222 x_233322222223232222322222)) (CaseBranches true (App fold_right t_23332222222323222232222 x_233322222223232222322222))))))))))) 0) l_2333222222232322 x_233322222223232222) false)))) (Case 0 (Lambda b1_233322222223232222322 bool bool) (CaseMatch b_23332222222323222232) (CaseBranches (Case 0 (Lambda b1_233322222223232222322 bool bool) (CaseMatch (App a0_233322222223232 x_233322222223232222)) (CaseBranches true (App (Fix (Functions (App fold_right 0 (Prod l_233322222223232222321 (App list (Prod out_233322222223232222321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232322223211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223232222322 (App list (Prod out_233322222223232222321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232322223222 (App list (Prod out_2333222222232322223221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323222232221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223232222322) (CaseBranches (Lambda out_2333222222232322223222 (Axiom ExportProof.X) false) (Lambda b_2333222222232322223222 (Prod out_2333222222232322223221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323222232222 (App list (Prod out_23332222222323222232221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223232222322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232322223222222 bool bool) (CaseMatch (App b_2333222222232322223222 x_233322222223232222322222)) (CaseBranches true (App fold_right t_23332222222323222232222 x_233322222223232222322222))))))))))) 0) l_2333222222232322 x_233322222223232222))) false)))) (CaseMatch s_2333222222232322223) (CaseBranches (LetIn s_23332222222323222233 (App a0_233322222223232 x_233322222223232222) bool (Case 0 (Lambda b_233322222223232222332 bool (App eq bool (Case 0 (Lambda b1_2333222222232322223322 bool bool) (CaseMatch b_233322222223232222332) (CaseBranches true (App (Fix (Functions (App fold_right 0 (Prod l_2333222222232322223321 (App list (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool)) (Prod out_23332222222323222233211 (Axiom ExportProof.X) bool)) (Lambda l_2333222222232322223322 (App list (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_23332222222323222233222 (App list (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool)) (Prod out_233322222223232222332221 (Axiom ExportProof.X) bool)) (CaseMatch l_2333222222232322223322) (CaseBranches (Lambda out_23332222222323222233222 (Axiom ExportProof.X) false) (Lambda b_23332222222323222233222 (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool) (Lambda t_233322222223232222332222 (App list (Prod out_233322222223232222332221 (Axiom ExportProof.X) bool)) (Lambda x_2333222222232322223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_23332222222323222233222222 bool bool) (CaseMatch (App b_23332222222323222233222 x_2333222222232322223322222)) (CaseBranches true (App fold_right t_233322222223232222332222 x_2333222222232322223322222))))))))))) 0) l_2333222222232322 x_233322222223232222))) (Case 0 (Lambda b1_2333222222232322223322 bool bool) (CaseMatch b_233322222223232222332) (CaseBranches true (App (Fix (Functions (App fold_right 0 (Prod l_2333222222232322223321 (App list (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool)) (Prod out_23332222222323222233211 (Axiom ExportProof.X) bool)) (Lambda l_2333222222232322223322 (App list (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_23332222222323222233222 (App list (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool)) (Prod out_233322222223232222332221 (Axiom ExportProof.X) bool)) (CaseMatch l_2333222222232322223322) (CaseBranches (Lambda out_23332222222323222233222 (Axiom ExportProof.X) false) (Lambda b_23332222222323222233222 (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool) (Lambda t_233322222223232222332222 (App list (Prod out_233322222223232222332221 (Axiom ExportProof.X) bool)) (Lambda x_2333222222232322223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_23332222222323222233222222 bool bool) (CaseMatch (App b_23332222222323222233222 x_2333222222232322223322222)) (CaseBranches true (App fold_right t_233322222223232222332222 x_2333222222232322223322222))))))))))) 0) l_2333222222232322 x_233322222223232222))))) (CaseMatch s_23332222222323222233) (CaseBranches (App eq_refl bool true) (App eq_refl bool (App (Fix (Functions (App fold_right 0 (Prod l_233322222223232222331 (App list (Prod out_233322222223232222331 (Axiom ExportProof.X) bool)) (Prod out_2333222222232322223311 (Axiom ExportProof.X) bool)) (Lambda l_233322222223232222332 (App list (Prod out_233322222223232222331 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232322223322 (App list (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool)) (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223232222332) (CaseBranches (Lambda out_2333222222232322223322 (Axiom ExportProof.X) false) (Lambda b_2333222222232322223322 (Prod out_2333222222232322223321 (Axiom ExportProof.X) bool) (Lambda t_23332222222323222233222 (App list (Prod out_23332222222323222233221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223232222332222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232322223322222 bool bool) (CaseMatch (App b_2333222222232322223322 x_233322222223232222332222)) (CaseBranches true (App fold_right t_23332222222323222233222 x_233322222223232222332222))))))))))) 0) l_2333222222232322 x_233322222223232222))))) (App eq_refl bool false)))) REVERTcast (App eq bool (App ExportProof.binary_union (App ExportProof.binary_intersection a_233322222 a0_233322222223232) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322)) x_233322222223232222) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_union a0_233322222223232 (App ExportProof.list_union l_2333222222232322)) x_233322222223232222)))) REVERTcast (App ExportProof.set_eq (App ExportProof.binary_union (App ExportProof.binary_intersection a_233322222 a0_233322222223232) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222232322))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_union a0_233322222223232 (App ExportProof.list_union l_2333222222232322)))))) REVERTcast (App ExportProof.set_eq (App ExportProof.list_union (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223232221 (Axiom ExportProof.X) bool) (Lambda b_233322222223232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223232222)) (App cons ExportProof.set a0_233322222223232 l_2333222222232322))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union (App cons ExportProof.set a0_233322222223232 l_2333222222232322)))))))) l_2333222222) REVERTcast (App ExportProof.set_eq (App ExportProof.list_union la_23332222222323) (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222))))) (App eq Z (App ExportProof.cardinal (App ExportProof.list_union la_23332222222323)) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222)))) (App Coq.Init.Logic.eq_ind Z (App ExportProof.cardinal (App ExportProof.list_union la_23332222222323)) (Lambda z_2333222222232332 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) z_2333222222232332) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323322)) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (App Coq.Init.Logic.eq_ind_r Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323)))) (Lambda z_2333222222232332 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) z_2333222222232332) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323322)) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (LetIn H_2333222222232333 (Cast (App Coq.Init.Logic.eq_ind_r (App list (App list ExportProof.set)) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App ExportProof.sublists ExportProof.set l_2333222222)) (Lambda l_2333222222232332 (App list (App list ExportProof.set)) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323322)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 l_2333222222232332)))) (App Coq.Init.Logic.eq_ind_r (App list (App list ExportProof.set)) (App cons (App list ExportProof.set) (App nil ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))) (Lambda l_2333222222232332 (App list (App list ExportProof.set)) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323322)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323322)) l_2333222222232332))))) (Cast (Cast (Cast (LetIn to_rewrite_2333222222232333 (App cons Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App nil Z))) (App list Z) (App (Cast (Cast (Lambda Heq_23332222222323332 (App eq (App list Z) to_rewrite_2333222222232333 (App cons Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323331 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332)) l_2333222222)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App nil Z)))) (LetIn list_hyp_233322222223233323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn list_hyp_norm_2333222222232333233 (App nil (App prod (App prod Z Mon) (App Pol Z))) (App list (App prod (App prod Z Mon) (App Pol Z))) (LetIn list_hyp_norm_eq_23332222222323332333 (Cast (App eq_refl (App list (App prod (App prod Z Mon) (App Pol Z))) list_hyp_norm_2333222222232333233) VMcast (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_233322222223233323) list_hyp_norm_2333222222232333233)) (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_233322222223233323) list_hyp_norm_2333222222232333233) (LetIn ring_lemma_233322222223233323333 (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma2 Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_233322222223233323 (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323331 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323332)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) I list_hyp_norm_2333222222232333233 list_hyp_norm_eq_23332222222323332333) (Prod pe_233322222223233323331 (App PExpr Z) (Prod npe_2333222222232333233311 (App Pol Z) (Prod out_23332222222323332333111 (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_2333222222232333233 pe_233322222223233323331) npe_2333222222232333233311) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323331111 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323331112)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323331112 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323331112)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) pe_233322222223233323331) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323331111 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323331112)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323331112 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323331112)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) npe_2333222222232333233311))))) (LetIn res_2333222222232333233333 (App PX Z (App Pc Z (App Zpos xH)) xH (App PX Z (App Pc Z (App Zneg xH)) xH (App Pc Z Z0))) (App Pol Z) (LetIn res_eq_23332222222323332333333 (Cast (App eq_refl (App Pol Z) res_2333222222232333233333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_2333222222232333233 (App PEsub Z (App PEX Z xH) (App PEX Z (App xO xH)))) res_2333222222232333233333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_2333222222232333233 (App PEsub Z (App PEX Z xH) (App PEX Z (App xO xH)))) res_2333222222232333233333) (LetIn thm_233322222223233323333333 (App ring_lemma_233322222223233323333 (App PEsub Z (App PEX Z xH) (App PEX Z (App xO xH))) res_2333222222232333233333 res_eq_23332222222323332333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333331 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333332)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) (App PEsub Z (App PEX Z xH) (App PEX Z (App xO xH)))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333331 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333332)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) res_2333222222232333233333)) (LetIn res0_2333222222232333233333333 (App PX Z (App Pc Z (App Zpos xH)) xH (App Pinj Z xH (App PX Z (App Pc Z (App Zpos xH)) xH (App Pc Z Z0)))) (App Pol Z) (LetIn res_eq0_23332222222323332333333333 (Cast (App eq_refl (App Pol Z) res0_2333222222232333233333333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_2333222222232333233 (App PEadd Z (App PEmul Z (App PEX Z xH) (App PEc Z (App Zpos xH))) (App PEX Z (App xI xH)))) res0_2333222222232333233333333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_2333222222232333233 (App PEadd Z (App PEmul Z (App PEX Z xH) (App PEc Z (App Zpos xH))) (App PEX Z (App xI xH)))) res0_2333222222232333233333333) (LetIn thm0_233322222223233323333333333 (App ring_lemma_233322222223233323333 (App PEadd Z (App PEmul Z (App PEX Z xH) (App PEc Z (App Zpos xH))) (App PEX Z (App xI xH))) res0_2333222222232333233333333 res_eq0_23332222222323332333333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333331 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333332)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) (App PEadd Z (App PEmul Z (App PEX Z xH) (App PEc Z (App Zpos xH))) (App PEX Z (App xI xH)))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333331 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333332)) l_2333222222))))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App nil Z)))) res0_2333222222232333233333333)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (Lambda z_2333222222232333233333333332 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322)) l_2333222222)))))) z_2333222222232333233333333332)) (Cast (LetIn H_2333222222232333233333333333 (App Coq.Init.Logic.eq_ind_r (App list (App list ExportProof.set)) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332))) (App ExportProof.sublists ExportProof.set l_2333222222)) (Lambda l_2333222222232333233333333332 (App list (App list ExportProof.set)) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))))) (App (Lambda l_2333222222232333233333333332 (App list (App list ExportProof.set)) (LetIn H_23332222222323332333333333323 (App Coq.Init.Datatypes.list_ind (App list ExportProof.set) (Lambda l_23332222222323332333333333322 (App list (App list ExportProof.set)) (App eq (App list (App list (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_23332222222323332333333333322)) (App Coq.Lists.List.filter (App list (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222))) l_23332222222323332333333333322)))) (App eq_refl (App list (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.filter (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322))) (App nil (App list ExportProof.set))))) (Lambda b_23332222222323332333333333322 (App list ExportProof.set) (Lambda l_233322222223233323333333333222 (App list (App list ExportProof.set)) (Lambda IHl_2333222222232333233333333332222 (App eq (App list (App list (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)) (App Coq.Lists.List.filter (App list (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222))) l_233322222223233323333333333222))) (Cast (Case 1 (Lambda l_23332222222323332333333333322222 (App list ExportProof.set) (App eq (App list (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222222))) (Case 0 (Lambda b_233322222223233323333333333222222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set l_23332222222323332333333333322222)) (CaseBranches (App cons (App list ExportProof.set) l_23332222222323332333333333322222 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)))) (Case 0 (Lambda b_233322222223233323333333333222222 bool (App list (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)))) (CaseMatch (App ExportProof.nonempty (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222222)) l_23332222222323332333333333322222))) (CaseBranches (App cons (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222222)) l_23332222222323332333333333322222) (App Coq.Lists.List.filter (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222222))) l_233322222223233323333333333222))) (App Coq.Lists.List.filter (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333222222))) l_233322222223233323333333333222)))))) (CaseMatch b_23332222222323332333333333322) (CaseBranches (Cast IHl_2333222222232333233333333332222 REVERTcast (App eq (App list (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222))) (Case 0 (Lambda b_23332222222323332333333333322222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App nil ExportProof.set))) (CaseBranches (App cons (App list ExportProof.set) (App nil ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)))) (Case 0 (Lambda b_23332222222323332333333333322222 bool (App list (App list (Prod x_233322222223233323333333333222221 (Axiom ExportProof.X) bool)))) (CaseMatch (App ExportProof.nonempty (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222)) (App nil ExportProof.set)))) (CaseBranches (App cons (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222)) (App nil ExportProof.set)) (App Coq.Lists.List.filter (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222))) l_233322222223233323333333333222))) (App Coq.Lists.List.filter (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222))) l_233322222223233323333333333222)))))) (Lambda s_23332222222323332333333333322222 ExportProof.set (Lambda b_233322222223233323333333333222222 (App list ExportProof.set) (Cast (App Coq.Init.Logic.eq_trans (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222)) (App Coq.Lists.List.filter (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) l_233322222223233323333333333222))) (App Coq.Init.Logic.f_equal (Prod l_2333222222232333233333333332222221 (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App list (App list (App (Lambda A_23332222222323332333333333322222212 (Sort Set) (Lambda A_233322222223233323333333333222222122 (Sort Set) (Prod out_2333222222232333233333333332222221221 A_23332222222323332333333333322222212 A_233322222223233323333333333222222122))) (Axiom ExportProof.X) bool)))) (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (Lambda f0_2333222222232333233333333332222222 (Prod l_2333222222232333233333333332222221 (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App list (App list (App (Lambda A_23332222222323332333333333322222212 (Sort Set) (Lambda A_233322222223233323333333333222222122 (Sort Set) (Prod out_2333222222232333233333333332222221221 A_23332222222323332333333333322222212 A_233322222223233323333333333222222122))) (Axiom ExportProof.X) bool)))) (App f0_2333222222232333233333333332222222 (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_23332222222323332333333333322222222 (Sort Set) (Lambda A_233322222223233323333333333222222222 (Sort Set) (Prod out_2333222222232333233333333332222222221 A_23332222222323332333333333322222222 A_233322222223233323333333333222222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_23332222222323332333333333322222222 (Sort Set) (Lambda A_233322222223233323333333333222222222 (Sort Set) (Prod out_2333222222232333233333333332222222221 A_23332222222323332333333333322222222 A_233322222223233323333333333222222222))) (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222))) (App eq_refl (Prod l_2333222222232333233333333332222221 (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App list (App list (App (Lambda A_23332222222323332333333333322222212 (Sort Set) (Lambda A_233322222223233323333333333222222122 (Sort Set) (Prod out_2333222222232333233333333332222221221 A_23332222222323332333333333322222212 A_233322222223233323333333333222222122))) (Axiom ExportProof.X) bool)))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222))))) (App Coq.Init.Logic.f_equal (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App list (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool))) (App cons (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App cons (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (App ExportProof.binary_intersection a_233322222 s_23332222222323332333333333322222) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) b_233322222223233323333333333222222))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)) (App Coq.Lists.List.filter (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (App (Lambda A_2333222222232333233333333332222222 (Sort Set) (Lambda A_23332222222323332333333333322222222 (Sort Set) (Prod out_233322222223233323333333333222222221 A_2333222222232333233333333332222222 A_23332222222323332333333333322222222))) (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) l_233322222223233323333333333222)) IHl_2333222222232333233333333332222)) REVERTcast (App eq (App list (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) (Case 0 (Lambda b_2333222222232333233333333332222222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App cons ExportProof.set s_23332222222323332333333333322222 b_233322222223233323333333333222222))) (CaseBranches (App cons (App list ExportProof.set) (App cons ExportProof.set s_23332222222323332333333333322222 b_233322222223233323333333333222222) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333222)))) (Case 0 (Lambda b_2333222222232333233333333332222222 bool (App list (App list (Prod x_23332222222323332333333333322222221 (Axiom ExportProof.X) bool)))) (CaseMatch (App ExportProof.nonempty (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) (App cons ExportProof.set s_23332222222323332333333333322222 b_233322222223233323333333333222222)))) (CaseBranches (App cons (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222)) (App cons ExportProof.set s_23332222222323332333333333322222 b_233322222223233323333333333222222)) (App Coq.Lists.List.filter (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) l_233322222223233323333333333222))) (App Coq.Lists.List.filter (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333332222221 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332222222))) l_233322222223233323333333333222)))))))))) REVERTcast (App eq (App list (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App cons (App list ExportProof.set) b_23332222222323332333333333322 l_233322222223233323333333333222))) (App Coq.Lists.List.filter (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333322221 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322222))) (App cons (App list ExportProof.set) b_23332222222323332333333333322 l_233322222223233323333333333222)))))))) l_2333222222232333233333333332) (App eq (App list (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool))) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332)) (App Coq.Lists.List.filter (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App ExportProof.nonempty (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map (App list ExportProof.set) (App list (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool)) (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323332333333333321 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333322))) l_2333222222232333233333333332))) (App Coq.Init.Datatypes.list_ind (App list ExportProof.set) (Lambda l_233322222223233323333333333232 (App list (App list ExportProof.set)) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322))) l_233322222223233323333333333232))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_233322222223233323333333333232)))))) (App eq_refl Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333333333232 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333333333232)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App nil (App list ExportProof.set))))))) (Lambda b_233322222223233323333333333232 (App list ExportProof.set) (Lambda l_2333222222232333233333333332322 (App list (App list ExportProof.set)) (Lambda IHl_23332222222323332333333333323222 (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222))) l_2333222222232333233333333332322))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333323222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333323222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322))))) (Cast (Case 1 (Lambda l_233322222223233323333333333232222 (App list ExportProof.set) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (Case 0 (Lambda b_2333222222232333233333333332322222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222)) l_233322222223233323333333333232222))) (CaseBranches (App cons (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222)) l_233322222223233323333333333232222) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222))) l_2333222222232333233333333332322))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222))) l_2333222222232333233333333332322))))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332322222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332322222)) (Case 0 (Lambda b_2333222222232333233333333332322222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set l_233322222223233323333333333232222)) (CaseBranches (App cons (App list ExportProof.set) l_233322222223233323333333333232222 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)))))))) (CaseMatch b_233322222223233323333333333232) (CaseBranches (Cast IHl_23332222222323332333333333323222 REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (Case 0 (Lambda b_233322222223233323333333333232222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222)) (App nil ExportProof.set)))) (CaseBranches (App cons (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222)) (App nil ExportProof.set)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222))) l_2333222222232333233333333332322))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222))) l_2333222222232333233333333332322))))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333333333232222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333333333232222)) (Case 0 (Lambda b_233322222223233323333333333232222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App nil ExportProof.set))) (CaseBranches (App cons (App list ExportProof.set) (App nil ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)))))))) (Lambda x_233322222223233323333333333232222 ExportProof.set (Lambda xs_2333222222232333233333333332322222 (App list ExportProof.set) (Cast (App Coq.Init.Logic.eq_ind Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222))) l_2333222222232333233333333332322))))) (Lambda z_23332222222323332333333333323222222 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222222)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222222))) l_2333222222232333233333333332322)))))) (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) z_23332222222323332333333333323222222))) (LetIn to_rewrite_23332222222323332333333333323222223 (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222))) l_2333222222232333233333333332322)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222))) l_2333222222232333233333333332322)))))) (App nil Z))) (App list Z) (App (Cast (Cast (Lambda Heq_233322222223233323333333333232222232 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223 (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232))) l_2333222222232333233333333332322)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232))) l_2333222222232333233333333332322)))))) (App nil Z)))) (LetIn list_hyp_2333222222232333233333333332322222323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn list_hyp_norm_23332222222323332333333333323222223233 (App nil (App prod (App prod Z Mon) (App Pol Z))) (App list (App prod (App prod Z Mon) (App Pol Z))) (LetIn list_hyp_norm_eq_233322222223233323333333333232222232333 (Cast (App eq_refl (App list (App prod (App prod Z Mon) (App Pol Z))) list_hyp_norm_23332222222323332333333333323222223233) VMcast (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_2333222222232333233333333332322222323) list_hyp_norm_23332222222323332333333333323222223233)) (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_2333222222232333233333333332322222323) list_hyp_norm_23332222222323332333333333323222223233) (LetIn ring_lemma_2333222222232333233333333332322222323333 (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma2 Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_2333222222232333233333333332322222323 (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323332)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323332))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) I list_hyp_norm_23332222222323332333333333323222223233 list_hyp_norm_eq_233322222223233323333333333232222232333) (Prod pe_2333222222232333233333333332322222323331 (App PExpr Z) (Prod npe_23332222222323332333333333323222223233311 (App Pol Z) (Prod out_233322222223233323333333333232222232333111 (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233 pe_2333222222232333233333333332322222323331) npe_23332222222323332333333333323222223233311) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323331112)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323331112))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) pe_2333222222232333233333333332322222323331) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323331112)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323331112))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) npe_23332222222323332333333333323222223233311))))) (LetIn res_23332222222323332333333333323222223233333 (App PX Z (App Pc Z (App Zneg xH)) xH (App PX Z (App Pc Z (App Zneg xH)) xH (App Pc Z Z0))) (App Pol Z) (LetIn res_eq_233322222223233323333333333232222232333333 (Cast (App eq_refl (App Pol Z) res_23332222222323332333333333323222223233333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233 (App PEopp Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH))))) res_23332222222323332333333333323222223233333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233 (App PEopp Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH))))) res_23332222222323332333333333323222223233333) (LetIn thm_2333222222232333233333333332322222323333333 (App ring_lemma_2333222222232333233333333332322222323333 (App PEopp Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH)))) res_23332222222323332333333333323222223233333 res_eq_233322222223233323333333333232222232333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333332)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333332))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) (App PEopp Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH))))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333332)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333332))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) res_23332222222323332333333333323222223233333)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333332))) l_2333222222232333233333333332322))))) (Lambda z_23332222222323332333333333323222223233333332 Z (App eq Z z_23332222222323332333333333323222223233333332 (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333322))) l_2333222222232333233333333332322)))))))) (LetIn res0_23332222222323332333333333323222223233333333 (App Pinj Z xH (App PX Z (App Pc Z (App Zneg xH)) xH (App PX Z (App Pc Z (App Zpos xH)) xH (App Pc Z Z0)))) (App Pol Z) (LetIn res_eq0_233322222223233323333333333232222232333333333 (Cast (App eq_refl (App Pol Z) res0_23332222222323332333333333323222223233333333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233 (App PEadd Z (App PEX Z (App xI xH)) (App PEopp Z (App PEX Z (App xO xH))))) res0_23332222222323332333333333323222223233333333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233 (App PEadd Z (App PEX Z (App xI xH)) (App PEopp Z (App PEX Z (App xO xH))))) res0_23332222222323332333333333323222223233333333) (LetIn thm0_2333222222232333233333333332322222323333333333 (App ring_lemma_2333222222232333233333333332322222323333 (App PEadd Z (App PEX Z (App xI xH)) (App PEopp Z (App PEX Z (App xO xH)))) res0_23332222222323332333333333323222223233333333 res_eq0_233322222223233323333333333232222232333333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333332)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333332))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) (App PEadd Z (App PEX Z (App xI xH)) (App PEopp Z (App PEX Z (App xO xH))))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333332)) xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333332))) l_2333222222232333233333333332322)))) (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App nil Z)))) res0_23332222222323332333333333323222223233333333)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332))) l_2333222222232333233333333332322))))) (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (Lambda z_23332222222323332333333333323222223233333333332 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333322)) xs_2333222222232333233333333332322222)))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333322))) l_2333222222232333233333333332322))))) z_23332222222323332333333333323222223233333333332)) (LetIn H_23332222222323332333333333323222223233333333333 (Cast (Cast (App Coq.Init.Logic.eq_ind_r nat (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222) (Lambda n_23332222222323332333333333323222223233333333332 nat (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333322)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign n_23332222222323332333333333323222223233333333332)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))))) (LetIn to_rewrite_23332222222323332333333333323222223233333333333 (App cons Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))) (App nil Z))) (App list Z) (App (Cast (Cast (Lambda Heq_233322222223233323333333333232222232333333333332 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223233333333333 (App cons Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))) (App nil Z)))) (LetIn list_hyp_2333222222232333233333333332322222323333333333323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn list_hyp_norm_23332222222323332333333333323222223233333333333233 (App nil (App prod (App prod Z Mon) (App Pol Z))) (App list (App prod (App prod Z Mon) (App Pol Z))) (LetIn list_hyp_norm_eq_233322222223233323333333333232222232333333333332333 (Cast (App eq_refl (App list (App prod (App prod Z Mon) (App Pol Z))) list_hyp_norm_23332222222323332333333333323222223233333333333233) VMcast (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_2333222222232333233333333332322222323333333333323) list_hyp_norm_23332222222323332333333333323222223233333333333233)) (App eq (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem list_hyp_2333222222232333233333333332322222323333333333323) list_hyp_norm_23332222222323332333333333323222223233333333333233) (LetIn ring_lemma_2333222222232333233333333332322222323333333333323333 (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma2 Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_2333222222232333233333333332322222323333333333323 (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323332)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) I list_hyp_norm_23332222222323332333333333323222223233333333333233 list_hyp_norm_eq_233322222223233323333333333232222232333333333332333) (Prod pe_2333222222232333233333333332322222323333333333323331 (App PExpr Z) (Prod npe_23332222222323332333333333323222223233333333333233311 (App Pol Z) (Prod out_233322222223233323333333333232222232333333333332333111 (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233333333333233 pe_2333222222232333233333333332322222323333333333323331) npe_23332222222323332333333333323222223233333333333233311) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323331112)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) pe_2333222222232333233333333332322222323333333333323331) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323331112 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323331112)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) npe_23332222222323332333333333323222223233333333333233311))))) (LetIn res_23332222222323332333333333323222223233333333333233333 (App PX Z (App Pinj Z xH (App PX Z (App Pc Z (App Zpos xH)) xH (App Pc Z Z0))) xH (App Pc Z Z0)) (App Pol Z) (LetIn res_eq_233322222223233323333333333232222232333333333332333333 (Cast (App eq_refl (App Pol Z) res_23332222222323332333333333323222223233333333333233333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233333333333233 (App PEmul Z (App PEX Z xH) (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))) res_23332222222323332333333333323222223233333333333233333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233333333333233 (App PEmul Z (App PEX Z xH) (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))) res_23332222222323332333333333323222223233333333333233333) (LetIn thm_2333222222232333233333333332322222323333333333323333333 (App ring_lemma_2333222222232333233333333332322222323333333333323333 (App PEmul Z (App PEX Z xH) (App PEopp Z (App PEopp Z (App PEX Z (App xO xH))))) res_23332222222323332333333333323222223233333333333233333 res_eq_233322222223233323333333333232222232333333333332333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333332)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) (App PEmul Z (App PEX Z xH) (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333332)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) res_23332222222323332333333333323222223233333333333233333)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))) (Lambda z_23332222222323332333333333323222223233333333333233333332 Z (App eq Z z_23332222222323332333333333323222223233333333333233333332 (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))))) (LetIn res0_23332222222323332333333333323222223233333333333233333333 (App Pinj Z xH (App PX Z (App Pinj Z xH (App PX Z (App Pc Z (App Zpos xH)) xH (App Pc Z Z0))) xH (App Pc Z Z0))) (App Pol Z) (LetIn res_eq0_233322222223233323333333333232222232333333333332333333333 (Cast (App eq_refl (App Pol Z) res0_23332222222323332333333333323222223233333333333233333333) VMcast (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233333333333233 (App PEopp Z (App PEmul Z (App PEX Z (App xI xH)) (App PEopp Z (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))))) res0_23332222222323332333333333323222223233333333333233333333)) (App eq (App Pol Z) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter list_hyp_norm_23332222222323332333333333323222223233333333333233 (App PEopp Z (App PEmul Z (App PEX Z (App xI xH)) (App PEopp Z (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))))) res0_23332222222323332333333333323222223233333333333233333333) (LetIn thm0_2333222222232333233333333332322222323333333333323333333333 (App ring_lemma_2333222222232333233333333332322222323333333333323333 (App PEopp Z (App PEmul Z (App PEX Z (App xI xH)) (App PEopp Z (App PEopp Z (App PEopp Z (App PEX Z (App xO xH))))))) res0_23332222222323332333333333323222223233333333333233333333 res_eq0_233322222223233323333333333232222232333333333332333333333) (App eq Z (App Coq.setoid_ring.Ring_polynom.PEeval Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333333332)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) (App PEopp Z (App PEmul Z (App PEX Z (App xI xH)) (App PEopp Z (App PEopp Z (App PEopp Z (App PEX Z (App xO xH)))))))) (App Coq.setoid_ring.Ring_polynom.Pphi_pow Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Z Z0 (App Zpos xH) Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_theory.IDphi Z) Z Coq.ZArith.BinIntDef.Z.of_N Coq.ZArith.BinIntDef.Z.pow Coq.setoid_ring.InitialRing.get_signZ (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333333332)) xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App nil Z)))) res0_23332222222323332333333333323222223233333333333233333333)) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (Lambda z_23332222222323332333333333323222223233333333333233333333332 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332333333333322)) xs_2333222222232333233333333332322222)))) (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))) z_23332222222323332333333333323222223233333333333233333333332)) (LetIn H_23332222222323332333333333323222223233333333333233333333333 (Cast (App ExportProof.cardinal_set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332)) xs_2333222222232333233333333332322222)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_2333222222232333233333333332322222)) (App Coq.Init.Datatypes.list_ind ExportProof.set (Lambda xs_23332222222323332333333333323222223233333333333233333333332 (App list ExportProof.set) (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332333333333322)) xs_23332222222323332333333333323222223233333333333233333333332)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_23332222222323332333333333323222223233333333333233333333332)))) (Cast (Cast (Lambda x0_23332222222323332333333333323222223233333333333233333333332 (Axiom ExportProof.X) (Cast (LetIn s_233322222223233323333333333232222232333333333332333333333323 (App a_233322222 x0_23332222222323332333333333323222223233333333333233333333332) bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333232 bool (App eq bool (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333232) (CaseBranches (App x_233322222223233323333333333232222 x0_23332222222323332333333333323222223233333333333233333333332) false)) (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332322 bool bool) (CaseMatch (App x_233322222223233323333333333232222 x0_23332222222323332333333333323222223233333333333233333333332)) (CaseBranches b_2333222222232333233333333332322222323333333333323333333333232 false)))) (CaseMatch s_233322222223233323333333333232222232333333333332333333333323) (CaseBranches (LetIn s_2333222222232333233333333332322222323333333333323333333333233 (App x_233322222223233323333333333232222 x0_23332222222323332333333333323222223233333333333233333333332) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332332 bool (App eq bool b_23332222222323332333333333323222223233333333333233333333332332 (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333323322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332332) (CaseBranches true false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333233) (CaseBranches (App eq_refl bool true) (App eq_refl bool false)))) (LetIn s_2333222222232333233333333332322222323333333333323333333333233 (App x_233322222223233323333333333232222 x0_23332222222323332333333333323222223233333333333233333333332) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332332 bool (App eq bool false (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333323322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332332) (CaseBranches false false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333233) (CaseBranches (App eq_refl bool false) (App eq_refl bool false))))))) REVERTcast (App eq bool (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222 x0_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 a_233322222 x0_23332222222323332333333333323222223233333333333233333333332)))) REVERTcast (App ExportProof.set_eq (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App ExportProof.binary_intersection x_233322222223233323333333333232222 a_233322222))) REVERTcast (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332)) (App nil ExportProof.set))) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App nil ExportProof.set))))) (Lambda x'_23332222222323332333333333323222223233333333333233333333332 ExportProof.set (Lambda xs_233322222223233323333333333232222232333333333332333333333322 (App list ExportProof.set) (Lambda IHxs_2333222222232333233333333332322222323333333333323333333333222 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333333333222)) xs_233322222223233323333333333232222232333333333332333333333322)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (Cast (App (Lambda lemma_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332222)) xs_233322222223233323333333333232222232333333333332333333333322)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.subrelation_proper (Prod A_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Sort Prop))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Sort Prop)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff)) ExportProof.set_eq (App Coq.Classes.Morphisms.PER_morphism ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PER ExportProof.set ExportProof.set_eq ExportProof.Set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Sort Prop) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332333333333322222)) xs_233322222223233323333333333232222232333333333332333333333322))) (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222111 (Axiom ExportProof.X) bool))) (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_233322222223233323333333333232222232333333333332333333333322221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332)) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332333333333322222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332333333333322222)) xs_233322222223233323333333333232222232333333333332333333333322)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)) lemma_23332222222323332333333333323222223233333333333233333333332222) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Reflexive (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)))))) IHxs_2333222222232333233333333332322222323333333333323333333333222 (LetIn H_23332222222323332333333333323222223233333333333233333333332223 (App Coq.Init.Datatypes.list_ind ExportProof.set (Lambda xs_23332222222323332333333333323222223233333333333233333333332222 (App list ExportProof.set) (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_23332222222323332333333333323222223233333333333233333333332222) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_23332222222323332333333333323222223233333333333233333333332222)))) (Cast (Cast (Lambda x_23332222222323332333333333323222223233333333333233333333332222 (Axiom ExportProof.X) (Cast (LetIn s_233322222223233323333333333232222232333333333332333333333322223 (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222) bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333222232 bool (App eq bool b_2333222222232333233333333332322222323333333333323333333333222232 (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222232) (CaseBranches b_2333222222232333233333333332322222323333333333323333333333222232 false)))) (CaseMatch s_233322222223233323333333333232222232333333333332333333333322223) (CaseBranches (App eq_refl bool true) (App eq_refl bool false)))) REVERTcast (App eq bool (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222) (App ExportProof.binary_intersection a_233322222 a_233322222 x_23332222222323332333333333323222223233333333333233333333332222)))) REVERTcast (App ExportProof.set_eq a_233322222 (App ExportProof.binary_intersection a_233322222 a_233322222))) REVERTcast (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App nil ExportProof.set)) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App nil ExportProof.set))))) (Lambda a0_23332222222323332333333333323222223233333333333233333333332222 ExportProof.set (Lambda xs_233322222223233323333333333232222232333333333332333333333322222 (App list ExportProof.set) (Lambda IHxs_2333222222232333233333333332322222323333333333323333333333222222 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (Cast (App (Lambda lemma_23332222222323332333333333323222223233333333333233333333332222222 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (App Coq.Classes.Morphisms.subrelation_proper (Prod A_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Sort Prop))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Sort Prop)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff)) ExportProof.set_eq (App Coq.Classes.Morphisms.PER_morphism ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PER ExportProof.set ExportProof.set_eq ExportProof.Set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Sort Prop)) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Sort Prop) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)) (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) a0_23332222222323332333333333323222223233333333333233333333332222 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) a0_23332222222323332333333333323222223233333333333233333333332222) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)) lemma_23332222222323332333333333323222223233333333333233333333332222222) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq)) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq)))) a_233322222 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Reflexive a_233322222) (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)) (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod B_2333222222232333233333333332322222323333333333323333333333222222211 ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332222222111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322222221 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222222211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_233322222223233323333333333232222232333333333332333333333322222221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) a0_23332222222323332333333333323222223233333333333233333333332222 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) a0_23332222222323332333333333323222223233333333333233333333332222) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)) lemma_23332222222323332333333333323222223233333333333233333333332222222)))) IHxs_2333222222232333233333333332322222323333333333323333333333222222 (Cast (Lambda x_23332222222323332333333333323222223233333333333233333333332222222 (Axiom ExportProof.X) (Cast (LetIn s_233322222223233323333333333232222232333333333332333333333322222223 (App a0_23332222222323332333333333323222223233333333333233333333332222 x_23332222222323332333333333323222223233333333333233333333332222222) bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333222222232 bool (App eq bool (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222222322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222222232) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222222322 bool bool) (CaseMatch (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222222)) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332222222321 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222321 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322222223211 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332222222322 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322222223222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223221 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222222232221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332222222322) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322222223222 (Prod out_233322222223233323333333333232222232333333333332333333333322222223221 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222222232222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222222232221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332222222322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223222222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322222223222 x_23332222222323332333333333323222223233333333333233333333332222222322222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222222232222 x_23332222222323332333333333323222223233333333333233333333332222222322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322222 x_23332222222323332333333333323222223233333333333233333333332222222) false)) false)) (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222222322 bool bool) (CaseMatch (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222222)) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222222322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222222232) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332222222322 bool bool) (CaseMatch (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222222)) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332222222321 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222321 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322222223211 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332222222322 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322222223222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223221 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222222232221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332222222322) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322222223222 (Prod out_233322222223233323333333333232222232333333333332333333333322222223221 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222222232222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222222232221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332222222322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223222222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322222223222 x_23332222222323332333333333323222223233333333333233333333332222222322222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222222232222 x_23332222222323332333333333323222223233333333333233333333332222222322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322222 x_23332222222323332333333333323222223233333333333233333333332222222) false)) false)) false)))) (CaseMatch s_233322222223233323333333333232222232333333333332333333333322222223) (CaseBranches (LetIn s_2333222222232333233333333332322222323333333333323333333333222222233 (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222222) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332222222332 bool (App eq bool (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332222222332) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_233322222223233323333333333232222232333333333332333333333322222223321 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222222233211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223233323333333333232222232333333333332333333333322222223322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232333233333333332322222323333333333323333333333222222233222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332222222332221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223233323333333333232222232333333333332333333333322222223322) (CaseBranches a_233322222 (Lambda b_2333222222232333233333333332322222323333333333323333333333222222233222 (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323332333333333323222223233333333333233333333332222222332222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222332221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223233323333333333232222232333333333332333333333322222223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222222233222222 bool bool) (CaseMatch (App b_2333222222232333233333333332322222323333333333323333333333222222233222 x_233322222223233323333333333232222232333333333332333333333322222223322222)) (CaseBranches (App fold_right t_23332222222323332333333333323222223233333333333233333333332222222332222 x_233322222223233323333333333232222232333333333332333333333322222223322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322222 x_23332222222323332333333333323222223233333333333233333333332222222) false)) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332222222332) (CaseBranches (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332222222332) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_233322222223233323333333333232222232333333333332333333333322222223321 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222222233211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223233323333333333232222232333333333332333333333322222223322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232333233333333332322222323333333333323333333333222222233222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332222222332221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223233323333333333232222232333333333332333333333322222223322) (CaseBranches a_233322222 (Lambda b_2333222222232333233333333332322222323333333333323333333333222222233222 (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323332333333333323222223233333333333233333333332222222332222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222332221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223233323333333333232222232333333333332333333333322222223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222222233222222 bool bool) (CaseMatch (App b_2333222222232333233333333332322222323333333333323333333333222222233222 x_233322222223233323333333333232222232333333333332333333333322222223322222)) (CaseBranches (App fold_right t_23332222222323332333333333323222223233333333333233333333332222222332222 x_233322222223233323333333333232222232333333333332333333333322222223322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322222 x_23332222222323332333333333323222223233333333333233333333332222222) false)) false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333222222233) (CaseBranches (App eq_refl bool (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332222222331 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222331 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322222223311 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332222222332 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332222222331 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322222223322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332222222332) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322222223322 (Prod out_233322222223233323333333333232222232333333333332333333333322222223321 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222222233222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222222233221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332222222332222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223322222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322222223322 x_23332222222323332333333333323222223233333333333233333333332222222332222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222222233222 x_23332222222323332333333333323222223233333333333233333333332222222332222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322222 x_23332222222323332333333333323222223233333333333233333333332222222)) (App eq_refl bool false)))) (LetIn s_2333222222232333233333333332322222323333333333323333333333222222233 (App a_233322222 x_23332222222323332333333333323222223233333333333233333333332222222) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332222222332 bool (App eq bool false (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322222223322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332222222332) (CaseBranches false false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333222222233) (CaseBranches (App eq_refl bool false) (App eq_refl bool false))))))) REVERTcast (App eq bool (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222)) x_23332222222323332333333333323222223233333333333233333333332222222) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) x_23332222222323332333333333323222223233333333333233333333332222222)))) REVERTcast (App ExportProof.set_eq (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))) (App ExportProof.binary_intersection a_233322222 (App ExportProof.binary_intersection a0_23332222222323332333333333323222223233333333333233333333332222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322222))))))) REVERTcast (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App cons ExportProof.set a0_23332222222323332333333333323222223233333333333233333333332222 xs_233322222223233323333333333232222232333333333332333333333322222)) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App cons ExportProof.set a0_23332222222323332333333333323222223233333333333233333333332222 xs_233322222223233323333333333232222232333333333332333333333322222)))))))) xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App (Lambda H_233322222223233323333333333232222232333333333332333333333322232 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App (Lambda lemma_2333222222232333233333333332322222323333333333323333333333222322 (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.subrelation_proper (Prod A_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Sort Prop))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Sort Prop)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff)) ExportProof.set_eq (App Coq.Classes.Morphisms.PER_morphism ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PER ExportProof.set ExportProof.set_eq ExportProof.Set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Sort Prop)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Sort Prop)) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq Coq.Init.Logic.iff) (App Coq.Classes.Morphisms.respectful ExportProof.set (Sort Prop) ExportProof.set_eq (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl)) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Sort Prop) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) Coq.Init.Logic.iff (App Coq.Program.Basics.flip (Sort Prop) (Sort Prop) (Sort Prop) Coq.Program.Basics.impl) Coq.Classes.Morphisms.iff_flip_impl_subrelation)) (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq)) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq)))) (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Reflexive (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) x_233322222223233323333333333232222 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) x_233322222223233323333333333232222) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)) lemma_2333222222232333233333333332322222323333333333323333333333222322)) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq)) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq)))) x_233322222223233323333333333232222 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Reflexive x_233322222223233323333333333232222) (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)) (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) (App Coq.Classes.Morphisms.Reflexive_partial_app_morphism ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_normalizes_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Program.Basics.flip (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (Sort Prop) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.flip_arrow ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.Morphisms.flip_atom ExportProof.set ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip_atom (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.proper_flip_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) ExportProof.binary_intersection (App Coq.Classes.Morphisms.subrelation_proper (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod B_233322222223233323333333333232222232333333333332333333333322232211 ExportProof.set (Prod x_2333222222232333233333333332322222323333333333323333333333222322111 (Axiom ExportProof.X) bool))) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod out_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set ExportProof.set) ExportProof.set_eq (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq)) ExportProof.binary_intersection ExportProof.intersection_morphism (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)))) tt (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod B_23332222222323332333333333323222223233333333333233333333332223221 ExportProof.set (Prod x_233322222223233323333333333232222232333333333332333333333322232211 (Axiom ExportProof.X) bool)) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq)) ExportProof.set_eq (App Coq.Classes.Morphisms.flip1 ExportProof.set ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl ExportProof.set ExportProof.set_eq)) (App Coq.Classes.Morphisms.respectful ExportProof.set ExportProof.set ExportProof.set_eq ExportProof.set_eq) (App Coq.Classes.Morphisms.respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq))) (App Coq.Classes.Morphisms.subrelation_respectful ExportProof.set (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) ExportProof.set_eq (App Coq.Classes.RelationClasses.subrelation_symmetric ExportProof.set ExportProof.set_eq ExportProof.Set_eq_Symmetric) ExportProof.set_eq (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) (App Coq.Program.Basics.flip (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) (Sort Prop) ExportProof.set_eq)) (App Coq.Classes.Morphisms.flip2 (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq ExportProof.set_eq (App Coq.Classes.Morphisms.subrelation_refl (Prod x_23332222222323332333333333323222223233333333333233333333332223221 (Axiom ExportProof.X) bool) ExportProof.set_eq))))))) x'_23332222222323332333333333323222223233333333333233333333332 (App Coq.Classes.Morphisms.reflexive_proper_proxy ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.PreOrder_Reflexive ExportProof.set (App Coq.Program.Basics.flip ExportProof.set ExportProof.set (Sort Prop) ExportProof.set_eq) (App Coq.Classes.RelationClasses.flip_PreOrder ExportProof.set ExportProof.set_eq (App Coq.Classes.RelationClasses.Equivalence_PreOrder ExportProof.set ExportProof.set_eq ExportProof.Set_eq))) x'_23332222222323332333333333323222223233333333333233333333332) (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322) (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)) lemma_2333222222232333233333333332322222323333333333323333333333222322)))) H_233322222223233323333333333232222232333333333332333333333322232 (Cast (Lambda x0_2333222222232333233333333332322222323333333333323333333333222322 (Axiom ExportProof.X) (Cast (LetIn s_23332222222323332333333333323222223233333333333233333333332223223 (App a_233322222 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_233322222223233323333333333232222232333333333332333333333322232232 bool (App eq bool (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch b_233322222223233323333333333232222232333333333332333333333322232232) (CaseBranches (App x'_23332222222323332333333333323222223233333333333233333333332 x0_2333222222232333233333333332322222323333333333323333333333222322) false))) (CaseBranches (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch b_233322222223233323333333333232222232333333333332333333333322232232) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_2333222222232333233333333332322222323333333333323333333333222322321 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322321 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332223223211 (Axiom ExportProof.X) bool)) (Lambda l_2333222222232333233333333332322222323333333333323333333333222322322 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_23332222222323332333333333323222223233333333333233333333332223223222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223221 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322232232221 (Axiom ExportProof.X) bool)) (CaseMatch l_2333222222232333233333333332322222323333333333323333333333222322322) (CaseBranches a_233322222 (Lambda b_23332222222323332333333333323222223233333333333233333333332223223222 (Prod out_23332222222323332333333333323222223233333333333233333333332223223221 (Axiom ExportProof.X) bool) (Lambda t_233322222223233323333333333232222232333333333332333333333322232232222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232232221 (Axiom ExportProof.X) bool)) (Lambda x_2333222222232333233333333332322222323333333333323333333333222322322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223222222 bool bool) (CaseMatch (App b_23332222222323332333333333323222223233333333333233333333332223223222 x_2333222222232333233333333332322222323333333333323333333333222322322222)) (CaseBranches (App fold_right t_233322222223233323333333333232222232333333333332333333333322232232222 x_2333222222232333233333333332322222323333333333323333333333222322322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)) false)) false)) (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch (App x'_23332222222323332333333333323222223233333333333233333333332 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322322 bool bool) (CaseMatch b_233322222223233323333333333232222232333333333332333333333322232232) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_2333222222232333233333333332322222323333333333323333333333222322321 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322321 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332223223211 (Axiom ExportProof.X) bool)) (Lambda l_2333222222232333233333333332322222323333333333323333333333222322322 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_23332222222323332333333333323222223233333333333233333333332223223222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223221 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322232232221 (Axiom ExportProof.X) bool)) (CaseMatch l_2333222222232333233333333332322222323333333333323333333333222322322) (CaseBranches a_233322222 (Lambda b_23332222222323332333333333323222223233333333333233333333332223223222 (Prod out_23332222222323332333333333323222223233333333333233333333332223223221 (Axiom ExportProof.X) bool) (Lambda t_233322222223233323333333333232222232333333333332333333333322232232222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232232221 (Axiom ExportProof.X) bool)) (Lambda x_2333222222232333233333333332322222323333333333323333333333222322322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223222222 bool bool) (CaseMatch (App b_23332222222323332333333333323222223233333333333233333333332223223222 x_2333222222232333233333333332322222323333333333323333333333222322322222)) (CaseBranches (App fold_right t_233322222223233323333333333232222232333333333332333333333322232232222 x_2333222222232333233333333332322222323333333333323333333333222322322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)) false)) false)))) (CaseMatch s_23332222222323332333333333323222223233333333333233333333332223223) (CaseBranches (LetIn s_233322222223233323333333333232222232333333333332333333333322232233 (App x'_23332222222323332333333333323222223233333333333233333333332 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333222322332 bool (App eq bool (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222322332) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332223223321 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223321 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322232233211 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332223223322 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322232233222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233221 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222322332221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332223223322) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322232233222 (Prod out_233322222223233323333333333232222232333333333332333333333322232233221 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222322332222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322332221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332223223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233222222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322232233222 x_23332222222323332333333333323222223233333333333233333333332223223322222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222322332222 x_23332222222323332333333333323222223233333333333233333333332223223322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)) false)) (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222322332) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332223223321 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223321 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322232233211 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332223223322 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322232233222 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233221 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222322332221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332223223322) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322232233222 (Prod out_233322222223233323333333333232222232333333333332333333333322232233221 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222322332222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322332221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332223223322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233222222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322232233222 x_23332222222323332333333333323222223233333333333233333333332223223322222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222322332222 x_23332222222323332333333333323222223233333333333233333333332223223322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)) false)))) (CaseMatch s_233322222223233323333333333232222232333333333332333333333322232233) (CaseBranches (LetIn s_2333222222232333233333333332322222323333333333323333333333222322333 (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332223223332 bool (App eq bool (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332223223332) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_233322222223233323333333333232222232333333333332333333333322232233321 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222322333211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223233323333333333232222232333333333332333333333322232233322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232333233333333332322222323333333333323333333333222322333222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332223223332221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223233323333333333232222232333333333332333333333322232233322) (CaseBranches a_233322222 (Lambda b_2333222222232333233333333332322222323333333333323333333333222322333222 (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323332333333333323222223233333333333233333333332223223332222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223332221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223233323333333333232222232333333333332333333333322232233322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322333222222 bool bool) (CaseMatch (App b_2333222222232333233333333332322222323333333333323333333333222322333222 x_233322222223233323333333333232222232333333333332333333333322232233322222)) (CaseBranches (App fold_right t_23332222222323332333333333323222223233333333333233333333332223223332222 x_233322222223233323333333333232222232333333333332333333333322232233322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332223223332) (CaseBranches (App (Fix (Functions (App fold_right 0 (Prod l_233322222223233323333333333232222232333333333332333333333322232233321 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222322333211 (Axiom ExportProof.X) bool)) (Lambda l_233322222223233323333333333232222232333333333332333333333322232233322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_2333222222232333233333333332322222323333333333323333333333222322333222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool)) (Prod out_23332222222323332333333333323222223233333333333233333333332223223332221 (Axiom ExportProof.X) bool)) (CaseMatch l_233322222223233323333333333232222232333333333332333333333322232233322) (CaseBranches a_233322222 (Lambda b_2333222222232333233333333332322222323333333333323333333333222322333222 (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool) (Lambda t_23332222222323332333333333323222223233333333333233333333332223223332222 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223332221 (Axiom ExportProof.X) bool)) (Lambda x_233322222223233323333333333232222232333333333332333333333322232233322222 (Axiom ExportProof.X) (Case 0 (Lambda b1_2333222222232333233333333332322222323333333333323333333333222322333222222 bool bool) (CaseMatch (App b_2333222222232333233333333332322222323333333333323333333333222322333222 x_233322222223233323333333333232222232333333333332333333333322232233322222)) (CaseBranches (App fold_right t_23332222222323332333333333323222223233333333333233333333332223223332222 x_233322222223233323333333333232222232333333333332333333333322232233322222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322) false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333222322333) (CaseBranches (App eq_refl bool (App (Fix (Functions (App fold_right 0 (Prod l_23332222222323332333333333323222223233333333333233333333332223223331 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223331 (Axiom ExportProof.X) bool)) (Prod out_233322222223233323333333333232222232333333333332333333333322232233311 (Axiom ExportProof.X) bool)) (Lambda l_23332222222323332333333333323222223233333333333233333333332223223332 (App list (Prod out_23332222222323332333333333323222223233333333333233333333332223223331 (Axiom ExportProof.X) bool)) (Case 1 (Lambda l_233322222223233323333333333232222232333333333332333333333322232233322 (App list (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool)) (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool)) (CaseMatch l_23332222222323332333333333323222223233333333333233333333332223223332) (CaseBranches a_233322222 (Lambda b_233322222223233323333333333232222232333333333332333333333322232233322 (Prod out_233322222223233323333333333232222232333333333332333333333322232233321 (Axiom ExportProof.X) bool) (Lambda t_2333222222232333233333333332322222323333333333323333333333222322333222 (App list (Prod out_2333222222232333233333333332322222323333333333323333333333222322333221 (Axiom ExportProof.X) bool)) (Lambda x_23332222222323332333333333323222223233333333333233333333332223223332222 (Axiom ExportProof.X) (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233322222 bool bool) (CaseMatch (App b_233322222223233323333333333232222232333333333332333333333322232233322 x_23332222222323332333333333323222223233333333333233333333332223223332222)) (CaseBranches (App fold_right t_2333222222232333233333333332322222323333333333323333333333222322333222 x_23332222222323332333333333323222223233333333333233333333332223223332222) false)))))))))) 0) xs_233322222223233323333333333232222232333333333332333333333322 x0_2333222222232333233333333332322222323333333333323333333333222322)) (App eq_refl bool false)))) (LetIn s_2333222222232333233333333332322222323333333333323333333333222322333 (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332223223332 bool (App eq bool false (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332223223332) (CaseBranches false false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333222322333) (CaseBranches (App eq_refl bool false) (App eq_refl bool false))))))) (LetIn s_233322222223233323333333333232222232333333333332333333333322232233 (App x_233322222223233323333333333232222 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_2333222222232333233333333332322222323333333333323333333333222322332 bool (App eq bool false (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch b_2333222222232333233333333332322222323333333333323333333333222322332) (CaseBranches (Case 0 (Lambda b1_23332222222323332333333333323222223233333333333233333333332223223322 bool bool) (CaseMatch (App x'_23332222222323332333333333323222223233333333333233333333332 x0_2333222222232333233333333332322222323333333333323333333333222322)) (CaseBranches false false)) false)))) (CaseMatch s_233322222223233323333333333232222232333333333332333333333322232233) (CaseBranches (LetIn s_2333222222232333233333333332322222323333333333323333333333222322333 (App x'_23332222222323332333333333323222223233333333333233333333332 x0_2333222222232333233333333332322222323333333333323333333333222322) bool (Case 0 (Lambda b_23332222222323332333333333323222223233333333333233333333332223223332 bool (App eq bool false (Case 0 (Lambda b1_233322222223233323333333333232222232333333333332333333333322232233322 bool bool) (CaseMatch b_23332222222323332333333333323222223233333333333233333333332223223332) (CaseBranches false false)))) (CaseMatch s_2333222222232333233333333332322222323333333333323333333333222322333) (CaseBranches (App eq_refl bool false) (App eq_refl bool false)))) (App eq_refl bool false))))))) REVERTcast (App eq bool (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) x0_2333222222232333233333333332322222323333333333323333333333222322) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322))) x0_2333222222232333233333333332322222323333333333323333333333222322)))) REVERTcast (App ExportProof.set_eq (App ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x'_23332222222323332333333333323222223233333333333233333333332) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)))) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App ExportProof.binary_intersection x'_23332222222323332333333333323222223233333333333233333333332 (App ExportProof.binary_intersection a_233322222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 xs_233322222223233323333333333232222232333333333332333333333322)))))))) H_23332222222323332333333333323222223233333333333233333333332223))) REVERTcast (App ExportProof.set_eq (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332222)) (App cons ExportProof.set x'_23332222222323332333333333323222223233333333333233333333332 xs_233322222223233323333333333232222232333333333332333333333322))) (App ExportProof.binary_intersection x_233322222223233323333333333232222 (App Coq.Lists.List.fold_right ExportProof.set ExportProof.set ExportProof.binary_intersection a_233322222 (App cons ExportProof.set x'_23332222222323332333333333323222223233333333333233333333332 xs_233322222223233323333333333232222232333333333332333333333322)))))))) xs_2333222222232333233333333332322222)) REVERTcast (App eq Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))))) (App eq Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (App (Lambda H_233322222223233323333333333232222232333333333332333333333332 (App eq Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332333333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332333333333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (App Coq.Init.Logic.eq_ind_r Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (Lambda z_2333222222232333233333333332322222323333333333323333333333322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.mul z_2333222222232333233333333332322222323333333333323333333333322 (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))))) (Cast (LetIn hyp_list_2333222222232333233333333332322222323333333333323333333333323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn fv_list_23332222222323332333333333323222223233333333333233333333333233 (App cons Z (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App cons Z (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App nil Z))) (App list Z) (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma1 Coq.setoid_ring.Ring_tac.ring_subst_niter fv_list_23332222222323332333333333323222223233333333333233333333333233 hyp_list_2333222222232333233333333332322222323333333333323333333333323 (App PEmul Z (App PEX Z xH) (App PEX Z (App xO xH))) (App PEmul Z (App PEX Z (App xO xH)) (App PEX Z xH)) I (Cast (App eq_refl bool true) VMcast (App eq bool (LetIn lmp_233322222223233323333333333232222232333333333332333333333332333 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem hyp_list_2333222222232333233333333332322222323333333333323333333333323) (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.Peq Z Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_233322222223233323333333333232222232333333333332333333333332333 (App PEmul Z (App PEX Z xH) (App PEX Z (App xO xH)))) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_233322222223233323333333333232222232333333333332333333333332333 (App PEmul Z (App PEX Z (App xO xH)) (App PEX Z xH))))) true))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))))) (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333323333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333323333333333322)) xs_2333222222232333233333333332322222)))) H_233322222223233323333333333232222232333333333332333333333332)) H_23332222222323332333333333323222223233333333333233333333333)) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))) thm0_2333222222232333233333333332322222323333333333323333333333)))) (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333233333332)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) thm_2333222222232333233333333332322222323333333333323333333))))))))) REVERTcast (Prod out_233322222223233323333333333232222232333333333331 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223233333333333 (App cons Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))))) (App nil Z)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333312)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)))))))))) REVERTcast (Prod out_233322222223233323333333333232222232333333333331 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223233333333333 to_rewrite_23332222222323332333333333323222223233333333333) (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333312)) xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222))))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.alternating_sign (App Coq.Init.Datatypes.length ExportProof.set xs_2333222222232333233333333332322222)))))))))) (App eq_refl (App list Z) to_rewrite_23332222222323332333333333323222223233333333333))) (App Coq.Init.Datatypes.length ExportProof.set (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222)) (App Coq.Lists.List.map_length ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222)) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222)))) (App ExportProof.alternating_sign (App Coq.Init.Nat.add (App S O) (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222)))))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (App ExportProof.alternating_sign (App Coq.Init.Nat.add (App S O) (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))))))) REVERTcast (App eq Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))))) (App eq Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332)) xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (App (Lambda H_233322222223233323333333333232222232333333333332 (App eq Z (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232333333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232333333333332)) xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (App Coq.Init.Logic.eq_ind_r Z (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (Lambda z_2333222222232333233333333332322222323333333333322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.opp z_2333222222232333233333333332322222323333333333322) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333222))) l_2333222222232333233333333332322))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333222))) l_2333222222232333233333333332322))))) (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))))) (Cast (LetIn hyp_list_2333222222232333233333333332322222323333333333323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn fv_list_23332222222323332333333333323222223233333333333233 (App cons Z (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333333232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333333232))) l_2333222222232333233333333332322)))) (App nil Z))) (App list Z) (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma1 Coq.setoid_ring.Ring_tac.ring_subst_niter fv_list_23332222222323332333333333323222223233333333333233 hyp_list_2333222222232333233333333332322222323333333333323 (App PEsub Z (App PEopp Z (App PEopp Z (App PEX Z xH))) (App PEX Z (App xO xH))) (App PEadd Z (App PEopp Z (App PEX Z (App xO xH))) (App PEX Z xH)) I (Cast (App eq_refl bool true) VMcast (App eq bool (LetIn lmp_233322222223233323333333333232222232333333333332333 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem hyp_list_2333222222232333233333333332322222323333333333323) (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.Peq Z Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_233322222223233323333333333232222232333333333332333 (App PEsub Z (App PEopp Z (App PEopp Z (App PEX Z xH))) (App PEX Z (App xO xH)))) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_233322222223233323333333333232222232333333333332333 (App PEadd Z (App PEopp Z (App PEX Z (App xO xH))) (App PEX Z xH))))) true))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.opp (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333322))) l_2333222222232333233333333332322))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333322))) l_2333222222232333233333333332322))))) (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))))) (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222323333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222323333333333322)) xs_2333222222232333233333333332322222))) H_233322222223233323333333333232222232333333333332)) H_23332222222323332333333333323222223233333333333)) (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333333332))) l_2333222222232333233333333332322)))))) thm0_2333222222232333233333333332322222323333333333)))) (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333332)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222223233333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222223233333332))) l_2333222222232333233333333332322)))))) thm_2333222222232333233333333332322222323333333))))))))) REVERTcast (Prod out_233322222223233323333333333232222231 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223 (App cons Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232))) l_2333222222232333233333333332322)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222232 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222232))) l_2333222222232333233333333332322)))))) (App nil Z)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312))) l_2333222222232333233333333332322)))))) (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312))) l_2333222222232333233333333332322))))))))) REVERTcast (Prod out_233322222223233323333333333232222231 (App eq (App list Z) to_rewrite_23332222222323332333333333323222223 to_rewrite_23332222222323332333333333323222223) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set (App ExportProof.binary_intersection a_233322222 x_233322222223233323333333333232222) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312)) xs_2333222222232333233333333332322222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312))) l_2333222222232333233333333332322)))))) (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332322222312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332322222312))) l_2333222222232333233333333332322))))))))) (App eq_refl (App list Z) to_rewrite_23332222222323332333333333323222223))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333323222222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333323222222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)))) IHl_23332222222323332333333333323222) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (Case 0 (Lambda b_23332222222323332333333333323222222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222)) (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)))) (CaseBranches (App cons (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222)) (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222))) l_2333222222232333233333333332322))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_23332222222323332333333333323222222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333323222222))) l_2333222222232333233333333332322))))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333323222222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333323222222)) (Case 0 (Lambda b_23332222222323332333333333323222222 bool (App list (App list ExportProof.set))) (CaseMatch (App ExportProof.nonempty ExportProof.set (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222))) (CaseBranches (App cons (App list ExportProof.set) (App cons ExportProof.set x_233322222223233323333333333232222 xs_2333222222232333233333333332322222) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) l_2333222222232333233333333332322)))))))))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_233322222223233323333333333232222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333232222))) (App cons (App list ExportProof.set) b_233322222223233323333333333232 l_2333222222232333233333333332322)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233323333333333232222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233323333333333232222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App cons (App list ExportProof.set) b_233322222223233323333333333232 l_2333222222232333233333333332322)))))))))) l_2333222222232333233333333332))) (App ExportProof.sublists ExportProof.set l_2333222222)) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332)) l_2333222222)) (App ExportProof.sublists_map ExportProof.set ExportProof.set (Lambda b_2333222222232333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332)) l_2333222222)) (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App (LetIn H_23332222222323332333333333333 (App eq_refl Z (App ExportProof.cardinal a_233322222)) (App eq Z (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal a_233322222)) (App (Lambda H_233322222223233323333333333332 (App eq Z (App ExportProof.cardinal a_233322222) (App ExportProof.cardinal a_233322222)) (Lambda H0_2333222222232333233333333333322 (App eq Z (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333333321 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333333322 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333333322)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333333322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333333322)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App Coq.Init.Logic.eq_trans Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (App (Lambda A_23332222222323332333333333333222 (Sort Set) (Lambda A_233322222223233323333333333332222 (Sort Set) (Prod out_2333222222232333233333333333322221 A_23332222222323332333333333333222 A_233322222223233323333333333332222))) (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333333222)) l_2333222222))))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (App (Lambda A_23332222222323332333333333333222 (Sort Set) (Lambda A_233322222223233323333333333332222 (Sort Set) (Prod out_2333222222232333233333333333322221 A_23332222222323332333333333333222 A_233322222223233323333333333332222))) (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333333222)) l_2333222222))))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333333222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333333222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App Coq.Init.Logic.f_equal (Prod y_23332222222323332333333333333221 Z Z) Z (Lambda f0_23332222222323332333333333333222 (Prod y_23332222222323332333333333333221 Z Z) (App f0_23332222222323332333333333333222 (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (App (Lambda A_233322222223233323333333333332222 (Sort Set) (Lambda A_2333222222232333233333333333322222 (Sort Set) (Prod out_23332222222323332333333333333222221 A_233322222223233323333333333332222 A_2333222222232333233333333333322222))) (Axiom ExportProof.X) bool) (Lambda b_233322222223233323333333333332222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233323333333333332222)) l_2333222222)))))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222)) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222)) (App eq_refl (Prod y_23332222222323332333333333333221 Z Z) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222)))) (App Coq.Init.Logic.f_equal Z Z (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222)) (App Coq.ZArith.BinIntDef.Z.opp (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (App (Lambda A_23332222222323332333333333333222 (Sort Set) (Lambda A_233322222223233323333333333332222 (Sort Set) (Prod out_2333222222232333233333333333322221 A_23332222222323332333333333333222 A_233322222223233323333333333332222))) (Axiom ExportProof.X) bool) (Lambda b_23332222222323332333333333333222 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332333333333333222)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332333333333333222 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332333333333333222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) H0_2333222222232333233333333333322)))) H_23332222222323332333333333333)) H_2333222222232333233333333333)) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232333233333333331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232333233333333332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232333233333333332)) l_2333222222)))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232333233333333332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232333233333333332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) thm0_233322222223233323333333333)))))))))))) REVERTcast (Prod out_23332222222323331 (App eq (App list Z) to_rewrite_2333222222232333 (App cons Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_23332222222323331 (Axiom ExportProof.X) bool) (Lambda b_23332222222323332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_23332222222323332)) l_2333222222)))))) (App cons Z (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App nil Z)))) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233311 (Axiom ExportProof.X) bool) (Lambda b_233322222223233312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233312)) l_2333222222)))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233312 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233312)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))))))) REVERTcast (Prod out_23332222222323331 (App eq (App list Z) to_rewrite_2333222222232333 to_rewrite_2333222222232333) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_233322222223233311 (Axiom ExportProof.X) bool) (Lambda b_233322222223233312 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_233322222223233312)) l_2333222222)))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal a_233322222) (App Zpos xH)) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233312 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233312)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))))))) (App eq_refl (App list Z) to_rewrite_2333222222232333))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)))))) (App Coq.ZArith.BinIntDef.Z.add (App Coq.ZArith.BinIntDef.Z.mul (App ExportProof.cardinal (App ExportProof.list_intersection (App cons ExportProof.set a_233322222 (App nil ExportProof.set)))) (App ExportProof.alternating_sign (App Coq.Init.Nat.add (App S O) (App Coq.Init.Datatypes.length ExportProof.set (App cons ExportProof.set a_233322222 (App nil ExportProof.set)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)))))) (App Coq.ZArith.BinIntDef.Z.add (App f_23 (App cons ExportProof.set a_233322222 (App nil ExportProof.set))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App cons (App list ExportProof.set) (App nil ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))))))) (App ExportProof.sublists ExportProof.set l_2333222222) (App ExportProof.sublists_proper ExportProof.set l_2333222222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App ExportProof.sublists ExportProof.set l_2333222222))) (App ExportProof.filter_map_always (App list ExportProof.set) (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App ExportProof.sublists ExportProof.set l_2333222222) (Lambda x_2333222222232332 (App list ExportProof.set) (App eq_refl bool true)))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App ExportProof.sublists ExportProof.set l_2333222222))))))) (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_2333222222232332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_2333222222232332)) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App (Lambda H_23332222222323332 (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222323332 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222323332)) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App Coq.Init.Logic.eq_ind Z (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (Lambda z_233322222223233322 Z (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) z_233322222223233322))) (Cast (LetIn hyp_list_233322222223233323 (App nil (App prod (App PExpr Z) (App PExpr Z))) (App list (App prod (App PExpr Z) (App PExpr Z))) (LetIn fv_list_2333222222232333233 (App cons Z (App ExportProof.cardinal a_233322222) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App cons Z (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323)))) (App nil Z)))) (App list Z) (App Coq.setoid_ring.ZArithRing.Zr_ring_lemma1 Coq.setoid_ring.Ring_tac.ring_subst_niter fv_list_2333222222232333233 hyp_list_233322222223233323 (App PEsub Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH))) (App PEX Z (App xI xH))) (App PEadd Z (App PEX Z (App xO xH)) (App PEsub Z (App PEX Z xH) (App PEX Z (App xI xH)))) I (Cast (App eq_refl bool true) VMcast (App eq bool (LetIn lmp_23332222222323332333 (App Coq.setoid_ring.Ring_polynom.mk_monpol_list Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem hyp_list_233322222223233323) (App list (App prod (App prod Z Mon) (App Pol Z))) (App Coq.setoid_ring.Ring_polynom.Peq Z Coq.ZArith.Zbool.Zeq_bool (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_23332222222323332333 (App PEsub Z (App PEadd Z (App PEX Z xH) (App PEX Z (App xO xH))) (App PEX Z (App xI xH)))) (App Coq.setoid_ring.Ring_polynom.norm_subst Z Z0 (App Zpos xH) Coq.ZArith.BinIntDef.Z.add Coq.ZArith.BinIntDef.Z.mul Coq.ZArith.BinIntDef.Z.sub Coq.ZArith.BinIntDef.Z.opp Coq.ZArith.Zbool.Zeq_bool Coq.ZArith.BinIntDef.Z.quotrem Coq.setoid_ring.Ring_tac.ring_subst_niter lmp_23332222222323332333 (App PEadd Z (App PEX Z (App xO xH)) (App PEsub Z (App PEX Z xH) (App PEX Z (App xI xH))))))) true))))) REVERTcast (App eq Z (App Coq.ZArith.BinIntDef.Z.sub (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323))))) (App Coq.ZArith.BinIntDef.Z.add (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App Coq.ZArith.BinIntDef.Z.sub (App ExportProof.cardinal a_233322222) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set la_23332222222323)))))))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_233322222223233322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_233322222223233322)) (App ExportProof.sublists ExportProof.set l_2333222222))))) H_23332222222323332)) H_2333222222232333)) (App ExportProof.cardinal (App ExportProof.list_union la_23332222222323)) (App IHn_233322 la_23332222222323 (Cast (App Coq.Init.Logic.eq_ind_r nat (App Coq.Init.Datatypes.length ExportProof.set l_2333222222) (Lambda n_2333222222232332 nat (App eq nat n_23332 n_2333222222232332)) En_2333222222232 (App Coq.Init.Datatypes.length (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (App Coq.Lists.List.map ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)) (App Coq.Lists.List.map_length ExportProof.set (Prod x_2333222222232331 (Axiom ExportProof.X) bool) (Lambda b_2333222222232332 ExportProof.set (App ExportProof.binary_intersection a_233322222 b_2333222222232332)) l_2333222222)) REVERTcast (App eq nat n_23332 (App Coq.Init.Datatypes.length ExportProof.set la_23332222222323))))) (App ExportProof.cardinal (App ExportProof.binary_intersection a_233322222 (App ExportProof.list_union l_2333222222))) H_233322222223233))) (App ExportProof.cardinal (App ExportProof.list_union l_2333222222)) (App IHn_233322 l_2333222222 En_2333222222232)) (App ExportProof.sum (App Coq.Init.Datatypes.app Z (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))) (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App ExportProof.sum_app (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222))) (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))))) (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Init.Datatypes.app (App list ExportProof.set) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App Coq.Lists.List.map_app (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222)) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222))))) (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App Coq.Init.Datatypes.app (App list ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.filter_app (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set l_2333222222) (App Coq.Lists.List.map (App list ExportProof.set) (App list ExportProof.set) (Lambda l_23332222222322 (App list ExportProof.set) (App cons ExportProof.set a_233322222 l_23332222222322)) (App ExportProof.sublists ExportProof.set l_2333222222)))) (App ExportProof.cardinal (App ExportProof.binary_union a_233322222 (App ExportProof.list_union l_2333222222))) (App ExportProof.cardinal_binary_union a_233322222 (App ExportProof.list_union l_2333222222))) REVERTcast (App eq Z (App ExportProof.cardinal (App ExportProof.list_union (App cons ExportProof.set a_233322222 l_2333222222))) (App ExportProof.sum (App Coq.Lists.List.map (App list ExportProof.set) Z f_23 (App Coq.Lists.List.filter (App list ExportProof.set) (App ExportProof.nonempty ExportProof.set) (App ExportProof.sublists ExportProof.set (App cons ExportProof.set a_233322222 l_2333222222)))))))) H_233322222223))))))) En_23332222))))) n_233 l_2 Heqn_2333)))))) 